[

    {
        "Text Input": "A monkey orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne) orbit around another object (like a UV Sphere or a cube), you need to set up a basic animation. The following script will do just that in Blender:\n\n```python\nimport bpy\nimport mathutils\nimport math\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_obj = bpy.context.object\ncentral_obj.name = \"Central Object\"\n\n# Create a monkey\nbpy.ops.mesh.primitive_monkey_add(location=(3, 0, 0))\nmonkey = bpy.context.object\nmonkey.name = \"Orbiting Monkey\"\n\n# Set the origin of the monkey to be its center of mass to make the orbit look better\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\n\n# Set the number of frames and radius of the orbit\nnum_frames = 250\nradius = 3.0\n\n# Ensure the animation timeline is correctly set\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = num_frames\n\n# Create the orbit animation\nfor frame in range(num_frames):\n    # Set the current frame\n    bpy.context.scene.frame_set(frame)\n\n    # Calculate the angle in radians and the new position\n    angle = (frame / num_frames) * 2 * math.pi\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n\n    # Set the new location of the monkey\n    monkey.location = (x, y, 0)\n\n    # Insert the keyframe for the location\n    monkey.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the animation to play in loop\nbpy.context.scene.frame_current = 1\n\nprint(\"Monkey orbit animation created!\")\n```\n\n### Explanation:\n\n1. **Scene Preparation**: The script starts by removing any existing mesh objects to keep things clean.\n\n2. **Creation of Objects**: It creates a central object, which is a UV Sphere, and then a monkey mesh (Suzanne) at a certain distance (radius) from the object.\n\n3. **Animation Setup**: It sets animation parameters, such as the number"
    },
    {
        "Text Input": "A cylinder moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a cylinder moving in a circular path, you'll need to set up a few key frames and use a bit of math to define the circular motion. Below is an example script that accomplishes this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(2, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set animation parameters\nframe_start = 0\nframe_end = 100\nradius_of_circle = 5\ncenter_of_circle = (0, 0, 0)\n\n# Calculate keyframes\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate angle for current frame\n    angle = 2 * math.pi * (frame - frame_start) / (frame_end - frame_start)\n    \n    # Calculate new position of the cylinder\n    x = center_of_circle[0] + radius_of_circle * math.cos(angle)\n    y = center_of_circle[1] + radius_of_circle * math.sin(angle)\n    z = center_of_circle[2]  # Cylinder stays at same z level\n    \n    # Set location\n    cylinder.location = (x, y, z)\n    \n    # Insert keyframe for location\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set end frame for animation\nbpy.context.scene.frame_end = frame_end\n```\n\n### Explanation:\n\n1. **Initialize the Scene**:\n   - The script starts by deselecting all objects and deleting existing meshes, then adds a new cylinder.\n\n2. **Set Animation Parameters**:\n   - Define the start and end frames for the animation, the radius of the circle, and the center of the circle.\n\n3. **Calculate Keyframes**:\n   - For each frame in the range, calculate the angle based on the current frame and create a position `(x, y, z)` using basic trigonometry (`cos` and `sin` functions).\n   - Set the cylinder's location to this new position and insert a keyframe at this location for each frame, ensuring smooth circular motion.\n\n4. **Final Setup**:\n   - The script sets the total frames in the"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a sphere expand and shrink, we can use Blender's `bpy` library to manipulate the sphere's scale over time. This will involve setting up keyframes for the sphere's scaling factors.\n\nBelow is a simple script that achieves this effect:\n\n```python\nimport bpy\nfrom math import sin, pi\n\ndef create_sphere():\n    # Delete all mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Add a new UV Sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    sphere = bpy.context.object\n    sphere.name = \"ExpandingShrinkingSphere\"\n    return sphere\n\ndef animate_sphere(sphere, num_cycles=5, frames_per_cycle=50):\n    # Set the current frame to the start\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = num_cycles * frames_per_cycle\n    \n    # Define the scale animation\n    for i in range(num_cycles * frames_per_cycle):\n        frame = i\n        bpy.context.scene.frame_set(frame)\n        \n        # Calculate scale using a sine wave pattern\n        scale_factor = 1 + 0.5 * sin(2 * pi * i / frames_per_cycle)\n        \n        # Apply uniform scale to the sphere\n        sphere.scale = (scale_factor, scale_factor, scale_factor)\n        \n        # Insert scaling keyframe\n        sphere.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Main function\ndef main():\n    sphere = create_sphere()\n    animate_sphere(sphere)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- **Sphere Creation**: The script first deletes existing mesh objects for a clean slate, then adds a UV sphere at the origin.\n- **Animation Setup**: The script sets up an animation that runs for a specified number of cycles, with each cycle consisting of a defined number of frames.\n- **Scaling Calculation**: The scale factor for the sphere is calculated using a sine wave formula. This provides a smooth transition of scaling up and down.\n- **Keyframes**: The scale value is keyframed on each frame to record the animation.\n\n### Usage:\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new script"
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "Below is a Blender Python script using the `bpy` module. This script creates a torus and makes it move diagonally upwards over a series of frames.\n\n```python\nimport bpy\n\n# Make sure nothing is selected initially\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 1))\ntorus = bpy.context.active_object\ntorus.name = \"MovingTorus\"\n\n# Specify the animation parameters\nframe_start = 1\nframe_end = 100\nmovement_x = 5    # Total movement in the X direction\nmovement_y = 5    # Total movement in the Y direction\nmovement_z = 5    # Total movement in the Z direction\n\n# Set initial keyframe\ntorus.location = (0, 0, 1)\ntorus.keyframe_insert(data_path='location', frame=frame_start)\n\n# Set final keyframe\ntorus.location = (movement_x, movement_y, 1 + movement_z)\ntorus.keyframe_insert(data_path='location', frame=frame_end)\n\nprint(f\"Torus animation created from frame {frame_start} to {frame_end}, moving diagonally upwards.\")\n```\n\nHow the script works:\n1. A torus is created at the world origin.\n2. It sets the start (`frame_start`) and end (`frame_end`) frames for the animation (1 to 100 in this case).\n3. It defines the total movement distances in the X, Y, and Z directions (`movement_x`, `movement_y`, `movement_z`).\n4. The initial location of the torus is set and keyed as its starting position.\n5. The final location reflects the total movement in all directions, and is keyed on `frame_end`.\n6. The script prints a message to confirm the animation setup.\n\nTo execute the script:\n- Open Blender.\n- Switch to the \"Scripting\" workspace.\n- Copy and paste the script into a new text block.\n- Click the \"Run Script\" button.\n\nThe torus will now move diagonally upward from its starting position over the animation timeline. You can modify the `movement_x`, `movement_y`, and `movement_z` variables to adjust the path of the animation."
    },
    {
        "Text Input": "A cone tilts back and forth.",
        "Blender Script": "To create a script in Blender that makes a cone tilt back and forth, we can use the following steps:\n\n1. Create a new cone object.\n2. Set up a keyframe animation to make the cone tilt.\n3. Use Python scripting to automate these steps in Blender.\n\nHere\u2019s a script that accomplishes this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.object\n\n# Switch to Object Mode\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Set the pivot point to the bottom of the cone\nbpy.context.scene.cursor.location = cone.location\nbpy.ops.object.origin_set(type='ORIGIN_CURSOR')\n\n# Set keyframes for the tilt animation\n# Frame 1: Initial position\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Frame 20: Tilt backward (about X axis)\ncone.rotation_euler = (math.radians(15), 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=20)\n\n# Frame 40: Back to initial position\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=40)\n\n# Frame 60: Tilt forward (about X axis)\ncone.rotation_euler = (math.radians(-15), 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n\n# Frame 80: Back to initial position\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=80)\n\n# Set animation playback range\nbpy.context.scene.frame_end = 80\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_set(0)\n\n# Set interpolation to 'LINEAR' for consistent speed\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Cone til"
    },
    {
        "Text Input": "A sphere tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a sphere tilting back and forth, you can use the following script. This will add a sphere to the scene and animate its rotation about the X-axis to create a tilting effect.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set the pivot point to the center of the sphere (usually default)\nsphere.location = (0, 0, 0)\n\n# Define the animation frames and angle\nstart_frame = 1\nend_frame = 60\ntilt_angle = math.radians(20)  # Tilt angle in radians (20 degrees)\n\n# Set initial keyframes\nsphere.rotation_euler = (tilt_angle, 0, 0)  # Initial tilt\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\nsphere.rotation_euler = (-tilt_angle, 0, 0)  # End tilt\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the interpolation type to 'LINEAR' to create a smooth back and forth motion\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Set playback to continuous loop\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_current = start_frame\n\n# Loop playback settings\nbpy.ops.screen.animation_play()\n```\n\nThis script performs the following tasks in Blender:\n1. Clears the scene of existing mesh objects to start fresh.\n2. Adds a new UV sphere to the scene.\n3. Sets up keyframes for the sphere's rotation animation, making it tilt back and forth on the X-axis.\n4. Adjusts the keyframe interpolation to 'LINEAR' for smooth transitions.\n5. Sets the animation to loop continuously over the specified frames.\n\nTo execute this script, open a new or existing Blender project, switch to the Scripting workspace, create a new text block, paste the script, and click \"Run Script\". Your"
    },
    {
        "Text Input": "A torus moves from left to right.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a torus moving from left to right. Make sure you run this script in Blender's scripting environment.\n\n```python\nimport bpy\n\ndef create_torus():\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.25, location=(-5, 0, 0))\n    torus = bpy.context.object\n    torus.name = \"MovingTorus\"\n    return torus\n\ndef animate_torus(torus):\n    # Set the start and end frames\n    start_frame = 1\n    end_frame = 100\n    \n    # Insert the initial keyframe\n    torus.location = (-5, 0, 0)\n    torus.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Insert the final keyframe\n    torus.location = (5, 0, 0)\n    torus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\ndef main():\n    # Delete default cube\n    if \"Cube\" in bpy.data.objects:\n        bpy.data.objects[\"Cube\"].select_set(True)\n        bpy.ops.object.delete()\n    \n    # Create and animate the torus\n    torus = create_torus()\n    animate_torus(torus)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions to Run:\n1. Open Blender.\n2. Switch to the \"Scripting\" workspace by clicking on the \"Scripting\" tab.\n3. Click \"New\" to create a new script, and paste the above code into the text editor.\n4. Press \"Run Script\" or use `Alt + P` to execute the script.\n\n### Explanation:\n- The script creates a torus at the start position (-5, 0, 0).\n- It sets up keyframes at frame 1 for the starting position and frame 100 for the ending position (5, 0, 0).\n- The torus animates smoothly over the frames set, moving from left to right.\n\nYou can adjust the `start_frame` and `end_frame` to control the speed of the animation or the range of the movement. Additionally, you can modify the `major_radius` and `minor_radius` values to change the size of the torus."
    },
    {
        "Text Input": "A cylinder spins while floating.",
        "Blender Script": "To create a Blender Python script that animates a spinning cylinder as if it's floating, you can use the following script. This script will create a cylinder, position it appropriately, and set up the necessary animation to make it spin continuously.\n\n```python\nimport bpy\n\n# Clear existing mesh objects in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\n\n# Get the newly created cylinder object\ncylinder = bpy.context.object\n\n# Set the cylinder's location to make it appear 'floating' (e.g., 2 units above ground)\ncylinder.location.z = 2\n\n# Insert keyframes for spinning animation\n# Start frame\ncylinder.rotation_euler.z = 0\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=2)\n\n# End frame (one full rotation = 2 * pi radians)\ncylinder.rotation_euler.z = 2 * 3.141592653589793\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=100, index=2)\n\n# Set interpolation to linear for constant spinning speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Optionally, switch to edit view and shading for better visibility\nbpy.context.scene.render.engine = 'BLENDER_EEVEE'\nbpy.context.space_data.shading.type = 'SOLID'\nbpy.context.scene.eevee.use_gtao = True\n\nprint(\"Script executed: Cylinder is floating and spinning.\")\n```\n\n### How to Run the Script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text file within Blender's text editor.\n3. Copy and paste the above script into the text editor.\n4. Click on the \"Run Script\" button to execute the script.\n\n### Explanation:\n\n- **Scene Cleanup:** The script starts by deleting existing mesh objects to ensure a clean scene for the script to function correctly.\n- **Cylinder Creation:** A"
    },
    {
        "Text Input": "A sphere bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a sphere bounce like a ball, we will animate the sphere using keyframes. The script will script will add a sphere to the scene and then animate it bouncing up and down. Below is a simple Blender Python script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing mesh objects except the camera and lamp\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete() \n\n# Add a new UV Sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nsphere = bpy.context.object\n\n# Set up basic scene properties\nscene = bpy.context.scene\nscene.frame_start = 0\nscene.frame_end = 80\nscene.frame_current = 0\n\n# Function to add bounce keyframes\ndef bounce_animation(obj, frames, height):\n    # Set initial position\n    obj.location.z = 0\n    obj.keyframe_insert(data_path=\"location\", frame=frames[0])\n\n    # Bounce to the height\n    obj.location.z = height\n    obj.keyframe_insert(data_path=\"location\", frame=frames[1])\n\n    # Return to ground\n    obj.location.z = 0\n    obj.keyframe_insert(data_path=\"location\", frame=frames[2])\n\n# Apply the bounce animation with 3 bounces\nbounces = 3\nframe_gap = 20  # The frame interval for each bounce\nbounce_height = 2.0\n\nfor bounce in range(bounces):\n    start = bounce * frame_gap\n    mid = start + frame_gap // 2\n    end = start + frame_gap\n\n    bounce_animation(sphere, (start, mid, end), bounce_height)\n\n# Enable auto smooth for better shading (optional)\nsphere.data.use_auto_smooth = True\n\n# Switch to the 'Graph Editor' to adjust animation curves\nbpy.context.area.type = 'GRAPH_EDITOR'\n\n# Add some interpolation for a more realistic bounce effect\nfcurves = sphere.animation_data.action.fcurves\nfor fcurve in fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Return to 3D view\nbpy.context.area.type = 'VIEW_3D'\n```\n\n### Explanation:\n1. **Clear Scene**: The"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a torus oscillate in a sine wave, you can use the following code. This script sets up a simple animation by modifying the torus's location along the Z-axis using the sine function over time.\n\n```python\nimport bpy\nimport math\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.25, location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Define the animation properties\nframe_start = 1\nframe_end = 250\namplitude = 1\nfrequency = 1  # Number of cycles per second\n\n# Ensure we're in the correct animation data context\ntorus.animation_data_clear()\n\n# Insert keyframes over the specified frame range\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the new Z location using a sine wave\n    z_location = amplitude * math.sin(frequency * (frame / 10.0))\n    \n    # Set the frame and update the torus location\n    bpy.context.scene.frame_set(frame)\n    torus.location.z = z_location\n    \n    # Insert a keyframe for the location property\n    torus.keyframe_insert(data_path=\"location\", index=2)  # index=2 corresponds to Z-axis\n\n# Setting up the scene frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set the animation to play continuously\nbpy.ops.screen.animation_play()\n\nprint(\"Torus oscillation animation created.\")\n```\n\n### How it Works:\n\n1. **Torus Creation**: We start by creating a torus using `bpy.ops.mesh.primitive_torus_add()` with specified major and minor radii.\n\n2. **Animation Setup**: We designate the animation frame range (from frame 1 to 250 for example) and specify the amplitude and frequency of the sine wave, which determine the vertical displacement and speed of oscillation.\n\n3. **Keyframing Process**: For each frame, we compute the Z-axis location of the torus using a sine function. We then set the frame in the scene, update the torus's Z-location, and insert a keyframe for this location.\n\n4. **Playback**: The scene's frame range is adjusted to the specified start and end frames, and the animation starts playing continuously with `b"
    },
    {
        "Text Input": "A sphere bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a sphere bounce like a ball, you'll need a script that animates the position of the sphere using keyframes. The script will use Blender's Python API to set up the scene, create a sphere, and animate it to simulate bouncing.\n\nBelow is a simple script that creates a bouncing sphere animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nsphere = bpy.context.object\n\n# Set the number of frames for the animation\nframe_start = 1\nframe_end = 50\nbounce_height = 5\ngravity = 9.8\nbounce_duration = 20  # frames for one up-down motion\n\n# Function to calculate the vertical position of the ball at a given frame\ndef calculate_bounce_position(frame, start_frame, bounce_duration, max_height):\n    local_frame = (frame - start_frame) % bounce_duration\n    t = local_frame / bounce_duration * 2  # full-cycle normalized time (0 to 2)\n    if t <= 1:\n        # Going up\n        pos = max_height * (1 - (t - 1)**2)\n    else:\n        # Coming down\n        t -= 1\n        pos = max_height * (1 - (t - 1)**2)\n    return pos\n\n# Set keyframes for the bounce\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    # Calculate position\n    z_position = calculate_bounce_position(frame, frame_start, bounce_duration, bounce_height)\n    sphere.location.z = z_position\n    # Insert keyframe\n    sphere.keyframe_insert(data_path='location', index=2)  # 'index=2' is for the Z-axis\n    \n# Set the scene frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set up playback settings\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_current = frame_start\n\n# Enable the auto-smooth\nbpy.ops.object.shade_smooth()\n\nprint(\"Bouncing animation created.\")\n```\n\n### How the script works:\n\n1. **Initialize the Scene:** Clears"
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that animates a plane moving diagonally upwards. This script will create a plane object, and animate it moving diagonally up through the Z and X axes over a specified number of frames.\n\n```python\nimport bpy\n\n# Delete default cube if it exists\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set animation frames\nstart_frame = 1\nend_frame = 100\n\n# Set the initial location keyframe for the plane\nplane.location = (0, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the final location keyframe for the plane\nplane.location = (10, 0, 10)  # Moves 10 units diagonally upwards\nplane.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set the scene's frames to allow playback of the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Select the plane for viewing\nbpy.context.view_layer.objects.active = plane\nplane.select_set(True)\n\nprint(\"Animation of the plane moving diagonally upwards has been set up.\")\n```\n\n# How to Use:\n\n1. Open Blender.\n2. Open the Scripting workspace.\n3. Create a new text block and paste the script into it.\n4. Run the script using the 'Run Script' button.\n5. Switch to the \"Layout\" workspace and hit the play button to see the animation.\n\nThis script moves the plane 10 units diagonally upwards from the origin over 100 frames. You can adjust the size, start and end frames, or movement direction by modifying the appropriate parameters in the script."
    },
    {
        "Text Input": "A torus spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a torus spin while floating, you can use the Blender Python API (`bpy`). The script will create a new torus, animate its rotation, and position to give the appearance of floating. Below is a simple example of such a script:\n\n```python\nimport bpy\nimport math\n\n# Delete all objects in the current scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 1))\n\n# Get the torus object\ntorus = bpy.context.active_object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 250\n\n# Set the floating height\nfloat_height = 0.5\nfloat_speed = 2  # The speed of floating up and down\n\n# Set the spinning speed\nspinning_speed = math.radians(360)  # 360 degrees per full cycle\n\n# Insert keyframes for the floating animation\nfor frame in range(start_frame, end_frame + 1, 10):\n    torus.location.z = 1 + float_height * math.sin(float_speed * (frame / end_frame * 2 * math.pi))\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Insert keyframes for the spinning animation\nfor frame in range(start_frame, end_frame + 1, 5):\n    torus.rotation_euler[2] = spinning_speed * (frame / end_frame)\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n\n# Set the frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Play the animation\nbpy.context.scene.frame_set(start_frame)\nbpy.ops.screen.animation_play()\n```\n\nThis script does the following:\n1. Removes any existing objects in the scene to start with a clean workspace.\n2. Adds a torus object at a specified location.\n3. Establishes an animation timeline from `start_frame` to `end_frame`.\n4. Animates the Z-axis location of the torus to create a floating effect using a sine wave.\n5. Animates the Z-axis rotation of the torus to make it spin continuously.\n6. Sets up keyframes at intervals to create the animation.\n7. Plays the animation"
    },
    {
        "Text Input": "A cone expands and shrinks.",
        "Blender Script": "To create a Blender Python script that animates a cone expanding and shrinking, you need to manipulate the scale of the cone over time. Here is a simple script to achieve this effect in Blender using the `bpy` module:\n\n```python\nimport bpy\n\n# Ensure there's only one cone by removing existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the number of frames for the animation\ntotal_frames = 100\nexpansion_factor = 2.0  # Factor by which the cone scales up (and down)\n\n# Define keyframes for expanding and shrinking\nfor frame in range(total_frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the scale factor: a cosine wave effect for smooth expansion and shrinking\n    scale_factor = 1 + (expansion_factor - 1) * (1 + np.cos(2 * np.pi * frame / total_frames)) / 2\n\n    # Set scale on the object\n    cone.scale = (scale_factor, scale_factor, scale_factor)\n    cone.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the animation to repeat\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames - 1\nbpy.context.scene.render.fps = 24\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\nInstructions to Run the Script:\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block.\n3. Copy and paste the script into the text editor.\n4. Run the script by clicking the \"Run Script\" button.\n\nThis script will create a cone and animate its scale to smoothly transition between expanded and shrunken states using a cosine function for a natural animation effect. You can adjust `total_frames` for the duration of the animation and `expansion_factor` to control how much the cone expands and shrinks."
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cylinder in Blender using Python, we can write a script that animates the cylinder's vertical position over time. We'll use Blender's `bpy` module to add the cylinder and create keyframe animations. Here is a script that achieves this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set the number of bounces and keyframe interval\nnum_bounces = 5\nframes_per_bounce = 20\ntotal_frames = num_bounces * frames_per_bounce\n\n# Initial keyframe\ncylinder.location.z = 1  # Start on the ground\ncylinder.keyframe_insert(data_path=\"location\", frame=1)\n\nfor bounce in range(num_bounces):\n    # Calculate bounce height and timing\n    frame_up = bounce * frames_per_bounce + frames_per_bounce // 2\n    frame_down = (bounce + 1) * frames_per_bounce\n    bounce_height = 2 / (bounce + 1)  # Gradually decrease height\n\n    # Keyframe for upward motion (bounce peak)\n    cylinder.location.z = bounce_height + 1\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame_up)\n\n    # Keyframe for downward motion (return to ground)\n    cylinder.location.z = 1\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame_down)\n\n# Set playback range and current frame\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\nbpy.context.scene.frame_set(1)\n```\n\n### Script Explanation:\n\n1. **Clear Existing Objects:** The script starts by clearing all existing mesh objects from the scene to ensure a clean workspace.\n\n2. **Add a Cylinder:** A cylinder is added to the scene at a specified location.\n\n3. **Define Animation Parameters:** We define variables for the number of bounces and the frames per bounce to control the animation duration.\n\n4. **Animate Bounces:**\n   - For each bounce, we calculate two keyframes: one for the peak of the bounce (upward"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, you can use the following script. This script sets up a basic animation using keyframes to make the plane object wiggle:\n\n```python\nimport bpy\nimport math\n\n# Create a plane object if it doesn't already exist\nif not 'WigglingPlane' in bpy.data.objects:\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False)\n    plane = bpy.context.active_object\n    plane.name = \"WigglingPlane\"\nelse:\n    plane = bpy.data.objects['WigglingPlane']\n\n# Set the number of frames for the animation\nframe_start = 1\nframe_end = 100\nwiggle_amplitude = 1.0  # Amplitude of the wiggle\nwiggle_frequency = 0.1  # Frequency of the wiggle\n\n# Clear existing keyframes\nplane.animation_data_clear()\n\n# Adding keyframes for the wiggle animation\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the new location based on a sine wave for side to side wiggle\n    new_x_location = wiggle_amplitude * math.sin(frame * wiggle_frequency)\n    plane.location.x = new_x_location\n    \n    # Insert keyframe for location\n    plane.keyframe_insert(data_path=\"location\", index=0)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = frame_end\n\n# Set interpolation to linear to maintain consistent motion\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Plane wiggle animation set up successfully!\")\n```\n\n### How to Use the Script\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text data-block, paste the above script into it.\n3. Click 'Run Script' to execute the script.\n\n### Explanation of the Script\n- **Create or select a plane:** The script checks if there's already a plane object named \"WigglingPlane\". If not, it creates one.\n- **Animation keyframes:** The script loops through the animation frames and calculates a new x-location for the plane using a sine wave to mimic a wiggling motion.\n- **Keyframe insertion:** It inserts keyframes for the x-location at each frame.\n-"
    },
    {
        "Text Input": "A sphere moves from left to right.",
        "Blender Script": "Below is a basic Blender Python script that animates a sphere moving from left to right along the X-axis. This script sets up the scene, adds a sphere, and inserts keyframes to animate the sphere's movement.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\n\nobjs = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH']\nfor obj in objs:\n    obj.select_set(True)\n\nbpy.ops.object.delete()\n\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-5, 0, 0))\nsphere = bpy.context.active_object\n\n# Set the initial frame to 1\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\n\n# Set the initial keyframe for the sphere\nsphere.location = (-5, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the final frame to move the sphere to the right\nsphere.location = (5, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=50)\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\n### How to Run This Script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into it.\n3. Press \"Run Script\" to execute the script in Blender.\n\n### Script Explanation:\n- **Clear Existing Objects**: The script first deletes all existing mesh objects in the scene to start fresh.\n- **Add Sphere**: A UV sphere is added at position (-5, 0, 0).\n- **Setup Animation Frames**: The start and end frames for the animation are set.\n- **Insert Keyframes**: A keyframe is inserted at frame 1 with the sphere\u2019s location at (-5, 0, 0) and another keyframe at frame 50 with the sphere\u2019s location at (5, 0, 0), creating an animation that moves the sphere from left to right.\n- **Play Animation**: The script commands Blender to start playing the animation.\n\nYou can adjust the start and end frames or the position values to change the speed and direction of the sphere's movement."
    },
    {
        "Text Input": "A cone tilts back and forth.",
        "Blender Script": "To create a script that makes a cone tilt back and forth using Blender's Python API, you'll need to animate the rotation of the cone object. Here's a step-by-step script to achieve this effect:\n\n```python\nimport bpy\nimport math\n\ndef create_cone():\n    # Create a new cone\n    bpy.ops.mesh.primitive_cone_add(\n        vertices=32, \n        radius1=1, \n        depth=2, \n        location=(0, 0, 1)\n    )\n    cone = bpy.context.active_object\n    return cone\n\ndef animate_cone(cone, frame_start, frame_end, tilt_angle):\n    bpy.context.scene.frame_start = frame_start\n    bpy.context.scene.frame_end = frame_end\n    \n    # Set the initial rotation\n    cone.rotation_euler = (0, 0, 0)\n    cone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n    \n    # Tilt to positive angle\n    mid_frame = (frame_start + frame_end) / 2\n    cone.rotation_euler = (math.radians(tilt_angle), 0, 0)\n    cone.keyframe_insert(data_path=\"rotation_euler\", frame=mid_frame)\n    \n    # Return to original position (back and forth)\n    cone.rotation_euler = (0, 0, 0)\n    cone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\ndef main():\n    # Clear existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Create new cone\n    cone = create_cone()\n\n    # Parameters for animation\n    frame_start = 1\n    frame_end = 60\n    tilt_angle = 30  # Tilt angle in degrees\n\n    animate_cone(cone, frame_start, frame_end, tilt_angle)\n\n    # Set the scene's current frame to the start frame\n    bpy.context.scene.frame_set(frame_start)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- **Object Creation:** The script first creates a cone at position `(0, 0, 1)`.\n- **Animation Setup:** The animation will take place between `frame_start` and `frame_end`. You can adjust these values as needed.\n- **Keyframe Insertion:** Keyframes are inserted at the start,"
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "To create a Blender Python script that makes a cube move in a circular path, you can use the following script. This script will create a cube and then set its animation to follow a circular path over a specified number of frames.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set parameters for the circular motion\nradius = 2.0\nnum_frames = 100\ncenter = (0, 0, 0)\n\n# Animate the cube\nfor frame in range(num_frames):\n    angle = 2 * math.pi * (frame / num_frames)  # Complete full circle over num_frames\n    x = center[0] + radius * math.cos(angle)\n    y = center[1] + radius * math.sin(angle)\n    z = center[2]  # Keep z constant for a flat circle\n\n    # Set frame position\n    cube.location = (x, y, z)\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set scene frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = num_frames\n\n# Optional: Change the timeline to display entire animation\nbpy.context.scene.frame_current = 0\n\nprint(\"Cube has been animated along a circular path!\")\n```\n\n### How to Use This Script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text data block and paste the script above.\n3. Run the script by clicking the \"Run Script\" button.\n4. Once executed, a cube will be added to the scene and animated to move in a circular path around the Z-axis, maintaining a constant Z-level position.\n\n### Explanation:\n- A new cube is created using `bpy.ops.mesh.primitive_cube_add()`.\n- The cube is set to move in a circular path by calculating positions `(x, y)` based on `cosine` and `sine` functions for each frame.\n- A keyframe is inserted for the cube's location at each step using `keyframe_insert`.\n- The number of frames (`num_frames`) determines how smooth the animation will be\u2014more frames"
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a plane moving diagonally upwards, we will first create a plane object, and then set up an animation where the plane translates diagonally through a series of keyframes.\n\nHere's a script to achieve that:\n\n```python\nimport bpy\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set the number of frames for the animation\nnum_frames = 100\n\n# Set initial position and rotation keyframe\nplane.location = (0, 0, 0)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=1)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Define the magnitude of the movement\nmove_distance = 10\n\n# Set the final position for diagonal movement\nplane.location = (move_distance, move_distance, move_distance)\nplane.rotation_euler = (0, 0, 0) # No rotation change\nplane.keyframe_insert(data_path=\"location\", frame=num_frames)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=num_frames)\n\n# Set interpolation type to linear for consistent speed\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the timeline end frame\nbpy.context.scene.frame_end = num_frames\n\nprint(\"Plane animation setup completed.\")\n```\n\nTo use this script:\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text file in the text editor and paste the script above.\n3. Execute the script by clicking on the \"Run Script\" button.\n\nThis will create and animate a plane object that moves diagonally upwards over the course of 100 frames. Adjust the `num_frames` and `move_distance` values as needed to customize the animation duration and distance. The interpolation is set to linear to ensure the plane moves at a consistent speed."
    },
    {
        "Text Input": "A cylinder wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a cylinder wiggle side to side, you need to animate the cylinder's position using keyframes. The following script sets up a simple animation where the cylinder moves left and right on the X-axis over a few frames.\n\nMake sure you have a Blender project open and run this script in Blender's text editor:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, align='WORLD', location=(0, 0, 1))\ncylinder = bpy.context.active_object\ncylinder.name = \"WigglingCylinder\"\n\n# Set initial location (saves the location to a var if needed for resetting)\nstart_location = cylinder.location\n\n# Set the total number of frames for the animation\ntotal_frames = 100\nbpy.context.scene.frame_end = total_frames\n\n# Define the wiggle animation using sine function for smooth oscillation\nwiggle_amplitude = 2  # The max distance from the origin on X-axis\nwiggle_frequency = 10  # How many cycles of the wiggle\n\n# Insert keyframes for the wiggle animation\nfor frame in range(0, total_frames + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Oscillate the position on the X-axis\n    x_offset = wiggle_amplitude * math.sin((frame / total_frames) * wiggle_frequency * math.pi * 2)\n    \n    # Update the cylinder's location\n    cylinder.location.x = start_location.x + x_offset\n    \n    # Insert keyframe for the location on the current frame\n    cylinder.keyframe_insert(data_path=\"location\", index=0)  # Only X-axis\n\n# Reset frame to start\nbpy.context.scene.frame_set(0)\n\nprint(\"Finished creating the wiggle animation for the cylinder.\")\n```\n\n### How the Script Works:\n- **Creating the Cylinder:** The script starts by clearing any existing objects and then adds a new cylinder to the scene.\n- **Animation Setup:**\n  - Sets the total number of frames to 100.\n  - Loops through each frame, calculates the new X position using a sine wave function for smooth oscillation, and updates"
    },
    {
        "Text Input": "A plane rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a plane rotating 360 degrees along the Z-axis.\n\n```python\nimport bpy\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set keyframes for rotation\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\nplane.rotation_euler = (0, 0, 3.14159)  # 180 degrees in radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\nplane.rotation_euler = (0, 0, 6.28318)  # 360 degrees in radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set up the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\nprint(\"360-degree rotation animation created.\")\n```\n\n### Instructions:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the Text Editor area.\n3. Copy the script above into the text block.\n4. Click on \"Run Script\" to execute the script.\n\nThis will create a plane and animate its rotation 360 degrees around the Z-axis over 100 frames. Adjust the frame numbers if you want the animation to play faster or slower."
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "To create an animation in Blender where a sphere orbits around another object (like a cube), you can use the combination of Python scripting and Blender\u2019s powerful animation tools. Below is a script that achieves this by creating a sphere and a cube, then animating the sphere to orbit around the cube.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cube at the origin, which will be the center of the orbit\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = 'CentralCube'\n\n# Create a sphere that will orbit around the cube\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(4, 0, 0))\norbiting_sphere = bpy.context.object\norbiting_sphere.name = 'OrbitingSphere'\n\n# Ensure animation data is cleared\norbiting_sphere.animation_data_clear()\n\n# Set the number of keyframes for the orbit animation\nnum_frames = 250\nbpy.context.scene.frame_end = num_frames\n\n# Set the initial location of the sphere\norbit_distance = 4\n\n# Animate the sphere\nfor frame in range(num_frames):\n    # Calculate angle of orbit based on frame number\n    angle = 2 * math.pi * frame / num_frames\n    # Calculate new location of the sphere\n    x = orbit_distance * math.cos(angle)\n    y = orbit_distance * math.sin(angle)\n\n    # Set the sphere's location for this frame\n    orbiting_sphere.location = (x, y, 0)\n    orbiting_sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the animation to loop seamlessly\nfcurves = orbiting_sphere.animation_data.action.fcurves\nfor fcurve in fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Sphere orbit animation created successfully.\")\n```\n\n### How to Run the Script in Blender:\n1. Open Blender and create a new project.\n2. Go to the Scripting workspace or open the Text Editor panel.\n3. Create a new text file and paste the script above into the editor.\n4. Run the script by clicking the \"Run Script\" button.\n\n### Explanation:\n"
    },
    {
        "Text Input": "A cone moves from left to right.",
        "Blender Script": "To create a simple animation of a cone moving from left to right in Blender using Python, we can use the Blender's scripting capabilities. Below is a script that you can run in the Blender's scripting environment to achieve this animation.\n\n```python\nimport bpy\n\n# Delete default objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Cube'].select_set(True)\nbpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(-5, 0, 0))\ncone = bpy.context.object\n\n# Set the number of frames for the animation. For example, 100 frames.\nanimation_length = 100\n\n# Set the start location to the left\nstart_location = (-5, 0, 0)\nend_location = (5, 0, 0)\n\n# Set keyframes\ncone.location = start_location\ncone.keyframe_insert(data_path=\"location\", frame=1)  # Insert keyframe at frame 1\n\ncone.location = end_location\ncone.keyframe_insert(data_path=\"location\", frame=animation_length)  # Insert keyframe at the last frame\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = animation_length\n\n# Adjust the timeline to show the whole animation\nbpy.context.scene.frame_set(1)\n\nprint(\"Animation script complete\")\n```\n\n### How to use the script:\n1. Open Blender.\n2. Switch to the Scripting workspace (usually available at the top, or you can split the view and change the editor type to \"Scripting\").\n3. Create a new text file in the Scripting editor.\n4. Paste the above Python script into the text editor.\n5. Click the \"Run Script\" button.\n\n### Explanation:\n- **Initial Setup**: The script starts by removing the default cube from the scene.\n- **Cone Creation**: It adds a cone primitive to the scene at a starting position of `(-5, 0, 0)`.\n- **Animation Setup**: We set a simple animation where the cone moves from `(-5, 0, 0)` to `(5, 0, 0)` over 100 frames. Keyframes are inserted at frame 1 (start) and frame 100 (end).\n- **Timeline Setup**: The script"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a simple animation of a plane wiggling side to side in Blender using Python, we can use the Blender Python API to create the plane, add a keyframe animation, and manipulate its movement. Below is a script that demonstrates how to achieve this. Ensure you run it in Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\ndef create_wiggling_plane():\n    # Delete all existing objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n    \n    # Create a plane\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.active_object\n    \n    # Set animation duration\n    animation_duration = 100  # Number of frames\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = animation_duration\n    \n    # Wiggle parameters\n    frequency = 10  # How fast it wiggles\n    amplitude = 0.5  # How far it wiggles\n    \n    # Animate the plane\n    for frame in range(0, animation_duration):\n        bpy.context.scene.frame_set(frame)\n        \n        # Calculate wiggle offset based on a sine wave\n        offset = amplitude * math.sin(frequency * frame * (math.pi / 180))\n        \n        # Set the new location of the plane\n        plane.location.x = offset\n        \n        # Insert keyframe for location\n        plane.keyframe_insert(data_path=\"location\", index=0)\n        \n    # Set interpolation type to linear for equal speed\n    for fcurve in plane.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'LINEAR'\n\n# Execute the function\ncreate_wiggling_plane()\n```\n\n### Explanation:\n- **Delete Existing Objects**: The script starts by clearing any existing objects in the scene to avoid clutter.\n- **Create Plane**: It then creates a new plane at the origin.\n- **Animation Settings**: The animation is set to run from frame 0 to 100.\n- **Wiggle Parameters**: The script uses a sine wave to calculate the offset for the plane's X-axis, providing a smooth back-and-forth motion.\n- **Keyframe Insertion**: For every frame, the X location is updated and a keyframe is inserted to animate the"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create an animation in Blender where a torus oscillates in a sine wave pattern, you will need to use Python scripting to set up the animation frames. Below is a script that creates a torus and applies an animation along the Z-axis using a sine wave function.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.25, location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Define animation parameters\nframe_start = 1\nframe_end = 250\namplitude = 2\nfrequency = 0.1\n\n# Set frame range for the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Function to apply the sine wave transformation\ndef apply_sine_wave(obj, frame, amplitude, frequency):\n    # Calculate the sine wave value\n    sine_value = amplitude * math.sin(frequency * frame)\n    # Apply the transformation to the object's location\n    obj.location.z = sine_value\n    # Insert keyframe for the Z location\n    obj.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Apply sine wave animation across specified frame range\nfor frame in range(frame_start, frame_end + 1):\n    apply_sine_wave(torus, frame, amplitude, frequency)\n\n# Set the scene to use EEVEE for faster playback in the viewport\nbpy.context.scene.render.engine = 'BLENDER_EEVEE'\n\nprint(\"Sine wave animation has been applied to the torus.\")\n```\n\n### Instructions:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new script and paste the code above into the text editor.\n3. Ensure the Python API is enabled by clicking on the `Run Script` button at the top of the text editor.\n4. Press `Space` and search for `View Animation` to preview the sine wave animation.\n5. You should see the torus oscillating up and down in a sine wave pattern along the Z-axis.\n\nFeel free to modify the `amplitude` and `frequency` variables to adjust the wave's height and speed respectively. The frame range"
    },
    {
        "Text Input": "A sphere wiggles side to side.",
        "Blender Script": "To create a sphere that wiggles side to side in Blender using Python, you can use the scripting features of Blender along with keyframing for animation. Below is a script you can run in Blender's scripting tab, which will create a new sphere and animate it to wiggle side to side:\n\n```python\nimport bpy\nimport math\n\n# Delete default cube\nif \"Cube\" in bpy.data.objects:\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.data.objects[\"Cube\"].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(\n    segments=32, \n    ring_count=16, \n    radius=1, \n    enter_editmode=False, \n    align='WORLD', \n    location=(0, 0, 0), \n    scale=(1, 1, 1)\n)\nsphere = bpy.context.object\nsphere.name = \"WigglingSphere\"\n\n# Set up initial transform properties\nsphere.location = (0, 0, 0)\nbpy.context.view_layer.objects.active = sphere\n\n# Add keyframes to make the sphere wiggle side to side\nframe_start = 1\nframe_end = 60\nwiggle_amplitude = 2.0  # Maximum side displacement\nfrequency = 0.1  # Controls the speed of the wiggling\n\n# Insert keyframes for the side-to-side motion\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the new X position using a sinusoidal function\n    x_position = wiggle_amplitude * math.sin(frequency * frame)\n    sphere.location.x = x_position\n    \n    # Insert keyframe for location\n    sphere.keyframe_insert(data_path=\"location\", index=0)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set interpolation type to make the motion smoother\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\nprint(\"Script execution completed. Sphere will wiggle from frame {} to {}.\".format(frame_start, frame_end))\n```\n\n### Instructions to Run the Script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2."
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a plane moving diagonally upwards, you can follow these steps. This script will add a plane object to the scene and animate it to move upwards and diagonally over a certain period.\n\n```python\nimport bpy\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set keyframe start and end frames\nstart_frame = 1\nend_frame = 100\n\n# Set initial location at the start frame\nplane.location = (0, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set final location at the end frame\nplane.location = (10, 10, 10)\nplane.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optionally, set the interpolation type for smoother animation (default is linear)\nfor fcurve in plane.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\n# Switch to Animation view to see the movement in context\nfor area in bpy.context.screen.areas:\n    if area.type == 'DOPESHEET_EDITOR':\n        area.ui_type = 'TIMELINE'\n\nprint(\"Plane has been animated to move diagonally upwards.\")\n```\n\n### How to Use This Script\n\n1. **Open Blender**: Start Blender and go to the scripting workspace.\n2. **Create a New Script**: Open a new text file and paste the script above.\n3. **Run the Script**: Click the \"Run Script\" button. This will create a new plane and animate it.\n4. **Preview Animation**: Switch to the timeline or playback the animation to see the plane move diagonally upwards.\n\n### Explanation\n\n- The script deletes all existing objects first to ensure a clean slate.\n- It then creates a plane at the origin.\n- Keyframes are set at frames 1 and 100 to move the plane from `(0, 0, 0)` to `(10, 10, 10)`, achieving a diagonal upward motion.\n- Interpolation is set to 'BEZIER' for a smoother transition between keyframes, though you can adjust this as needed.\n  \n"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a simple Blender Python script that makes a monkey head (Suzanne) rotate on the X-axis, follow the instructions below. This script will add the monkey mesh to the scene and apply a rotation animation on the X-axis.\n\n```python\nimport bpy\n\ndef create_monkey():\n    # Deselect all existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Add a monkey (Suzanne) to the scene\n    bpy.ops.mesh.primitive_monkey_add(size=2, align='WORLD', location=(0, 0, 0))\n    monkey = bpy.context.active_object\n    \n    # Set the animation frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 120  # 5 seconds at 24 fps\n    \n    # Insert rotation keyframes\n    monkey.rotation_mode = 'XYZ'\n    \n    # Start rotation\n    monkey.rotation_euler = (0, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n    \n    # End rotation (360 degrees or 2*PI radians)\n    monkey.rotation_euler = (2 * 3.14159, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n    \n    # Set the timeline to frame 1\n    bpy.context.scene.frame_set(1)\n\n# Run the function to create and animate the monkey\ncreate_monkey()\n```\n\nTo run this script in Blender:\n\n1. Open Blender and navigate to the Scripting workspace.\n2. Create a new script by clicking on `New` or open a text file.\n3. Copy and paste this script into the scripting editor.\n4. Click on `Run Script` or press `Alt+P` to execute the script.\n\nThis script will create a monkey mesh, and animates it to perform a full 360-degree rotation on the X-axis over 5 seconds, assuming a frame rate of 24 frames per second. The rotation is keyframed at the beginning and end of the animation sequence. Adjust the `frame_end` variable for longer or shorter animations."
    },
    {
        "Text Input": "A torus jumps up and lands.",
        "Blender Script": "Below is a Blender Python script that creates a torus and animates it to jump up and land back down. This script will create keyframes for the torus to move along the Z-axis to simulate a jump.\n\n```python\nimport bpy\nimport math\nimport mathutils\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set keyframe insertion function for location\ndef insert_keyframe(obj, frame, location):\n    obj.location = location\n    obj.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Starting frame for the animation\nstart_frame = 1\n\n# Define jump parameters\njump_height = 3\njump_duration = 20\nland_frame = start_frame + jump_duration\n\n# Set start position and keyframe\ninsert_keyframe(torus, start_frame, (0, 0, 0))\n\n# Mid jump position (at the peak of the jump) and keyframe\nmid_jump_frame = start_frame + jump_duration // 2\ninsert_keyframe(torus, mid_jump_frame, (0, 0, jump_height))\n\n# End position (landed) and keyframe\ninsert_keyframe(torus, land_frame, (0, 0, 0))\n\n# Set interpolation type to make the jump more realistic\nfor fc in torus.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\n# Set start and end frames of the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = land_frame\n\nprint(\"Torus jump animation created.\")\n```\n\nTo use this script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block in the text editor.\n3. Copy and paste the script into the text block.\n4. Run the script by clicking the \"Run Script\" button.\n\nThis will create a torus in the scene and animate it jumping up and then landing back down. You can play the animation in the timeline to see the effect. Adjust the `jump_height`, `jump_duration`, and other parameters as needed to tweak the animation."
    },
    {
        "Text Input": "A cone moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a cone moving in a spiral motion, you'll want to set up a script that generates the cone object, creates a path defined by spiral motion parameters, and animates the cone moving along this path. Here's a script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Define spiral parameters\ncoil_count = 3\nheight = 5.0\nradius = 2.0\nframes_per_rotation = 25\ntotal_frames = coil_count * frames_per_rotation\n\n# Create animation data for the cone\ncone.animation_data_clear()\n\n# Animate the cone in a spiral path\nfor frame in range(0, total_frames + 1):\n    # Calculate angle and the height position\n    angle = (frame / frames_per_rotation) * 2 * math.pi\n    z_pos = (frame / total_frames) * height\n    \n    # Calculate x and y position for the spiral\n    x_pos = radius * math.cos(angle)\n    y_pos = radius * math.sin(angle)\n    \n    # Set the location\n    cone.location = (x_pos, y_pos, z_pos)\n    \n    # Insert keyframe for the location\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the scene end frame\nbpy.context.scene.frame_end = total_frames\n```\n\n### Explanation\n\n1. **Clear Existing Objects**: The script starts by clearing existing objects to make sure the scene is empty.\n\n2. **Add a Cone**: A cone is added to the scene. You can modify parameters such as vertices, radius, and depth to fit your needs.\n\n3. **Spiral Parameters**: It defines the spiral parameters, including the number of coils, total height, radius of the spiral, and frames per coil rotation.\n\n4. **Animation Loop**: A loop calculates and sets the location of the cone for each frame, moving it along a spiral path by adjusting both the XY coordinate and the Z-axis position.\n\n5. **Set Keyframes**: For every frame"
    },
    {
        "Text Input": "A cone rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a cone rotate 360 degrees, you will need to use Blender's Python API to set up the scene, create a cone, and animate it. Below is a script that performs these tasks:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\n\n# Get the newly created cone object\ncone = bpy.context.active_object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 120  # 360-degree rotation over 120 frames\n\n# Set the rotation mode to Euler for easier manipulation\ncone.rotation_mode = 'XYZ'\n\n# Set the initial rotation keyframe at the start frame (0 degrees)\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the final rotation keyframe at the end frame (360 degrees)\ncone.rotation_euler = (0, 0, 3.14159 * 2)  # 2 * \u03c0 radians for 360 degrees\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation to linear for constant speed rotation\nfor fc in cone.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Set timeline to play through the animation range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Switch to the animation context to see the timeline\nfor area in bpy.context.screen.areas:\n    if area.type == 'TIMELINE':\n        bpy.context.window.area = area\n        bpy.context.window.workspace = bpy.data.workspaces['Animation']\n\nprint(\"Cone rotation animation set up complete.\")\n```\n\nThis script does the following:\n1. Clears the existing objects in the scene.\n2. Adds a new cone to the scene.\n3. Specifies the total number of frames for the animation from the start frame to the end frame.\n4. Sets the cone's rotation to 0 degrees at the start frame and 360 degrees at the end frame.\n5. Uses linear interpolation to ensure"
    },
    {
        "Text Input": "A monkey scales up and down.",
        "Blender Script": "To create a Blender Python script that scales a monkey mesh (Suzanne) up and down, we'll use Blender's scripting capabilities. Below is the script to achieve this animation:\n\n```python\nimport bpy\n\n# Function to set up a scale animation for an object\ndef animate_scaling(obj_name, start_scale, end_scale, start_frame, end_frame):\n    # Deselect all objects\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Select the object by name\n    obj = bpy.data.objects.get(obj_name)\n    if obj:\n        obj.select_set(True)\n        bpy.context.view_layer.objects.active = obj\n    else:\n        raise Exception(f\"No object with name '{obj_name}' found!\")\n\n    # Insert keyframe for the initial scale at the start_frame\n    obj.scale = (start_scale, start_scale, start_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n    # Insert keyframe for the target scale at the end_frame\n    obj.scale = (end_scale, end_scale, end_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n    # Insert keyframe for returning to initial scale\n    obj.scale = (start_scale, start_scale, start_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=end_frame + (end_frame - start_frame))\n\n# Add a monkey mesh if it's not already in the scene\nif \"Suzanne\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\n    suzanne = bpy.context.active_object\n    suzanne.name = \"Suzanne\"\nelse:\n    suzanne = bpy.data.objects[\"Suzanne\"]\n\n# Define animation parameters\nstart_scale = 1.0    # Start scale\nend_scale = 2.0      # End scale (the scale to animate to)\nstart_frame = 1      # Frame to start the animation\nend_frame = 50       # Frame to end scaling up\n\n# Call the function to animate scaling\nanimate_scaling(suzanne.name, start_scale, end_scale, start_frame, end_frame)\n\n# Set playback range to see the animation properly\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame * 2  # Allocating enough frames for scaling down\n\n# Set the current frame to the start frame\nbpy"
    },
    {
        "Text Input": "A cylinder tilts back and forth.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cylinder in Blender and animates it to tilt back and forth.\n\n```python\nimport bpy\nimport math\n\n# Delete existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 60\n\n# Set the tilting angle (radians)\nangle = math.radians(45)  # tilt 45 degrees\n\n# Add a keyframe for the starting position\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Add a keyframe for the tilting position (forward tilt)\ncylinder.rotation_euler = (angle, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames // 2)\n\n# Add a keyframe for the starting position (backward tilt)\ncylinder.rotation_euler = (-angle, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\n# Set the interpolation type to make the motion smoother\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = total_frames\n```\n\n### Instructions\n\n1. Open Blender.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text file in the text editor.\n4. Copy and paste the script above into the text editor.\n5. Run the script by clicking the \"Run Script\" button.\n\n### How It Works\n- **Cylinder Creation**: A new cylinder is created and positioned at the origin.\n- **Animation Keyframes**: The script sets keyframes for the cylinder's rotation to animate it tilting back and forth.\n- **Animation Interpolation**: The interpolation type is set to \"Sine\" for smoother transition between keyframes.\n- **Frames**: The animation ends at frame 60, making it a 2-second animation at 30 frames per second.\n\nYou can adjust"
    },
    {
        "Text Input": "A monkey spins while floating.",
        "Blender Script": "To create a Blender Python script for a spinning monkey that appears to be floating, we need to use Blender's Python API. The script will add a Suzanne (the Blender monkey model) to the scene, animate it to spin around its own axis, and create an illusion of floating by moving it slightly up and down.\n\nHere's an example script:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey (Suzanne) to the scene\nbpy.ops.mesh.primitive_monkey_add(size=1.0, enter_editmode=False, location=(0, 0, 1))\nmonkey = bpy.context.active_object\n\n# Set up animation\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Add spinning animation\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    # Spin effect by rotating the object around Z-axis\n    monkey.rotation_euler = (0, 0, frame * math.radians(5))  # 5 degrees per frame\n    # Floating effect by moving the monkey up and down\n    monkey.location.z = 1 + 0.1 * math.sin(frame * 0.1)\n    # Insert keyframes for location and rotation\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n    monkey.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the timeline to frame_start\nbpy.context.scene.frame_set(frame_start)\n\n# Reset the timeline playback\nbpy.context.scene.frame_current = frame_start\n\nprint(\"Animation of spinning and floating monkey is set up.\")\n```\n\n### How to Use the Script:\n\n1. **Open Blender**, and switch to the Scripting workspace.\n2. **Create a new script** by clicking on 'New' in the text editor.\n3. **Paste the script** above into the text editor.\n4. **Run the script** by clicking the 'Play' button or pressing `Alt+P`.\n\n### Key Features of the Script:\n\n- **Clear Scene**: The script starts by removing existing objects to ensure a clean environment.\n- **Add Suzanne**: It adds the default Suzanne monkey mesh to the scene.\n- **Animate Rotation and Location**"
    },
    {
        "Text Input": "A cylinder expands and shrinks.",
        "Blender Script": "To create a script in Blender that makes a cylinder expand and shrink, we will animate the scale of a cylinder object using a Python script. Below is a script you can run in Blender's scripting editor to achieve this effect:\n\n```python\nimport bpy\n\n# Clear existing objects and create a new cylinder\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define a function for expanding and shrinking\ndef animate_cylinder(cylinder, start_frame, end_frame):\n    # Keyframe the initial scale\n    cylinder.scale = (1, 1, 1)\n    cylinder.keyframe_insert(data_path=\"scale\", frame=start_frame)\n    \n    # Keyframe the expanded scale\n    expanded_scale = (2, 2, 2)\n    mid_frame = start_frame + (end_frame - start_frame) // 2\n    cylinder.scale = expanded_scale\n    cylinder.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n    \n    # Keyframe the shrunken scale back to original\n    cylinder.scale = (1, 1, 1)\n    cylinder.keyframe_insert(data_path=\"scale\", frame=end_frame)\n    \n    # Optional: Add smooth interpolation to make it look natural\n    for fcurve in cylinder.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'BEZIER'\n\n# Call the function to animate the cylinder\nanimate_cylinder(cylinder, start_frame, end_frame)\n\n# Set the animation player to loop\nbpy.context.scene.frame_current = start_frame\nbpy.context.scene.render.fps = 24\n\nprint(\"Animation setup complete. Play the timeline to see the cylinder expanding and shrinking.\")\n```\n\n### Instructions to Use the Script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the scripting panel and paste the provided script.\n3. Run the script by clicking the \"Run Script\" button.\n\nThis script will set up a simple animation where a cylinder gradually"
    },
    {
        "Text Input": "A plane zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a plane zoom in and out, we'll need to animate the scaling of a plane object. The script will create a new plane, add keyframes for the scale to create a zoom in and out effect, and set the animation to loop. Here's a simple script for this effect:\n\n```python\nimport bpy\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Define the keyframes for zoom-in and zoom-out\n# Frame 1: Normal size\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Frame 25: Zoomed in\nplane.scale = (2, 2, 2)\nplane.keyframe_insert(data_path=\"scale\", frame=25)\n\n# Frame 50: Back to normal size\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Frame 75: Zoomed out\nplane.scale = (0.5, 0.5, 0.5)\nplane.keyframe_insert(data_path=\"scale\", frame=75)\n\n# Frame 100: Back to normal\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=100)\n\n# Set the interpolation type to make it smooth\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Enable cycle modifier for looping effect\nfor fcu in plane.animation_data.action.fcurves:\n    mod = fcu.modifiers.new(type='CYCLES')\n    mod.mode_before = 'REPEAT'\n    mod.mode_after = 'REPEAT'\n\n# Play the animation (Press 'Spacebar' in the Blender UI to start playback)\n```\n\n### Instructions:\n1. Open Blender and switch to the Scripting workspace.\n2. Copy and paste the script into a new text block in the Text Editor.\n3."
    },
    {
        "Text Input": "A cylinder bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a cylinder bounce like a ball, you can animate the cylinder using keyframes. Here's a basic script that sets up a bouncing animation:\n\n```python\nimport bpy\nimport math\n\ndef create_bouncing_cylinder():\n    # Delete default objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Add a cylinder\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\n    cylinder = bpy.context.active_object\n\n    # Set up animation parameters\n    bounce_height = 5\n    ground_level = 1\n    num_bounces = 5\n    frames_per_bounce = 20\n\n    # Insert keyframes for bouncing animation\n    for i in range(num_bounces + 1):\n        # Calculate frame number\n        current_frame = i * frames_per_bounce\n\n        # Calculate position\n        if i % 2 == 0:  # Even keyframes at the ground\n            z_pos = ground_level\n        else:  # Odd keyframes at bounce height\n            z_pos = ground_level + bounce_height\n\n        # Set current frame and keyframe for the bounce\n        bpy.context.scene.frame_set(current_frame)\n        cylinder.location.z = z_pos\n        cylinder.keyframe_insert(data_path=\"location\", index=2)\n\n    # Smooth movement with interpolation\n    fcurves = cylinder.animation_data.action.fcurves\n    for fcurve in fcurves:\n        for kfp in fcurve.keyframe_points:\n            kfp.interpolation = 'BEZIER'\n\n# Execute the function\ncreate_bouncing_cylinder()\n```\n\nThis script will:\n1. Clear the default scene setup.\n2. Add a cylinder to the scene.\n3. Animate the cylinder to bounce up and down like a ball.\n4. Use keyframes for the animation, setting the cylinder to the ground or bounce height at specific frames.\n5. Adjust the keyframe interpolation to 'BEZIER' for smooth motion.\n\nTo use this script, simply paste it into Blender's text editor and run it. You can customize the `bounce_height`, `num_bounces`, and `frames_per_bounce` to modify the bouncing behavior as desired."
    },
    {
        "Text Input": "A sphere tilts back and forth.",
        "Blender Script": "Below is a Blender Python script that animates a sphere tilting back and forth on the Z-axis. This script will create a sphere, add keyframes for rotation, and animate it to tilt back and forth.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 1))  # Position the sphere on the Z-axis to sit on the ground plane.\nsphere = bpy.context.object\n\n# Set up keyframes for back and forth tilting\nframe_number = 0\nbpy.context.scene.frame_start = frame_number\nbpy.context.scene.frame_end = 100  # You can adjust this for a longer or shorter animation\n\n# Set initial rotation\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n\n# Rotate 15 degrees (in radians) forward\nframe_number += 25\nsphere.rotation_euler = (0, 0, math.radians(15))\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n\n# Come back to initial state\nframe_number += 25\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n\n# Rotate 15 degrees (in radians) backward\nframe_number += 25\nsphere.rotation_euler = (0, 0, math.radians(-15))\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n\n# Return back to initial state\nframe_number += 25\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n\n# Set interpolation to linear for steady back and forth\nfor fc in sphere.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Sphere tilt animation setup complete.\")\n```\n\nTo use this script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste this script into it.\n3. Click \"Run Script\".\n\nThis will create a sphere"
    },
    {
        "Text Input": "A torus rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that animates a torus rotating 360 degrees, you can use the following code. This script will add a torus to the scene and create an animation where the torus completes a full rotation around the Z-axis over 250 frames (approximately 10 seconds at 25 FPS).\n\n```python\nimport bpy\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the start and end frame for the animation\nstart_frame = 1\nend_frame = 250\n\n# Set the rotation keyframes for the torus\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ntorus.rotation_euler = (0, 0, 2 * 3.14159)  # Rotate 360 degrees (2*pi radians)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the animation frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the timeline to start at the first frame\nbpy.context.scene.frame_set(start_frame)\n\n# Set the playback to play at 25 frames per second (optional)\nbpy.context.scene.render.fps = 25\n\n# You can run the animation in the timeline by pressing the Play button in the UI\n# bpy.ops.screen.animation_play()\n\nprint(\"Torus rotation animation is set up.\")\n```\n\nTo use this script, you can simply open up Blender, go to the scripting tab, create a new script, paste this code into the script editor, and run it. The script will add a torus to your scene and set up the keyframes to animate a full 360-degree rotation. Please ensure your Blender version allows running such scripts and that you have the necessary permissions/settings to execute Python code within Blender."
    },
    {
        "Text Input": "A sphere jumps up and lands.",
        "Blender Script": "To create a simple animation in Blender where a sphere jumps up and lands, you can use the following Python script. This script sets up the basic scene, creates a sphere, and animates it to jump up and then land back down using keyframes.\n\n```python\nimport bpy\n\ndef create_sphere():\n    # Delete default cube\n    if \"Cube\" in bpy.data.objects:\n        bpy.data.objects['Cube'].select_set(True)\n        bpy.ops.object.delete()\n\n    # Add a sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 1))\n    sphere = bpy.context.active_object\n    sphere.name = \"JumpingSphere\"\n\n    return sphere\n\ndef set_keyframes(sphere):\n    # Set keyframes for jumping animation\n    # Start at frame 1 with the sphere on the ground\n    sphere.location = (0, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=1)\n    \n    # Frame 20: sphere at the peak of the jump\n    sphere.location = (0, 0, 5)\n    sphere.keyframe_insert(data_path=\"location\", frame=20)\n    \n    # Frame 40: sphere lands back on the ground\n    sphere.location = (0, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=40)\n\ndef configure_scene():\n    # Set the frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 50\n    bpy.context.scene.render.fps = 24\n\ndef run():\n    configure_scene()\n    sphere = create_sphere()\n    set_keyframes(sphere)\n\nif __name__ == \"__main__\":\n    run()\n```\n\n### Instructions to Use the Script:\n\n1. **Open Blender**: Launch Blender and ensure you are in a new project.\n2. **Open Scripting Workspace**: Navigate to the Scripting workspace within Blender.\n3. **Create a New Text Block**: In the text editor, create a new text block and paste the script above.\n4. **Run the Script**: Click on the `Run Script` button to execute the script.\n5. **Playback Animation**: Switch to the Animation workspace or simply press the spacebar to play the animation in the Timeline. You should see the sphere jump up and then land.\n\nThis script"
    },
    {
        "Text Input": "A plane rotates on the X-axis.",
        "Blender Script": "Certainly! Below is a Python script for Blender that creates a plane and animates it rotating around the X-axis.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, location=(0, 0, 0))\n\n# Get the current plane object\nplane = bpy.context.active_object\n\n# Set the rotation mode to 'XYZ Euler'\nplane.rotation_mode = 'XYZ'\n\n# Set keyframes for rotation around the X-axis\n# Set initial rotation\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\n# Set final rotation (after 250 frames, 2 * pi radians is one full revolution)\nimport math\nplane.rotation_euler = (2 * math.pi, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=250, index=0)\n\n# Set interpolation type to linear for a constant speed rotation\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Plane is set to rotate around the X-axis from frame 1 to 250.\")\n```\n\nThis script does the following:\n1. Clears existing objects in the scene.\n2. Adds a new plane.\n3. Sets keyframes to animate the plane's rotation around the X-axis from 0 to 360 degrees over 250 frames.\n4. Sets the interpolation to linear so that the rotation happens at a constant speed.\n\nYou can run this script in Blender by opening a scripting area, creating a new text block, pasting in the script, and clicking the 'Run Script' button. You can adjust the frames to increase or decrease the rotation speed as desired."
    },
    {
        "Text Input": "A cube scales up and down.",
        "Blender Script": "Certainly! Below is a Blender Python script that will animate a cube scaling up and down.\n\n```python\nimport bpy\nimport math\n\n# Ensure the default cube is present or add a new one\nif \"Cube\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\ncube = bpy.data.objects['Cube']\n\n# Set keyframe information\nstart_frame = 1\nend_frame = 60\nscale_factor_min = 1.0\nscale_factor_max = 2.0\n\n# Clear any existing keyframes\ncube.animation_data_clear()\n\n# Set the initial scale keyframe\ncube.scale = (scale_factor_min, scale_factor_min, scale_factor_min)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Set the scale keyframe for maximum size\ncube.scale = (scale_factor_max, scale_factor_max, scale_factor_max)\ncube.keyframe_insert(data_path=\"scale\", frame=(start_frame + end_frame) // 2)\n\n# Set back to initial scale to complete the cycle\ncube.scale = (scale_factor_min, scale_factor_min, scale_factor_min)\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation to 'LINEAR' for consistent speed\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n        \n# Loop the animation\ncube.animation_data.action.fcurves[0].modifiers.new(type='CYCLES')\ncube.animation_data.action.fcurves[1].modifiers.new(type='CYCLES')\ncube.animation_data.action.fcurves[2].modifiers.new(type='CYCLES')\n\n# Set timeline range to view the entire cycle\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Animation setup complete. The cube will scale up and down.\")\n```\n\nInstructions for running the script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into the text editor.\n3. Click on the \"Run Script\" button.\n\nThe cube will animate by scaling up and down over the course of 60 frames, and this animation will loop indefinitely due to the 'CYC"
    },
    {
        "Text Input": "A plane tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a plane tilt back and forth, we'll animate the rotation of the plane using Blender's `bpy` library. This involves creating a plane object, setting keyframes for the animation, and specifying the rotation at each keyframe to produce the desired effect. Here's how you can achieve this:\n\n```python\nimport bpy\nimport math\n\n# Helper function to clear all existing objects in the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Clear existing objects\nclear_scene()\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 100\nframe_step = 10\nangle_degrees = 30\n\n# Convert degrees to radians for Blender\nangle_radians = math.radians(angle_degrees)\n\n# Set keyframes for tilting back and forth\nfor frame in range(start_frame, end_frame + 1, frame_step * 2):\n    # Tilt forward\n    plane.rotation_euler = (angle_radians, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n    \n    # Tilt backward\n    plane.rotation_euler = (-angle_radians, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame + frame_step)\n\n# Set last frame of the animation\nbpy.context.scene.frame_end = end_frame\n\n# Ensure frame one is being displayed\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Plane tilt animation script executed successfully.\")\n```\n\n### Explanation:\n\n- **Clearing the Scene**: The script starts by clearing the current scene of all objects to ensure it starts with a clean slate.\n- **Adding a Plane**: A new plane is created and positioned at the origin.\n- **Defining Animation Parameters**:\n  - `start_frame` and `end_frame` define the animation length.\n  - `frame_step` controls how frequently keyframes are set.\n  - `angle_degrees` specifies the tilt angle; it's converted to radians (`angle_radians`) because Blender's rotation works in radians.\n- **Setting Keyframes**:\n  - The script sets keyframes for two poses at"
    },
    {
        "Text Input": "A plane moves from left to right.",
        "Blender Script": "To create a simple Blender Python script that animates a plane moving from left to right, you'll primarily be working with the Blender Python API (bpy). This script will create a plane, set its initial position, and animate its movement over a timeline. Here\u2019s an example script:\n\n```python\nimport bpy\n\n# Clear existing objects from the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(-5, 0, 0))\n\n# Reference to the newly created plane\nplane = bpy.context.active_object\nplane.name = \"Moving Plane\"\n\n# Set the initial keyframe at frame 1\nplane.location = (-5, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the final keyframe at frame 100\nplane.location = (5, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=100)\n\n# Set up the scene\nbpy.context.scene.frame_start = 1   # Start frame of the animation\nbpy.context.scene.frame_end = 100   # End frame of the animation\nbpy.context.scene.frame_set(1)      # Set the current frame to the start\n\n# Optional: Set the view to ensure the plane stays in view\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        for space in area.spaces:\n            if space.type == 'VIEW_3D':\n                space.shading.type = 'SOLID'\n                region = space.region_3d\n                region.view_perspective = 'ORTHO'\n                region.view_location = (0, 0, 0)\n                region.view_distance = 10\n```\n\nThis script does the following:\n1. **Clear the Scene:** Deletes any existing mesh objects in the scene to start with a clean workspace.\n2. **Create a Plane:** Adds a plane at the starting location of (-5, 0, 0).\n3. **Set Keyframes:** Inserts keyframes to animate the plane moving from left to right over 100 frames.\n   - The plane starts from position (-5, 0, 0) at frame 1.\n   - It moves to position"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, you'll need to animate the plane's location over time. Below is a script that uses Blender's bpy module to set up this animation. The script assumes you have Blender installed, and you're running this script within Blender's scripting environment.\n\nHere's a basic script to achieve a bouncing effect:\n\n```python\nimport bpy\nimport math\n\n# Make sure you're in the right context\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set animation keyframes for a bouncing effect\nframe_start = 1\nframe_end = 100\nbounce_height = 2\n\n# Function to calculate bounce height using a parabolic equation\ndef parabola(x, max_h, duration):\n    return -4 * max_h * (x/duration) * ((x/duration)-1)\n\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the position of the bounce\n    z_pos = parabola(frame - frame_start, bounce_height, frame_end - frame_start)\n    \n    # Set the location of the plane\n    plane.location = (0, 0, z_pos)\n    \n    # Insert keyframe for the location\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Set interpolation type to make it look smooth and natural\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Optional: Add a material to make it more visually distinct\nmaterial = bpy.data.materials.new(name=\"BouncyMaterial\")\nmaterial.diffuse_color = (0.5, 0.5, 1, 1)  # Light blue\n\nif len(plane.data.materials) == 0:\n    plane.data.materials.append(material)\nelse:\n    plane.data.materials[0] = material\n\nprint(\"Bouncing animation script completed.\")\n```\n\n### Instructions:\n1. **Open Blender** and go to the \"Scripting\" workspace.\n2. Create a new text file in the text editor and paste the"
    },
    {
        "Text Input": "A monkey wiggles side to side.",
        "Blender Script": "Certainly! To create a simple animation in Blender where a monkey wiggles side to side, you can use Blender's scripting capabilities. Here's a basic Python script that uses Blender's Python API to create this animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a monkey object\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Define the wiggle animation\ndef animate_monkey_wiggle(monkey, start_frame, end_frame, wiggle_magnitude, frequency):\n    frames = end_frame - start_frame + 1\n    for frame in range(frames):\n        bpy.context.scene.frame_set(start_frame + frame)\n        # Calculate the offset angle based on current frame\n        offset_angle = wiggle_magnitude * math.sin(frequency * frame)\n        # Apply the Z rotation\n        monkey.rotation_euler[2] = math.radians(offset_angle)\n        # Insert the keyframe for the rotation\n        monkey.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Set properties for the animation\nwiggle_magnitude = 20  # How far the monkey wobbles\nfrequency = 0.1        # How fast the monkey wobbles\n\n# Apply the animation to the monkey\nanimate_monkey_wiggle(monkey, bpy.context.scene.frame_start, bpy.context.scene.frame_end, wiggle_magnitude, frequency)\n\n# Set the scene's end frame to play the animation in a loop\nbpy.context.scene.frame_end = 60\n```\n\n### Instructions to use the script:\n\n1. Open Blender.\n2. Go to `Scripting` workspace by clicking on `Scripting` on the top bar.\n3. Click on \"New\" to create a new script.\n4. Copy and paste the above script into the text editor.\n5. Click the \"Run Script\" button to execute.\n\nThis script performs the following:\n\n- Creates a new Blender scene and clears any existing objects.\n- Adds a monkey mesh to the scene.\n- Sets the animation frames from 1 to 60.\n- Defines a function `animate_monkey_wiggle` to rotate the monkey mesh"
    },
    {
        "Text Input": "A monkey slides from top to bottom.",
        "Blender Script": "Below is a Blender Python script that animates a monkey mesh (Suzanne) sliding from the top of a slope to the bottom. This involves creating a slope and animating the monkey's movement along it.\n\n```python\nimport bpy\n\n# Delete default cube\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create Monkey (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 7))\nmonkey = bpy.context.active_object\nmonkey.name = \"Suzanne\"\n\n# Create a Slope\nbpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, 0))\nslope = bpy.context.active_object\nslope.name = \"Slope\"\n\n# Rotate the slope to create an incline\nslope.rotation_euler[0] = 0.5  # Rotate around the X axis\n\n# Adjust position of the monkey to start at the top of the slope\nmonkey.location = (0, 0, 7)\n\n# Setup animation frames\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert keyframe at the starting position\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Move monkey to the bottom of the slope\nmonkey.location = (-10, 0, 0)  # Moves along the X axis to slide down\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up scene for playback and rendering\nbpy.context.scene.camera.location = (0, -20, 10)\nbpy.context.scene.camera.rotation_euler = (1.1, 0, 0)\n\n# Play through the animation in the timeline\nbpy.context.scene.frame_set(start_frame)\n\n# Show the timeline editors\nbpy.ops.screen.screen_full_area(use_hide_panels=True)\n```\n\nThis script creates Suzanne (the monkey mesh), sets it on top of a sloped plane, and defines an animation where it slides down over 100 frames. Adjust the monkey's ending `location` and slope's `rotation_euler` to fine-tune the slope angle and sliding distance as desired. Remember to run this script inside Blender's scripting editor for it to take effect."
    },
    {
        "Text Input": "A cube spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a cube spin while floating, you'll need to generate a simple animation where a cube rotates and moves up and down. Here's a basic script that does just that:\n\n```python\nimport bpy\nimport math\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set end frame and animation duration (in frames)\nframe_end = 250\nbpy.context.scene.frame_end = frame_end\n\n# Animate the rotation\ncube.rotation_mode = 'XYZ'\nfor frame in range(1, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    rotation_angle = math.radians(frame * 3.6)  # 3.6 degrees per frame for full spin in 100 frames\n    cube.rotation_euler = (rotation_angle, rotation_angle, rotation_angle)\n    cube.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Animate the floating effect\nfor frame in range(1, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    z_position = math.sin(math.radians(frame * 3.6)) * 0.5  # Floating effect\n    cube.location.z = z_position\n    cube.keyframe_insert(data_path=\"location\", index=2)  # Z-axis\n\n# Reset to the first frame\nbpy.context.scene.frame_set(1)\n\nprint(\"Completed setting up the spinning and floating cube animation.\")\n```\n\n### Instructions for Using the Script:\n\n1. **Open Blender**: Start a new project to avoid overwriting any existing work.\n\n2. **Switch to Scripting Tab**:\n    - Click on the `Scripting` tab at the top of the Blender interface.\n\n3. **Create a New Script**:\n    - Click `New` to create a new text data block.\n\n4. **Copy the Script**: Paste the above script into the text editor within the Scripting tab.\n\n5. **Run the Script**: Click `Run Script` or press `Alt+P` in the text editor.\n\n6. **Play the Animation**: Switch to the `Timeline` and press the play button to view the animation.\n\nThe script sets up a cube"
    },
    {
        "Text Input": "A cube performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cube in Blender using Python, you can utilize the Blender API (bpy). We'll create a basic animation where a cube bounces up and down along the Z-axis. The script will keyframe the cube's location over time.\n\nBefore running the script, ensure you have Blender open and a new or existing project ready. You can execute the script in Blender's scripting editor.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\ndef clear_objects():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Create a cube\ndef create_cube():\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\n    cube = bpy.context.active_object\n    return cube\n\n# Animate the cube to bounce\ndef animate_bounce(cube, start_frame, bounce_height, bounce_count, frames_between_bounces):\n    scene = bpy.context.scene\n    scene.frame_start = start_frame\n    scene.frame_end = start_frame + bounce_count * frames_between_bounces\n\n    for i in range(bounce_count + 1):\n        frame = start_frame + i * frames_between_bounces\n        z_position = bounce_height if i % 2 == 0 else 1  # Start on the ground (z=1), bounce up before coming down\n\n        # Set keyframe for the cube's location\n        cube.location = (0, 0, z_position)\n        cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Parameters\nstart_frame = 1\nbounce_height = 3  # Height cube reaches on each bounce\nbounce_count = 10  # Total number of bounces\nframes_between_bounces = 15  # Determines how fast the cube bounces\n\n# Function call sequence\nclear_objects()  # Remove existing objects\ncube = create_cube()  # Create a cube\nanimate_bounce(cube, start_frame, bounce_height, bounce_count, frames_between_bounces)  # Add bouncing animation\n\nprint(\"Bouncing cube animation is complete.\")\n```\n\n### Explanation:\n\n1. **Clear Objects**: The script first deletes any existing mesh objects from the scene to ensure a fresh start.\n\n2. **Create Cube**: It creates a cube object at the origin with a slight elevation so it visibly impacts the ground.\n\n3. **Animate Bounce**"
    },
    {
        "Text Input": "A cone flips upside down.",
        "Blender Script": "To create a Blender Python script that flips a cone upside down, you first need to create the cone, then apply a transformation to rotate it by 180 degrees around the X or Y axis. Here's how you can achieve this:\n\n```python\nimport bpy\nimport math\n\n# Delete all objects to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\n\n# Get the reference to the newly created cone\ncone = bpy.context.active_object\n\n# Rotate the cone 180 degrees around the X-axis to flip it upside down\ncone.rotation_euler[0] = math.radians(180)\n\n# Update the scene to reflect changes\nbpy.context.view_layer.update()\n```\n\n### Explanation:\n\n1. **Importing Blender and Math Modules**: \n   - Import `bpy` for Blender operations and `math` for mathematical functions.\n\n2. **Cleaning the Scene**:\n   - Use `bpy.ops.object.select_all(action='SELECT')` to select all objects and delete them with `bpy.ops.object.delete(use_global=False)` to start from a clean slate.\n\n3. **Adding a Cone**:\n   - `bpy.ops.mesh.primitive_cone_add` creates a cone. You can customize it with parameters like `vertices`, `radius1`, `radius2`, and `depth`. \n\n4. **Retrieve the Cone Object**:\n   - `bpy.context.active_object` returns the most recently created object, which should be the cone.\n\n5. **Rotating the Cone**:\n   - Set `cone.rotation_euler[0]` to `math.radians(180)` to flip it upside down on the X-axis. You could alternatively rotate around the Y-axis by adjusting `cone.rotation_euler[1]`.\n\n6. **Updating the Scene**:\n   - `bpy.context.view_layer.update()` is used to make sure Blender reflects all the transformations immediately.\n\nYou can run this script in Blender's scripting editor. Make sure your Blender environment is configured to use Python scripting."
    },
    {
        "Text Input": "A torus zooms in and out.",
        "Blender Script": "To create a Blender Python script where a torus zooms in and out, you can use the following code. This script adds a torus to the scene and animates its scale property to create a zoom in and out effect.\n\n```python\nimport bpy\n\ndef create_animated_torus():\n    # Clear existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Add a torus\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n    torus = bpy.context.active_object\n\n    # Set keyframes for the scale animation\n    frame_start = 1\n    frame_mid = 30\n    frame_end = 60\n    \n    # Initial scale (zoomed out)\n    torus.scale = (1.0, 1.0, 1.0)\n    \n    # Set keyframe for starting scale\n    torus.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n    # Zoom in scale\n    torus.scale = (2.0, 2.0, 2.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=frame_mid)\n\n    # Zoom out scale back to initial\n    torus.scale = (1.0, 1.0, 1.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n    # Set the interpolation type to make the animation smoother\n    for fcurve in torus.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'SINE'\n\n# Run the function\ncreate_animated_torus()\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Set the current frame to the start\nbpy.context.scene.frame_set(1)\n```\n\nThis script performs the following actions:\n\n1. Clears the existing mesh objects in the scene to start fresh.\n2. Adds a torus object to the scene.\n3. Sets up keyframes for the scale of the torus at frames 1, 30, and 60 to animate the zoom in and out effect.\n4. Uses sine interpolation for smooth animation transitions.\n5. Configures the animation frame range and sets"
    },
    {
        "Text Input": "A monkey moves in a circular path.",
        "Blender Script": "To create a Blender Python script that makes a monkey move in a circular path, we'll use the bpy library to control the Blender environment. Here's a script that adds a monkey (Suzanne) mesh to the scene and animates it on a circular path:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.object\nmonkey.name = \"Suzanne\"\n\n# Set number of frames for the full animation\ntotal_frames = 250\n\n# Set the radius of the circular path\nradius = 5\n\n# Function to get circular path coordinates\ndef get_circular_position(frame, total_frames, radius):\n    angle = (frame / total_frames) * 2 * math.pi\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    return (x, y)\n\n# Create animation for the monkey to move in a circular path\nfor frame in range(total_frames):\n    # Determine the position at this frame\n    x, y = get_circular_position(frame, total_frames, radius)\n    \n    # Insert location keyframe\n    monkey.location = (x, y, monkey.location.z)\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set end frame for the animation\nbpy.context.scene.frame_end = total_frames\n\n# Save the blend file (optional)\nbpy.ops.wm.save_as_mainfile(filepath=\"circular_motion_monkey.blend\")\n```\n\n### How it works:\n- **Clear existing mesh objects**: This part of the script selects and deletes all existing mesh objects in the scene.\n- **Add a Monkey**: A Suzanne mesh is created at the origin.\n- **Animation Parameters**: The script defines the total number of frames for the animation and the radius of the circular path.\n- **Circular Path Calculation**: We use trigonometric functions (`cos` and `sin`) to calculate the monkey's position at every frame, ensuring it follows a circular path.\n- **Keyframe Insertion**: For each frame, we set the calculated position of the monkey and insert a location keyframe to create the animation.\n- **"
    },
    {
        "Text Input": "A cylinder moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a cylinder moving diagonally upwards, we will use Blender's Python API to perform the following steps:\n\n1. Create a cylinder object.\n2. Set up an animation where the cylinder moves diagonally upwards over a certain number of frames.\n\nHere's a basic script to achieve this:\n\n```python\nimport bpy\nfrom mathutils import Vector\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object  # Reference to the cylinder object\n\n# Define the number of frames for the animation\nframe_start = 1\nframe_end = 100\n\n# Set the starting position keyframe\nstarting_position = Vector((0, 0, 0))\ncylinder.location = starting_position\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Define the ending position - moving diagonally upwards\nending_position = Vector((10, 10, 10))\ncylinder.location = ending_position\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set some scene properties\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\n# Optional: Set animation interpolation to linear for a consistent speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n```\n\n### Explanation:\n\n- **Delete existing mesh objects**: The script starts by clearing any existing mesh objects to ensure a clean workspace.\n- **Create a cylinder**: It adds a new cylinder to the scene at the origin (0, 0, 0).\n- **Keyframes**: We set keyframes for the cylinder's location at the start and end frames of the animation sequence. This makes the cylinder move from (0, 0, 0) to (10, 10, 10) over 100 frames.\n- **Animation Settings**: The start and end frames for the animation are set. The animation will be played in the Blender UI, and the interpolation is set to 'LINEAR"
    },
    {
        "Text Input": "A cylinder rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a cylinder rotate on the X-axis, you need to use Blender's scripting capabilities. Below is a simple script that will add a cylinder to the scene and animate it rotating around the X-axis.\n\nMake sure you have Blender open, and you can run this script in Blender's scripting editor.\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a cylinder to the scene\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Set up the initial rotation frame at frame 1\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)  # Rotate around X-axis\n\n# Set up the final rotation frame at frame 100\ncylinder.rotation_euler = (3.14 * 2, 0, 0)  # Complete a full rotation (360 degrees / 2 * pi radians)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=100, index=0)  # Rotate around X-axis\n\n# Set interpolation to linear for consistent rotation speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the current frame to 1 to start the animation from the beginning\nbpy.context.scene.frame_set(1)\n\nprint(\"A cylinder that rotates around the X-axis has been created and animated.\")\n```\n\n### Explanation:\n1. **Clear Existing Objects**: The script starts by deleting any existing objects in the scene.\n2. **Add a Cylinder**: A cylinder is added at the origin with a specified radius and depth.\n3. **Define Animation Frames**: The animation frames are set from 1 to 100.\n4. **Initial Keyframe**: At frame 1, the cylinder's X-axis rotation is initialized to 0 radians.\n5. **Final Keyframe**: At frame 100, the cylinder completes a"
    },
    {
        "Text Input": "A torus jumps up and lands.",
        "Blender Script": "To create a Blender animation where a torus jumps up and lands, you can use the following Python script. This script will create a torus, add keyframes to animate its jump, and set up the scene:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set keyframes for animation\nframe_start = 1\nframe_peak = 20\nframe_land = 40\n\n# Initial position (ground level)\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Position at the peak of the jump\ntorus.location = (0, 0, 5)  # 5 units high\ntorus.keyframe_insert(data_path=\"location\", frame=frame_peak)\n\n# Final position (back to ground level)\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_land)\n\n# Set the final frame of the animation\nbpy.context.scene.frame_end = frame_land\n\n# Adjust animation curves for a bounce effect\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'BEZIER'\n\n# Set up the scene\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_land\nbpy.context.scene.render.fps = 24\n\n# To view the animation, you will need to play it in the timeline in Blender.\n```\n\nTo use this script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block and paste the script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\nThe script sets up a simple animation where the torus jumps up 5 units and lands back on its initial position, creating a basic 'jump' effect using keyframes. Adjust the `torus.location` values to change the height of the jump or modify the frame numbers to change the timing."
    },
    {
        "Text Input": "A cylinder rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a cylinder 360 degrees, you'll first need to ensure that you have a cylinder in your Blender scene. Here's a step-by-step script to achieve this:\n\n```python\nimport bpy\n\n# Function to clear existing objects in the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Clear any existing objects to start fresh\nclear_scene()\n\n# Add a cylinder to the scene\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n\n# Define the rotation keyframes\n# Rotate around the Z axis over 120 frames\ncylinder.rotation_euler = (0, 0, 0)  # Initial rotation\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\ncylinder.rotation_euler = (0, 0, 2 * 3.14159)  # End rotation (360 degrees)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set the animation playback mode to play once for testing\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_set(1)\n```\n\n### Explanation:\n\n- **Clear Scene:** The function `clear_scene()` is used at the beginning to clear any existing objects from the scene to prevent interference with new objects.\n- **Add Cylinder:** The script adds a cylinder to the scene with the `bpy.ops.mesh.primitive_cylinder_add` function.\n- **Frame Setup:** The script sets the animation to span from frame 1 to frame 120, providing a 5-second animation at 24 fps.\n- **Keyframes Setup:** The initial rotation is set to zero on all axes, and a keyframe is placed at frame 1. The final rotation (360 degrees, which is equivalent to 2\u03c0 radians) is set, and a keyframe is placed at frame 120.\n- **Playback:** The `frame_set(1)` sets the current frame back to the beginning for easy playback testing.\n\nYou can run this script inside Blender's scripting window. To see the animation, you should press 'Play'"
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "To create a Blender Python script where a torus orbits around another object, you can use the following code. This script will create a torus and a cube, then animate the torus moving in an orbit around the cube.\n\n```python\nimport bpy\nimport math\n\ndef create_torus():\n    bpy.ops.mesh.primitive_torus_add(\n        align='WORLD', \n        location=(3, 0, 0), \n        rotation=(0, 0, 0), \n        major_radius=1, \n        minor_radius=0.25, \n        major_segments=48, \n        minor_segments=12)\n    torus = bpy.context.active_object\n    torus.name = \"Torus\"\n    return torus\n\ndef create_cube():\n    bpy.ops.mesh.primitive_cube_add(\n        size=1, \n        align='WORLD', \n        location=(0, 0, 0))\n    cube = bpy.context.active_object\n    cube.name = \"Central Cube\"\n    return cube\n\ndef orbit_animation(torus, num_frames):\n    for frame in range(num_frames):\n        bpy.context.scene.frame_set(frame)\n        \n        # Calculate the position of the torus in a circular path\n        angle = (frame / num_frames) * 2 * math.pi\n        x = 3 * math.cos(angle)\n        y = 3 * math.sin(angle)\n\n        # Set the new position of the torus\n        torus.location = (x, y, 0)\n        \n        # Insert a keyframe for the location\n        torus.keyframe_insert(data_path=\"location\", index=-1)\n\ndef main():\n    bpy.ops.object.select_all(action='DESELECT')\n\n    # Create the cube and torus\n    create_cube()\n    torus = create_torus()\n\n    # Parameters for the orbit animation\n    num_frames = 100  # Total number of frames in the animation\n\n    # Animate the torus to orbit around the cube\n    orbit_animation(torus, num_frames)\n\n    # Set the scene's frame range\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = num_frames\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n1. **Creating Objects**: The script creates a torus and a cube. The torus starts at a position away from the cube.\n2. **Animation**: A simple loop is used"
    },
    {
        "Text Input": "A cone spins while floating.",
        "Blender Script": "Below is a Blender Python script that creates a cone object in a scene and makes it spin while appearing to float slightly above the ground. This script assumes you are running it inside Blender's scripting editor.\n\n```python\nimport bpy\n\ndef create_spinning_cone():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a cone\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 1))\n\n    # Get the reference to the newly created cone\n    cone = bpy.context.object\n    cone.name = \"SpinningCone\"\n\n    # Set cone location to float above the ground\n    cone.location.z = 1.5\n\n    # Add an animation to spin the cone\n    # Insert the initial keyframe for rotation at frame 1\n    cone.rotation_euler = (0, 0, 0)\n    cone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n    # Insert the final keyframe for a full spin at frame 250\n    cone.rotation_euler = (0, 0, 6.28319)  # 2 * pi radians for a full spin\n    cone.keyframe_insert(data_path=\"rotation_euler\", frame=250)\n\n    # Set interpolation type to linear for constant spinning speed\n    for fcurve in cone.animation_data.action.fcurves:\n        for kp in fcurve.keyframe_points:\n            kp.interpolation = 'LINEAR'\n\n    # Set the end frame of the animation\n    bpy.context.scene.frame_end = 250\n\n    # Set the timeline to start from the first frame\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_set(1)\n\n# Call the function to create and animate the cone\ncreate_spinning_cone()\n```\n\n### Instructions\n1. Open Blender.\n2. Go to the \"Scripting\" tab.\n3. Create a new text block.\n4. Copy and paste the above script into the text editor.\n5. Run the script by clicking on the \"Run Script\" button.\n\nThis will create a cone object that spins about the Z-axis and appears to float above the ground. The animation will loop every 250 frames, and the interpolation is set"
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "To create an animation in Blender where a cone zooms in and out, you can use the following Python script. This script will set up the scene, add a cone, and animate its scale to achieve the zooming effect.\n\n```python\nimport bpy\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\ncone.name = 'ZoomingCone'\n\n# Set animation parameters\nframe_start = 1\nframe_end = 80\n\n# Define scale keyframes for zooming effect\nzoom_in_frame = frame_start\nnormal_frame = frame_start + (frame_end - frame_start) // 2\nzoom_out_frame = frame_end\n\n# Set the initial scale\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path='scale', frame=zoom_in_frame)\n\n# Set the zoomed in scale\ncone.scale = (2, 2, 2)\ncone.keyframe_insert(data_path='scale', frame=normal_frame)\n\n# Return to initial scale\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path='scale', frame=zoom_out_frame)\n\n# Adjust interpolation type to 'Linear' to avoid easing in/out\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the scene to the start of the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_set(frame_start)\n\nprint(\"Animation setup complete.\")\n```\n\n### Steps to Run the Script:\n\n1. Open Blender and switch to the 'Scripting' workspace.\n2. Create a new text block, paste the script into it, and run it.\n\n### Explanation:\n\n- **Preparation:** The script clears any pre-existing meshes in the scene to start fresh.\n- **Cone Creation:** A cone is added at the origin with default parameters.\n- **Animation Setup:** The script specifies frames where the cone's scale is keyframed to create a zooming in and out effect:\n  -"
    },
    {
        "Text Input": "A cylinder orbits around another object.",
        "Blender Script": "To create a Blender script where a cylinder orbits around another object, such as a sphere, you'll need to use Python scripting within Blender's environment. The script will create a scene with a sphere and a cylinder, and then animate the cylinder to orbit around the sphere.\n\nHere's a basic script to achieve this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects.\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = \"Central Sphere\"\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(3, 0, 0))\norbiting_object = bpy.context.object\norbiting_object.name = \"Orbiting Cylinder\"\n\n# Add an empty at the center of the sphere for orbit rotation\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\nempty = bpy.context.object\nempty.name = \"Orbit Center\"\n\n# Parent the cylinder to the empty so it orbits around the sphere\norbiting_object.parent = empty\n\n# Set up animation\nscene = bpy.context.scene\nframe_start = 1\nframe_end = 250\nscene.frame_start = frame_start\nscene.frame_end = frame_end\n\nempty.rotation_euler = (0, 0, 0)\nempty.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Set rotation to 360 degrees (2 * pi radians) over the animation period\nempty.rotation_euler = (0, 0, 2 * math.pi)\nempty.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation type to linear to ensure constant speed\nfor fcurve in empty.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Play the animation\nbpy.context.view_layer.objects.active = empty\nbpy.ops.screen.animation_play()\n\n```\n\n### Explanation:\n- **Clear Scene:** The script starts by clearing the existing mesh objects to ensure a clean slate.\n- **Create Objects:** It creates a central sphere to represent the object being orb"
    },
    {
        "Text Input": "A cylinder jumps up and lands.",
        "Blender Script": "To create a simple animation in Blender where a cylinder jumps up and lands, you can use the following Blender Python script. This script sets up the scene by creating a cylinder and keyframes its movement to simulate a jump.\n\n```python\nimport bpy\n\ndef create_cylinder():\n    # Delete default cube if it exists\n    if 'Cube' in bpy.data.objects:\n        bpy.data.objects['Cube'].select_set(True)\n        bpy.ops.object.delete()\n    \n    # Add a cylinder\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\n    cylinder = bpy.context.active_object\n    \n    # Give the cylinder a name (optional)\n    cylinder.name = \"JumpingCylinder\"\n\n    return cylinder\n\ndef jump_animation(obj):\n    # Set the total frames of the animation\n    bpy.context.scene.frame_end = 50\n\n    # Insert keyframes to animate jump\n    # Frame 1: Starting position\n    obj.location.z = 1  # Resting on the ground\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Frame 15: Jump peak\n    obj.location.z = 3  # Peak of the jump\n    obj.keyframe_insert(data_path=\"location\", frame=15)\n\n    # Frame 30: Landing position\n    obj.location.z = 1  # Back on the ground\n    obj.keyframe_insert(data_path=\"location\", frame=30)\n\n    # Insert additional keyframes for bounce effect (optional)\n    # Frame 35: Slight bounce up\n    obj.location.z = 1.5\n    obj.keyframe_insert(data_path=\"location\", frame=35)\n\n    # Frame 40: Settle back on the ground\n    obj.location.z = 1\n    obj.keyframe_insert(data_path=\"location\", frame=40)\n\ndef main():\n    # Create cylinder\n    cylinder = create_cylinder()\n    \n    # Animate cylinder's jump\n    jump_animation(cylinder)\n    \n    # Play the animation\n    bpy.ops.screen.animation_play()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo use this script:\n1. Open Blender and create a new General project.\n2. Open a new Script editor window.\n3. Copy and paste the script above into the Script editor.\n4. Click 'Run Script' to execute it.\n\nThis script will delete the default cube, add a cylinder,"
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a plane scale up and down, you can use the following code. This script will create a plane, animate it to scale up and down over a set period, and loop the animation. Here's how you can achieve that:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene for a clean start\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set keyframes for the scaling animation\nframe_start = 1\nframe_mid = 20\nframe_end = 40\n\n# Initial scale size\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n# Mid scale size (bigger)\nplane.scale = (2, 2, 2)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_mid)\n\n# Final scale size (back to original)\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set the interpolation to 'LINEAR' for consistent scaling\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Optionally, set the scene's frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_current = frame_start\n\n# Set the playback for looping\nbpy.context.scene.tool_settings.use_keyframe_insert_auto = True\nbpy.context.scene.sync_mode = 'AUDIO_SYNC'\nbpy.context.scene.frame_preview_start = frame_start\nbpy.context.scene.frame_preview_end = frame_end\n\nprint(\"Plane scaling animation created successfully.\")\n```\n\n### Instructions to Use the Script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block and paste the script into it.\n3. Click on the \"Run Script\" button in the text editor header to execute the script.\n\n### Explanation:\n\n- **Clearing the Scene**: The script starts by deleting any existing objects to ensure we're working in a fresh environment.\n- **Creating a Plane**: It adds a new plane to the scene"
    },
    {
        "Text Input": "A torus rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that creates a torus and animates it to rotate 360 degrees around the Z-axis.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n\n# Get the current torus object\ntorus = bpy.context.active_object\n\n# Set a keyframe on frame 1 for initial rotation\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Set a keyframe on frame 100 for the 360-degree rotation\ntorus.rotation_euler = (0, 0, 2 * 3.14159265)  # 360 degrees in radians\ntorus.keyframe_insert(data_path='rotation_euler', frame=100)\n\n# Set the frame range in the timeline\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Set up the renderer settings\nbpy.context.scene.render.fps = 24  # Set frames per second\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.filepath = \"//rotating_torus.mp4\"\n\n# Optionally animate the render\n# bpy.ops.render.render(animation=True)\n\nprint(\"The torus has been animated to rotate 360 degrees.\")\n```\n\n### Explanation:\n- **Clear Existing Objects**: We start by clearing any existing objects in the scene.\n- **Add a Torus**: We then add a new torus object to the scene.\n- **Animate Rotation**: We set keyframes at frame 1 (starting at 0 degrees) and frame 100 (rotated 360 degrees). We use radians for rotation in Blender, where 2\u03c0 radians equals 360 degrees.\n- **Adjust Timeline**: We adjust the timeline to a start frame of 1 and an end frame of 100.\n- **Render Settings**: The script also sets up basic render settings, aiming to output a video at 24 frames per second. To render the animation, uncomment the line with `bpy.ops.render.render(animation=True)`.\n\nRemember that this script needs to be run inside Blender's scripting environment"
    },
    {
        "Text Input": "A monkey moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that moves a monkey (Suzanne) diagonally upwards, you can use Blender's Python API to manipulate the 3D object's position in the scene. Here\u2019s a step-by-step script that will achieve this:\n\n```python\nimport bpy\n\n# Create a new monkey object\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))  # Initially add the monkey at origin\nmonkey = bpy.context.active_object  # Get the new monkey object\n\n# Set the number of frames for the animation\nframes = 50\n\n# Define the diagonal movement (in this case, equal movement in X, Y, Z directions)\nmovement_increment = 0.1\n\n# Set an initial location keyframe\nmonkey.location = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"location\", frame=1)\n\n# Animation: Move the monkey diagonally upwards\nfor frame in range(1, frames + 1):\n    # Calculate the new location\n    new_location = (movement_increment * frame, movement_increment * frame, movement_increment * frame)\n    \n    # Set the object's location to the new location\n    monkey.location = new_location\n    \n    # Insert a keyframe for the new location\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Animation complete: The monkey has moved diagonally upwards.\")\n```\n\n### Instructions to Use the Script:\n\n1. Open Blender and navigate to the Scripting workspace.\n2. Create a new text block by clicking on \"New\" in the text editor.\n3. Copy and paste the script above into the text editor.\n4. Press the \"Run Script\" button.\n\n### Explanation:\n\n- This script adds a new monkey object at the origin of the scene using `bpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))`.\n- It then animates the monkey to move diagonally upwards by increasing its X, Y, and Z coordinates simultaneously.\n- For animation, the script sets location keyframes for each frame from 1 to `frames` (50 in this case), interpolating the monkey\u2019s position to create a smooth diagonal upward movement.\n- Finally, each new position is recorded as a keyframe in the timeline.\n\nThis script will create a simple animation where Suzanne (the monkey) moves diagonally upwards in a straight line. Adjust the `movement_increment` and `"
    },
    {
        "Text Input": "A cylinder jumps up and lands.",
        "Blender Script": "Certainly! To create a simple animation of a cylinder jumping up and landing in Blender using a Python script, you'll need to use Blender's `bpy` module to define the keyframes and adjust the cylinder's location over time. Here's a script to achieve that effect:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set the animation duration (total frames)\ntotal_frames = 60\njump_frame = 20  # Frame when the cylinder is at the top of its jump\n\n# Set keyframes for the starting position (frame 1)\nbpy.context.scene.frame_set(1)\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set keyframes for the top of the jump (frame 20)\nbpy.context.scene.frame_set(jump_frame)\ncylinder.location = (0, 0, 5)  # Jump up 4 units\ncylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set keyframes for the landing position (frame 40)\nbpy.context.scene.frame_set(40)\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = total_frames\n\n# Make the jump smooth using interpolation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Optional: Set a nice view for animation playback\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        for space in area.spaces:\n            if space.type == 'VIEW_3D':\n                space.shading.type = 'SOLID'\n                area.spaces[0].region_3d.view_perspective = 'CAMERA'\n\nprint(\"Finished setting up the jumping cylinder animation.\")\n```\n\n### How to Use the Script\n\n1. Open Blender and go to the Scripting workspace.\n2"
    },
    {
        "Text Input": "A cone moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a cone moving diagonally upwards, we can utilize Blender's Python API to set up the scene, create a cone object, and animate its location.\n\nBelow is an example script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(\n    vertices=32, \n    radius1=1, \n    radius2=0, \n    depth=2, \n    location=(0, 0, 0)\n)\n\n# Get the reference to the newly created cone object\ncone = bpy.context.object\ncone.name = \"MovingCone\"\n\n# Set animation properties\nstart_frame = 1\nend_frame = 50\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert location keyframes for diagonal movement\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Final location for the diagonal movement\ncone.location = (5, 5, 10)\ncone.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to linear for consistent motion\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the output rendering settings if needed\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"//render\"\n\n# Optional: Uncomment and modify to render the animation to files\n# bpy.ops.render.render(animation=True)\n\nprint(\"Cone animation setup complete!\")\n```\n\nInstructions to use this script:\n\n1. Open Blender and go to the Scripting tab.\n2. Copy and paste the above script into a new text block in the text editor.\n3. Press the \"Run Script\" button.\n\nThis script creates a cone at the origin and animates it moving diagonally over 50 frames (from frame 1 to frame 50) towards a point 5 units over in the X and Y directions and 10 units up in the Z direction. The motion is set to be linear, ensuring a consistent speed across the frames. Adjust the values to your requirements for different paths or durations"
    },
    {
        "Text Input": "A cylinder moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script where a cylinder moves diagonally upwards, you'll need to set up a scene in Blender and animate the cylinder using keyframes. The script below demonstrates how to achieve this:\n\n```python\nimport bpy\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = \"Diagonal_Cylinder\"\n\n# Set initial keyframe at the starting location (0, 0, 0)\ncylinder.location = (0, 0, 0)\ncylinder.keyframe_insert(data_path='location', frame=1)\n\n# Set final keyframe for the diagonal movement upwards (e.g., (5, 5, 5)) at frame 50\ncylinder.location = (5, 5, 5)\ncylinder.keyframe_insert(data_path='location', frame=50)\n\n# To make the animation run smoothly, set interpolation to linear\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete for diagonal cylinder movement.\")\n```\n\n### Explanation:\n\n1. **Create a cylinder**: This script starts by adding a new cylinder to the scene at the origin (0, 0, 0).\n\n2. **Insert Initial Keyframe**: The initial location of the cylinder is set, and a keyframe is created at frame 1.\n\n3. **Insert Final Keyframe**: The cylinder's final location is set to (5, 5, 5), making it move diagonally upwards. A keyframe for this location is inserted at frame 50.\n\n4. **Linear Interpolation**: The script ensures that the movement between the keyframes is linear (as opposed to the default bezier), which creates a constant speed for the diagonal movement.\n\n5. **Run the Script**: Copy and paste this script into Blender\u2019s scripting tab, then run it. The cylinder will animate moving diagonally upwards over 50 frames.\n\nThis script sets up a simple animation and can be expanded with additional properties or complexities as needed. Adjust the location and frame numbers to change the trajectory or speed of the animation."
    },
    {
        "Text Input": "A monkey tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne) tilt back and forth, you can use the following script. This script will create the Suzanne mesh, set up a basic animation by rotating it around the x-axis, and insert keyframes to animate the tilt.\n\n```python\nimport bpy\n\n# Delete the default cube if exists\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Cube'].select_set(True)\nbpy.ops.object.delete()\n\n# Add a monkey mesh (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nsuzanne = bpy.context.active_object\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Add keyframes for the animation\n# Start of the animation\nsuzanne.rotation_euler = (0.0, 0.0, 0.0)\nsuzanne.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Tilt to one side at frame 25\nsuzanne.rotation_euler = (0.3, 0.0, 0.0)  # Tilt forward\nsuzanne.keyframe_insert(data_path=\"rotation_euler\", frame=25)\n\n# Back to neutral position at frame 50\nsuzanne.rotation_euler = (0.0, 0.0, 0.0)\nsuzanne.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\n# Tilt to the other side at frame 75\nsuzanne.rotation_euler = (-0.3, 0.0, 0.0)  # Tilt backward\nsuzanne.keyframe_insert(data_path=\"rotation_euler\", frame=75)\n\n# Back to neutral position to complete the cycle at frame 100\nsuzanne.rotation_euler = (0.0, 0.0, 0.0)\nsuzanne.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set the interpolation type to 'LINEAR' for a constant speed\nfor fcurve in suzanne.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the timeline to start from the beginning\nbpy.context.scene.frame_current = 1\n``"
    },
    {
        "Text Input": "A cylinder spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cylinder spin and scale up, you can use Blender's `bpy` module to automate the task. Below is a script that adds a cylinder to the scene, creates an animation where the cylinder spins on its Z-axis and scales up over time.\n\n```python\nimport bpy\n\n# Delete existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set up animation frames\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Ensure Cylinder is the active object\nbpy.context.view_layer.objects.active = cylinder\n\n# Insert keyframes for rotation\ncylinder.rotation_euler = (0, 0, 0)  # Start rotation\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ncylinder.rotation_euler = (0, 0, 6.28319)  # End rotation (360 degrees in radians)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Insert keyframes for scaling\ncylinder.scale = (1, 1, 1)  # Start scale\ncylinder.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\ncylinder.scale = (3, 3, 3)  # End scale\ncylinder.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation type to linear for all F-curves\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation of spinning and scaling cylinder setup complete.\")\n```\n\n### Explanation:\n- **Scene Cleanup**: The script begins by clearing existing objects to ensure a clean slate.\n- **Cylinder Creation**: It uses `bpy.ops.mesh.primitive_cylinder_add()` to create a new cylinder.\n- **Animation Frames**: The animation runs from `start_frame` 1 to `end_frame` 120.\n- **Rotation Keyframes**: The cylinder rotates 360 degrees around the Z-axis from start to end frames.\n- **Scaling Key"
    },
    {
        "Text Input": "A monkey spins while floating.",
        "Blender Script": "To create a Blender script that makes a monkey model (Suzanne) spin while floating, we need to perform a few steps: create the monkey mesh, animate the rotation, and position it so it appears to be floating. Below is an example of how you can script this in Blender using Python:\n\n```python\nimport bpy\n\ndef create_spinning_floating_monkey():\n    # Clear existing mesh and objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Create the monkey mesh (Suzanne)\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 2))  # Elevated to float\n    monkey = bpy.context.object\n    monkey.name = \"FloatingSpinningMonkey\"\n\n    # Set up the animation\n    scene = bpy.context.scene\n    scene.frame_start = 1\n    scene.frame_end = 250\n\n    # Insert the initial keyframe for rotation\n    monkey.rotation_euler = (0, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=scene.frame_start)\n\n    # Keyframe for a 360-degree rotation\n    monkey.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=scene.frame_end)\n\n    # Set up interpolation to be linear for constant spinning\n    for fcurve in monkey.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'LINEAR'\n\n    # Set view to see the monkey spinning\n    for area in bpy.context.screen.areas:\n        if area.type == 'VIEW_3D':\n            space = area.spaces[0]\n            space.shading.type = 'MATERIAL'\n            space.region_3d.view_perspective = 'ORBIT'\n\ncreate_spinning_floating_monkey()\n```\n\n### Instructions to run the script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text file in the text editor and paste the script above.\n3. Make sure to have a 3D view visible to see the effect.\n4. Click \"Run Script\" to execute the script.\n\n### What the script does:\n\n- **Clears the Scene**: Deletes existing objects to start from a clean slate.\n- **Creates Suzanne"
    },
    {
        "Text Input": "A cube moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that moves a cube in a spiral motion, you'll want to use Blender's scripting API to animate the cube's location over time. This example will make the cube animate in a simple upward spiral motion using the `bpy` library.\n\nMake sure you have a cube already in your scene (or set up the script to create one). You can run this script in Blender's scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Clear existing animation data\nbpy.ops.anim.keyframe_clear_v3d()\n\n# Select the cube object, assume it is already named \"Cube\"\ncube = bpy.data.objects.get(\"Cube\")\n\n# Function parameters\nframes = 250  # Total frames\nheight_increment = 0.05  # Vertical rise per frame\nspiral_factor = 0.1  # Factor determining the tightness of the spiral\n\nif cube is not None:\n    # Ensure the cube is selected and active\n    bpy.context.view_layer.objects.active = cube\n    cube.select_set(True)\n    \n    # Set initial position to the origin\n    cube.location = (0.0, 0.0, 0.0)\n    \n    for frame in range(frames):\n        # Calculate the position for the spiral\n        angle = frame * spiral_factor\n        x = math.cos(angle)\n        y = math.sin(angle)\n        z = frame * height_increment\n        \n        # Set the cube's location\n        cube.location = (x, y, z)\n        \n        # Insert keyframe for location\n        cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n    print(\"Spiral animation setup complete.\")\nelse:\n    print(\"Cube object not found. Please add a Cube to the scene and ensure it is named 'Cube'.\")\n```\n\n### Instructions:\n\n1. Open Blender and navigate to the Scripting workspace.\n2. Copy the script above into a new text block in Blender's scripting editor.\n3. Ensure there's a cube in your scene named \"Cube.\"\n4. Run the script by pressing the \"Run Script\" button.\n5. Switch to the timeline or animation workspace to see the cube moving in a spiral motion.\n\n### Features:\n\n- **Frames**: You can adjust the number of frames for the animation by changing the `frames` variable.\n- **Height Increment**: Controls how much the cube rises vertically per frame.\n- **Spiral Factor**: Determines the tightness of the"
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "Here's a Blender Python script to animate a cube moving in a circular path. This script sets up a simple animation where a cube follows a circular path around the origin in the 3D view.\n\n```python\nimport bpy\nimport math\n\n# Ensure we start with a clean scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(location=(1, 0, 0))\ncube = bpy.context.object\ncube.name = \"CircleMovingCube\"\n\n# Function to set a circular path animation\ndef animate_cube_circle(obj, radius=3, frame_start=1, frame_end=250):\n    # Set up animation\n    obj.animation_data_clear()\n    \n    # Set initial keyframe\n    obj.location = (radius, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n    # Animate the cube moving in a circle\n    for frame in range(frame_start, frame_end + 1):\n        angle = (frame - frame_start) * (2 * math.pi / (frame_end - frame_start))\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        obj.location = (x, y, 0)\n        obj.keyframe_insert(data_path=\"location\", frame=frame)\n        \n# Create the circular animation\nanimate_cube_circle(cube)\n\n# Set the timeline's start and end frame for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Move the cube back to the original location after the animation ends\nbpy.context.view_layer.update()\n\n# Optionally set the camera to have a better view of the animation\nbpy.ops.object.camera_add(location=(6, -6, 6))\ncamera = bpy.context.object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n\nprint(\"Animation setup complete.\")\n```\n\n### How to Use:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\nThis script will create a cube that moves in a circular path with a radius of 3"
    },
    {
        "Text Input": "A cube moves from left to right.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that will animate a cube moving from left to right.\n\n```python\nimport bpy\n\n# Function to clear existing mesh and animations\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Clear existing mesh and animations\nclear_scene()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(-5, 0, 0))\ncube = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 120\n\n# Insert the initial keyframe\ncube.location = (-5, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the final location and insert the final keyframe\ncube.location = (5, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n# Set playback range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\n\n# Optionally set the output settings for rendering the animation\nbpy.context.scene.render.filepath = \"//cube_animation\"\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\n\nprint(\"Cube animation setup complete.\")\n```\n\n### How to Use the Script\n\n1. **Open Blender**: Start a new project or open an existing one.\n2. **Open the Text Editor**: Go to the \"Scripting\" tab or \"Text Editor\" panel.\n3. **Create a New Script**: Click on \"New\" and paste the script above into the text editor.\n4. **Run the Script**: Click \"Run Script\" or press `Alt + P`.\n\n### Explanation:\n- **Clearing the Scene**: The function `clear_scene()` deletes all existing mesh objects to ensure you start fresh.\n- **Cube Creation**: A cube is added to the scene with an initial position of `(-5, 0, 0)`.\n- **Animation Keyframes**: The script inserts a keyframe at frame 1 and sets the cube's location at `(-5, 0, 0)`. At frame 120 (or any specified value of `total_frames`), another keyframe is inserted"
    },
    {
        "Text Input": "A monkey rotates 360 degrees.",
        "Blender Script": "Sure! Below is a simple Blender Python script that creates a monkey mesh (Suzanne) and animates it to rotate 360 degrees on the Z-axis.\n\n```python\nimport bpy\n\n# Delete all existing objects to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\n\n# Get the newly created monkey object\nmonkey = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Insert keyframe for rotation at frame 1 (initial rotation)\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", index=-1, frame=1)\n\n# Insert keyframe for rotation at frame 100 (fully rotated 360 degrees)\nmonkey.rotation_euler = (0, 0, 3.1416 * 2)  # 360 degrees rotation in radians\nmonkey.keyframe_insert(data_path=\"rotation_euler\", index=-1, frame=100)\n\n# Adjust interpolation to linear for a constant speed rotation\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Script finished: A monkey rotating 360 degrees has been created.\")\n```\n\n#### How the script works:\n\n1. **Clear the Scene:** It starts by deleting all existing objects to ensure the scene is empty.\n2. **Add a Monkey Mesh:** A new `Suzanne` mesh (the default monkey head mesh in Blender) is added to the scene.\n3. **Set Frame Range:** The animation is set to run from frame 1 to frame 100.\n4. **Insert Keyframes:**\n   - At frame 1, the monkey is at its initial rotation (0 degrees).\n   - At frame 100, the monkey is rotated 360 degrees (or `2 * pi` radians) around the Z-axis.\n5. **Linear Interpolation:** The script sets the keyframe interpolation to 'LINEAR' to ensure the monkey rotates at a constant speed throughout the animation.\n\nRemember that you need to run this script in Blender's"
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "To create a Blender Python script that scales a plane up and down, you can automate this using Blender's scripting capabilities. Let's create a script that will animate a plane scaling up and down over time.\n\nHere's a simple script to achieve that effect:\n\n```python\nimport bpy\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Select the created plane\nplane = bpy.context.active_object\n\n# Set the frame range for the animation\nframe_start = 1\nframe_end = 100\n\n# Insert a keyframe for the initial scale at the start\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n# Set scale up at frame mid\nmid_frame = (frame_start + frame_end) // 2\nplane.scale = (3, 3, 3)\nplane.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Set scale back to normal at end frame\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set the interpolation type to make the animation smoother\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\nprint(\"Animation setup complete. Plane will scale up and down between frames {} and {}.\".format(frame_start, frame_end))\n\n```\n\n### How this script works:\n\n1. **Create a Plane**: It first creates a plane in the scene.\n\n2. **Set Initial Scale**: Inserts a keyframe at the starting frame with the plane's scale set to its default size.\n\n3. **Scale Up**: The plane scales up to a factor of three at the midpoint of the animation (you can adjust the scaling factor as needed).\n\n4. **Scale Down**: The plane returns to its original size by the end of the animation.\n\n5. **Smooth Animation**: Sets the interpolation of the keyframes to 'SINE' for a smoother scaling effect.\n\n### How to Run the Script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text file and paste the script above into it.\n3. Click the \"Run Script\" button to execute the script.\n\nYou should see the"
    },
    {
        "Text Input": "A cylinder orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cylinder orbits around another object, like a sphere, you can use the following script. The script sets up a simple scene with a sphere and a cylinder and animates the cylinder to orbit around the sphere. Ensure you have the required import statements and this script should be run in Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Clear existing scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a sphere to the center\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"CentralSphere\"\n\n# Add a cylinder at a starting position\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(2, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = \"OrbitingCylinder\"\n\n# Set up animation parameters\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Animate cylinder to orbit around the sphere\nfor frame in range(frame_start, frame_end+1):\n    bpy.context.scene.frame_set(frame)\n    angle = (2 * math.pi * (frame - frame_start)) / (frame_end - frame_start)\n    \n    # Calculate new position in 2D plane (X, Y)\n    x = 2 * math.cos(angle)\n    y = 2 * math.sin(angle)\n    \n    # Set the new position for the cylinder\n    cylinder.location = (x, y, 0)\n    \n    # Insert a keyframe at this frame\n    cylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the scene to loop the animation\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.fps = 24\n\n# Optional: Adjust camera position to view the animation clearly\nbpy.ops.object.camera_add(location=(5, -5, 2))\ncamera = bpy.context.object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n```\n\nThis script performs the following actions:\n\n1. Clears the existing scene.\n2. Adds a sphere that represents the central object.\n3. Adds a cylinder that"
    },
    {
        "Text Input": "A cylinder oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that animates a cylinder oscillating in a sine wave, we need to script the generation of a cylinder and then apply an animation to it using keyframes. Below is a script that accomplishes this in Blender.\n\n```python\nimport bpy\nimport math\n\n# Clean up the scene by removing all objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cylinder object to the scene\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\n\n# Get a reference to the newly created cylinder\ncylinder = bpy.context.object\n\n# Set the frame range for the animation\nnum_frames = 120\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = num_frames\n\n# Define the sine wave parameters\namplitude = 2\nfrequency = 1  # Frequency in cycles per second\nspeed = 0.1    # Speed of animation\n\n# Animate the cylinder's movement\nfor frame in range(num_frames + 1):\n    bpy.context.scene.frame_set(frame)\n    # Calculate the new Z-location based on a sine wave function\n    new_z_location = amplitude * math.sin(frequency * speed * frame)\n    # Apply the new Z-location\n    cylinder.location = (0, 0, new_z_location)\n    # Insert a keyframe for the location\n    cylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Adjust the timeline to fit the animation\nbpy.context.scene.frame_current = 0\n\nprint(\"Animation complete.\")\n```\n\n### Explanation:\n1. **Delete Default Objects**: The script starts by deleting all existing objects in the scene to ensure a clean slate.\n2. **Add a Cylinder**: We then add a cylinder at the origin.\n3. **Set Frame Range**: The frame range for the animation is set to 120 frames.\n4. **Sine Wave Calculation**: The script calculates the Z location of the cylinder using a sine wave formula and updates its position for each frame.\n5. **Insert Keyframes**: A keyframe is inserted at each frame to animate the movement.\n6. **Set Timeline**: Finally, it ensures the timeline is set back to the start of the animation.\n\nTo use this script, simply paste it into Blender\u2019s text editor and run it. The cylinder will"
    },
    {
        "Text Input": "A plane zooms in and out.",
        "Blender Script": "To create a simple animation in Blender where a plane zooms in and out, you can use the following Python script. This script sets up a plane and animates its scale to give the effect of zooming in and out.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set the total frames for animation\nbpy.context.scene.frame_end = 120\n\n# Define a function to set keyframes\ndef set_keyframe(obj, frame, scale):\n    bpy.context.scene.frame_set(frame)\n    obj.scale = (scale, scale, scale)\n    obj.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Zoom in animation (frame 0 to 60)\nset_keyframe(plane, frame=0, scale=1)      # Initial scale at frame 0\nset_keyframe(plane, frame=30, scale=2)     # Zoom in scale at frame 30\nset_keyframe(plane, frame=60, scale=1)     # Back to initial scale at frame 60\n\n# Zoom out animation (frame 60 to 120)\nset_keyframe(plane, frame=90, scale=0.5)   # Zoom out scale at frame 90\nset_keyframe(plane, frame=120, scale=1)    # Back to initial scale at frame 120\n\n# Set the interpolation type to 'LINEAR' for even scaling\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Plane zoom in and out animation created.\")\n```\n\nThis script performs the following actions:\n\n1. Clears existing mesh objects in the scene.\n2. Adds a new plane at the origin.\n3. Sets up keyframe scaling animations:\n   - The plane scales up from its original size to twice its size by frame 30 and back to its original size by frame 60.\n   - The plane scales down to half its original size by frame 90 and returns to its original size by frame 120.\n4. Adjusts"
    },
    {
        "Text Input": "A torus spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a torus spin while floating, you can use the following code. This script focuses on setting up a simple animation where the torus rotates about its Z-axis, giving an effect of spinning, while floating in place.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\n\n# Get the torus object\ntorus = bpy.context.active_object\n\n# Set animation frames\nstart_frame = 1\nend_frame = 250\n\n# Set spinning animation\ntorus.rotation_euler = (0.0, 0.0, 0.0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ntorus.rotation_euler = (0.0, 0.0, 6.28319)  # One full rotation (2 * pi radians)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Add a floating effect along the Z-axis using a basic sine-wave motion\ntorus.location.z = 0.5  # starting float position\ntorus.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n# Intermediate floating effect setting, peaks and troughs (sine-like motion)\ntorus.location.z = 0.7\nmid_frame = (start_frame + end_frame) // 2\ntorus.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n\ntorus.location.z = 0.5\ntorus.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Set interpolation type for smooth sinusoidal motion\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\n# Set frame range for the animation timeline\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally, play the animation\nbpy.ops.screen.animation_play()  # Start playing the animation\n\n# Alternatively, render the animation\n# (You have to set up render"
    },
    {
        "Text Input": "A monkey moves in a circular path.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a monkey object (Suzanne, Blender's monkey head) to move in a circular path:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey (Suzanne head)\nbpy.ops.mesh.primitive_monkey_add(size=1.0, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set up animation parameters\nradius = 5.0               # Radius of the circular path\ntotal_frames = 250         # Total number of frames in the animation\nfps = 24                   # Frames per second\nspeed = 1.0                # Speed of the animation (1.0 is normal speed)\n\n# Calculate angular speed\nangular_speed = speed * (2 * math.pi / total_frames)\n\n# Set frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\nbpy.context.scene.render.fps = fps\n\n# Animate the monkey's position\nfor frame in range(total_frames):\n    # Calculate angle in radians for current frame\n    angle = angular_speed * frame\n    \n    # Calculate new position on the circular path\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    \n    # Insert keyframes for the monkey's location\n    monkey.location = (x, y, 0)\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the current frame to 0\nbpy.context.scene.frame_set(0)\n\n# Optional: Add a camera and light to better visualize the animation\nbpy.ops.object.camera_add(location=(10, -10, 10))\ncamera = bpy.context.object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n\nbpy.ops.object.light_add(type='POINT', location=(0, 0, 10))\n\nprint(\"Monkey animation in a circular path has been created.\")\n```\n\n### Explanation:\n- The script begins by clearing all existing objects in the scene.\n- A new monkey object (Suzanne) is added at the origin.\n- The animation is set to be 250 frames long, with a frame rate of 24 fps.\n- The object will move in a circular path with"
    },
    {
        "Text Input": "A plane spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a plane spin and scale up, you'll need to utilize Blender's `bpy` module to manipulate the object's transformation properties. Here's a script that animates a plane to rotate and scale up over a specific number of frames.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set up animation frames\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Keyframe for initial state\nplane.scale = (1, 1, 1)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path='scale', frame=start_frame)\nplane.keyframe_insert(data_path='rotation_euler', frame=start_frame)\n\n# Keyframe for final state\nplane.scale = (3, 3, 3)  # Scale up size 3 times\nplane.rotation_euler = (0, 0, 2 * 3.14159)  # 360 degrees in radians\nplane.keyframe_insert(data_path='scale', frame=end_frame)\nplane.keyframe_insert(data_path='rotation_euler', frame=end_frame)\n\n# Set interpolation to linear for a consistent motion\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete!\")\n```\n\nCopy and paste the script into Blender's scripting editor and run it. Here are the steps explained:\n\n- **Clear existing objects:** This script starts by removing all existing objects in the scene to ensure a clean workspace.\n- **Add a new plane:** It creates a new plane at the origin (0,0,0).\n- **Configure animation frames:** The animation will be spread from frame 1 to frame 100.\n- **Initial and final keyframes:** The script sets the initial scale and rotation and creates keyframes for these at the start frame. It repeats this process for the desired final scale and rotation at the end frame.\n- **Linear interpolation:** This ensures the transition between keyframes"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, we can animate the plane's movement along the X-axis using keyframes. Here's a simple script to achieve that:\n\n```python\nimport bpy\nimport math\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.delete(use_global=False)  # Clear the scene by deleting all objects\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"WigglingPlane\"\n\n# Define animation parameters\nframes = 60  # Total number of frames\nfrequency = 2  # Number of full wiggles per second\namplitude = 1  # Maximum wiggle distance\n\n# Set up the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = frames\n\n# Add keyframes for the wiggle animation\nfor frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end + 1):\n    time = frame / bpy.context.scene.render.fps  # Convert frame to seconds\n    displacement = amplitude * math.sin(2 * math.pi * frequency * time)  # Calculate displacement\n\n    plane.location.x = displacement\n    plane.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Set interpolation to linear for consistent motion\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\nprint(\"The plane is animated to wiggle side to side.\")\n```\n\n### How to Run the Script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into the text editor.\n3. Press the \"Run Script\" button to execute the script.\n\n### What This Script Does:\n\n- It starts by clearing the scene of all objects.\n- A new plane is added at the origin.\n- The script sets keyframes for the plane's X-location to animate a sinusoidal motion (wiggle) over a specified number of frames.\n- Linear interpolation is applied to ensure smooth motion between keyframes.\n\n### Customization:\n- Adjust the `frames`, `frequency`, and `amplitude` variables to change the duration"
    },
    {
        "Text Input": "A plane rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a plane 360 degrees, you need to use Blender's Python API to set up the scene, create a plane, and animate its rotation. Below is a sample script that does just that:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the newly created plane object\nplane = bpy.context.object\n\n# Set the rotation animation\nframe_start = 1\nframe_end = 120  # Adjust this to change the animation speed (120 frames for 5 seconds at 24 fps)\n\n# Set initial keyframe\nplane.rotation_euler = (0.0, 0.0, 0.0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Set the final keyframe with 360 degrees rotation on Z axis\nplane.rotation_euler = (0.0, 0.0, 360 * (3.14159 / 180.0))\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Change animation properties\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set the interpolation mode for smoother animation\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'  # or 'CONSTANT', 'BEZIER', etc.\n\nprint(\"The plane was successfully animated to rotate 360 degrees!\")\n```\n\nExplanation:\n- The script first clears any existing mesh objects in the scene to create a fresh environment.\n- It then adds a new plane to the scene and assigns it to the variable `plane`.\n- The script sets keyframes for the start and end of the animation: the first keyframe sets the rotation to 0 degrees, and the final keyframe sets it to 360 degrees on the Z-axis.\n- The animation runs from frame 1 to frame 120, but you can adjust `frame_end` to change the duration of the animation.\n- The `for` loop at the end changes the interpolation mode of the keyframes to create linear animation,"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a monkey object (Suzanne) rotate continuously on the X-axis, we will use the following steps:\n\n1. Add a monkey object (Suzanne) to the scene.\n2. Set up a driver to make the monkey rotate continuously on the X-axis.\n3. Run the script to see the effect.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Function to create a monkey and animate its rotation\ndef animate_monkey_rotation():\n    # Delete all existing objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Add a monkey mesh to the scene\n    bpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\n    monkey = bpy.context.object\n    monkey.name = 'Suzanne'\n\n    # Set the rotation mode to Euler XYZ\n    monkey.rotation_mode = 'XYZ'\n\n    # Create a new driver for the X-axis rotation\n    fcurve = monkey.animation_data_create().drivers.new('rotation_euler', 0)\n\n    # Create a driver variable for time frame (frame)\n    var = fcurve.driver.variables.new()\n    var.name = 'frame'\n    var.targets[0].id_type = 'SCENE'\n    var.targets[0].id = bpy.context.scene\n    var.targets[0].data_path = 'frame_current'\n\n    # Add a modifier to the driver to create a continuous rotation effect\n    # (Radians per frame, so 0.1 corresponds to roughly 5.73 degrees per frame)\n    fcurve.driver.expression = 'frame * 0.1'\n\n# Call the function to create and animate the monkey\nanimate_monkey_rotation()\n```\n\nYou can run this script from Blender's scripting editor. Open a new Blender instance, go to the scripting tab, create a new text block, paste the script above, and run it. This will add the monkey object to your scene and set it to rotate continuously on the X-axis as you play through the timeline. Note that you can adjust the `0.1` in the expression to make the rotation slower or faster."
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a plane moving diagonally upwards, you'll need to manipulate the location of the plane over time using keyframes. Here's a script that demonstrates how to do this in Blender:\n\n```python\nimport bpy\n\n# Set the scene\nscene = bpy.context.scene\n\n# Create a new mesh object (plane)\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Define the start and end frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Set the start location of the plane\nplane.location = (0, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the end location of the plane (moving diagonally upwards)\nplane.location = (10, 10, 10)\nplane.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optionally, set interpolation type to linear for constant speed\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Update the scene\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Animation script executed successfully.\")\n```\n\n### Explanation:\n- **Plane Creation**: The script begins by adding a plane at the origin (0,0,0).\n- **Keyframes**: It sets keyframes for the plane's location at the start and end frames. The plane moves from `(0, 0, 0)` to `(10, 10, 10)`, which is diagonally upwards in 3D space.\n- **Interpolation**: For a smooth, linear motion, the interpolation type for the keyframes is set to 'LINEAR'. This ensures that the plane moves at a constant speed from start to finish.\n- **Frame Range**: The animation frame range is set from `start_frame` (1) to `end_frame` (100).\n- **Execution**: Running this script in Blender\u2019s scripting window will animate the plane as described.\n\nMake sure to execute this script in Blender's scripting tab, with a new or existing project. It will create a plane and automatically animate its motion diagonally upwards across the specified frame range."
    },
    {
        "Text Input": "A cone jumps up and lands.",
        "Blender Script": "To create an animation in Blender where a cone jumps up and lands, you can use the following Python script. This script will set up a simple animation by creating a cone, and animating its position to simulate a jump.\n\nMake sure to run the script in Blender's scripting environment to see the effects.\n\n```python\nimport bpy\nimport math\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set up keyframes for the jump animation\n\n# Set initial frame\nframe_start = 1\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_current = frame_start\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Cone jumps up\nframe_jump = frame_start + 10\nbpy.context.scene.frame_current = frame_jump\ncone.location = (0, 0, 3)\ncone.keyframe_insert(data_path=\"location\", frame=frame_jump)\n\n# Cone lands\nframe_land = frame_jump + 10\nbpy.context.scene.frame_current = frame_land\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=frame_land)\n\n# Set end frame of the scene\nbpy.context.scene.frame_end = frame_land\n\n# Set up a simple interpolation for smoother jump animation\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Optionally, set the camera to see the cone\n# Or use default camera settings\nif not bpy.data.objects.get('Camera'):\n    bpy.ops.object.camera_add(location=(5, -5, 5), rotation=(math.radians(60), 0, math.radians(45)))\n\nbpy.context.scene.camera = bpy.data.objects['Camera']\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\n### Steps to Run:\n1. Open Blender.\n2. Go to the Scripting workspace.\n3. Create a new text block and paste the above script.\n4. Click \"Run Script.\"\n\n### Notes:\n- This script starts by"
    },
    {
        "Text Input": "A cylinder orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cylinder orbits around another object, we need to set up a basic scene with an object (e.g., a sphere) and make the cylinder orbit around it. Here's a simple script to achieve this task:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a central object (e.g., a sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = \"Central_Object\"\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(3, 0, 0))\norbiting_cylinder = bpy.context.object\norbiting_cylinder.name = \"Orbiting_Cylinder\"\n\n# Set up a frame counter\nframes = 250\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = frames\n\n# Define the orbit parameters\norbit_radius = 3\norbit_speed = 1.0\n\n# Set initial position (at frame 1)\nbpy.context.scene.frame_set(1)\nx = orbit_radius\ny = 0\norbiting_cylinder.location = (x, y, 0)\norbiting_cylinder.keyframe_insert(data_path=\"location\")\n\n# Animate the cylinder's orbit around the central object\nfor frame in range(1, frames + 1):\n    bpy.context.scene.frame_set(frame)\n    angle = orbit_speed * frame * (2 * math.pi / frames)\n    x = orbit_radius * math.cos(angle)\n    y = orbit_radius * math.sin(angle)\n    orbiting_cylinder.location = (x, y, 0)\n    orbiting_cylinder.keyframe_insert(data_path=\"location\")\n\n# Set the rendering options\nbpy.context.scene.render.engine = 'BLENDER_EEVEE'\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"//orbit_animation\"\n\nprint(\"Animation setup complete. You can now render the animation.\")\n```\n\n### How the script works:\n1. **Object Setup**: Clears current objects in the scene and creates a central sphere and an orbiting cylinder.\n2. **Orbit Mechanics**: Uses math to calculate the position of the cylinder based on a simple circular orbit around"
    },
    {
        "Text Input": "A plane tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a plane tilting back and forth, we'll need to use Blender's bpy module. The script will create a plane, add keyframes to animate the tilting, and set up the animation in a loop.\n\nHere's a sample script:\n\n```python\nimport bpy\nimport math\n\ndef create_plane():\n    # Delete existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a new plane\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\n    plane = bpy.context.active_object\n    return plane\n\ndef animate_tilt(plane, tilt_angle, frame_start, frame_end):\n    # Set initial keyframe\n    plane.rotation_euler = (0, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n    \n    # Tilt to one direction\n    plane.rotation_euler = (math.radians(tilt_angle), 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start + (frame_end - frame_start) / 2)\n\n    # Tilt in the opposite direction\n    plane.rotation_euler = (math.radians(-tilt_angle), 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\ndef setup_scene():\n    # Set the frame range\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = 100\n\n    # Set loop and playback settings\n    bpy.context.scene.render.fps = 24\n    bpy.context.scene.frame_current = 0\n\ndef main():\n    # Create a plane\n    plane = create_plane()\n\n    # Animate the tilting motion\n    animate_tilt(plane, tilt_angle=25, frame_start=0, frame_end=100)\n\n    # Setup scene settings\n    setup_scene()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Script Explanation:\n\n1. **create_plane()**: Removes any existing mesh objects in the scene for a clean start, then adds a new plane at the origin.\n\n2. **animate_tilt()**: Defines keyframes for animating the tilt. The plane initially starts flat, rotates `tilt_angle` degrees one way and then"
    },
    {
        "Text Input": "A cone oscillates in a sine wave.",
        "Blender Script": "Here is a Blender Python script that will create a cone and animate it to oscillate in a sine wave pattern. This script uses Blender's Python API to add a cone and animate its Z-axis position using a sine function:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.active_object\n\n# Set the timeframe for the animation\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define the amplitude and frequency of the sine wave\namplitude = 1\nfrequency = 1\n\n# Animate the cone's location in a sine wave pattern on the Z-axis\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    z_position = amplitude * math.sin(frequency * math.radians(frame))\n    cone.location.z = z_position\n    cone.keyframe_insert(data_path=\"location\", index=2)\n\n# Set animation playback\nbpy.context.scene.frame_current = start_frame\nbpy.ops.screen.animation_play()\n\n```\n\n**Explanation:**\n\n- The script starts by deleting all existing objects in the scene to ensure a clean workspace.\n\n- It then adds a cone to the scene using `bpy.ops.mesh.primitive_cone_add`.\n\n- The animation time frame is set from `start_frame` to `end_frame`.\n\n- The `amplitude` and `frequency` of the sine wave motion are defined. You can adjust these values to change how the cone oscillates.\n\n- A loop iterates through each frame of the animation, calculating the Z-axis position of the cone using a sine function with `math.sin`.\n\n- The cone's Z-axis movement is then animated using `keyframe_insert` to set keyframes for the location at each frame.\n\n- Finally, the script sets the current frame to the start of the animation and plays it.\n\nYou can copy this script into Blender's scripting editor and execute it to see the cone oscillate in a sine wave pattern. Adjust the `amplitude` and `frequency` to suit your specific aesthetic requirements."
    },
    {
        "Text Input": "A cube bounces like a ball.",
        "Blender Script": "Creating a bouncing cube animation in Blender using Python scripting involves setting up the scene, creating keyframes, and applying transformations to make the cube animate like a bouncing ball. Below is a Python script that achieves this in Blender. This script should be executed within Blender's scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Clear the existing scene\nbpy.ops.wm.read_homefile(app_template=\"\")\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncube = bpy.context.object\n\n# Set up variables for the animation\nbounce_height = 5.0  # The maximum height of the bounce\nground_level = 1.0   # The level at which the cube \"bounces\"\nbounce_count = 5     # Number of bounces\nframe_gap = 20       # Frame gap between bounces\ngravity_factor = 0.5 # Factor to reduce height on each bounce\n\n# Set the start and end frames for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frame_gap * bounce_count\n\n# Calculate the keyframes for the bounce animation\nfor i in range(bounce_count):\n    # Calculate the frames at which the cube will be at the ground and at the peak\n    start_frame = i * frame_gap\n    peak_frame = start_frame + frame_gap // 2\n    end_frame = start_frame + frame_gap\n    \n    # Calculate the bounce height for this bounce\n    current_height = bounce_height * (gravity_factor ** i)\n    \n    # Keyframe at the ground level\n    cube.location = (0, 0, ground_level)\n    cube.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Keyframe at the peak of the bounce\n    cube.location = (0, 0, ground_level + current_height)\n    cube.keyframe_insert(data_path=\"location\", frame=peak_frame)\n    \n    # Keyframe back at the ground level\n    cube.location = (0, 0, ground_level)\n    cube.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set the interpolation type to 'LINEAR' for constant speed\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points"
    },
    {
        "Text Input": "A monkey tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne) tilt back and forth, you can use the following code. This script will animate the monkey to rotate around the X-axis.\n\n```python\nimport bpy\n\n# Ensure we are in object mode\nif bpy.context.active_object is not None:\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a Monkey (Suzanne) mesh\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 1))\n\n# Get a reference to the newly created monkey object\nmonkey = bpy.context.active_object\n\n# Set animation parameters\nframe_start = 1\nframe_end = 60\nrotation_angle = 0.5  # Radians, approximately 28.65 degrees\n\n# Set keyframes for the tilting animation\n# Initial frame setup\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Frame middle\nmiddle_frame = (frame_start + frame_end) // 2\nmonkey.rotation_euler = (rotation_angle, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=middle_frame)\n\n# End frame\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation type to linear for back and forth effect\nfor fc in monkey.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Set scene frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nprint(\"Animation setup complete. Play the animation to see the monkey tilt back and forth.\")\n```\n\nThis script performs the following steps:\n\n1. Deletes any existing objects in the scene to start fresh.\n2. Adds a Suzanne (monkey) mesh to the scene.\n3. Sets animation parameters, defining the start and end frames for a full back-and-forth tilt.\n4. Configures keyframes for the monkey's rotation along the X-axis at the start, middle, and end of the animation.\n5. Sets the interpolation to linear for a continuous and even tilt motion.\n6. Sets the"
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "To achieve a \"flipping upside down\" animation of a torus in Blender using Python, you can use the Blender Python API to create the object and animate its rotation. The following script demonstrates how to set up such an animation:\n\n```python\nimport bpy\n\n# Clear all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus object\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the rotation mode to Euler XYZ\ntorus.rotation_mode = 'XYZ'\n\n# Set initial keyframe\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Set final keyframe (Flipped Upside Down at frame 50)\ntorus.rotation_euler = (3.14159, 0, 0)  # 180 degrees in radians\ntorus.keyframe_insert(data_path='rotation_euler', frame=50)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\n\n# Optionally, play the animation\n# bpy.ops.screen.animation_play()\n\n# Save the animation to an output file (if needed)\n# bpy.context.scene.render.filepath = \"/path_to_output/torus_flip_animation.mp4\"\n# bpy.context.scene.render.image_settings.file_format = 'FFMPEG'\n# bpy.ops.render.render(animation=True)\n```\n\nTo use this script:\n\n1. Open Blender.\n2. Open a new Text Editor window.\n3. Copy and paste the script into the Text Editor.\n4. Run the script by clicking on `Run Script` (or `Alt + P`).\n\nThis script will create a torus in the center of the scene and animate it to flip upside down over the course of 50 frames. Ensure to adjust the frame range, render settings, or file path for saving the animation as needed for your specific requirements."
    },
    {
        "Text Input": "A monkey oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a monkey oscillate in a sine wave, you need to animate the monkey model (Monkey mesh, often referred to as \"Suzanne\" in Blender) using keyframes and the math.sin function for smooth oscillation. Below is a script that sets up such an animation:\n\n```python\nimport bpy\nimport math\n\n# Create a new monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set up the animation for the monkey\nscene = bpy.context.scene\nframe_start = 1\nframe_end = 250\namplitude = 2\nfrequency = 1 / 25.0  # Adjust frequency for faster/slower oscillation\n\n# Clear existing keyframes\nmonkey.animation_data_clear()\n\n# Insert keyframes for oscillation\nfor frame in range(frame_start, frame_end + 1):\n    scene.frame_set(frame)\n    # Calculate the Y position based on a sine wave\n    y_position = amplitude * math.sin(frequency * frame * 2 * math.pi)\n    monkey.location[1] = y_position\n    # Insert keyframe for location\n    monkey.keyframe_insert(data_path=\"location\", index=1)\n\n# Set end frame of the scene to the end of the animation\nscene.frame_end = frame_end\n\n# Optional: Set render settings\nscene.render.fps = 30\nscene.render.image_settings.file_format = 'PNG'\nscene.render.filepath = \"//output/\"\n\nprint(\"Sine wave animation for monkey created successfully!\")\n```\n\n### Instructions to Use the Script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Clear any existing script, then create a new text block.\n3. Copy the above script into the text editor within the Blender scripting workspace.\n4. Press the 'Run Script' button in Blender.\n\n### What This Script Does:\n\n- It creates a new \"Suzanne\", the default monkey mesh in Blender.\n- Sets the monkey to oscillate in the Y-axis in a sine wave pattern.\n- Uses frames 1 to 250 for the animation, setting keyframe positions for each frame.\n- It calculates the y position for oscillation using `amplitude * math.sin(frequency * frame * 2 * math.pi)`.\n- Inserts keyframes at each frame for smooth oscillations"
    },
    {
        "Text Input": "A cylinder rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a cylinder rotate around the X-axis, you can use the Blender API to automate this process. Below is a script that creates a cylinder and animates its rotation along the X-axis:\n\n```python\nimport bpy\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\n\n# Delete existing objects\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set up animation parameters\nstart_frame = 1\nend_frame = 100\nrotation_angle = 360  # degrees\n\n# Set the initial rotation keyframe\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the final rotation keyframe\ncylinder.rotation_euler = (rotation_angle * (3.14159 / 180.0), 0, 0)  # Convert to radians\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Cylinder rotation animation setup complete.\")\n```\n\n### Explanation:\n\n- **Scene Setup:** The script deselects and deletes all existing mesh objects to ensure it starts with a clean scene.\n  \n- **Cylinder Creation:** It creates a cylinder using `bpy.ops.mesh.primitive_cylinder_add` with default parameters. You can adjust the depth and radius as needed.\n\n- **Animation Parameters:** The `start_frame` (1) and `end_frame` (100) define the animation length. `rotation_angle` is set to 360 degrees for a full rotation.\n\n- **Keyframing:** Initial and final rotation values are inserted as keyframes. Euler rotation is used, and the rotation angle is converted from degrees to radians (`3.14159 / 180.0`) since Blender uses radians.\n\n- **Animation Timeline:** The script sets the scene's end frame to the `end_frame` for the timeline.\n\nThis script will create a simple animation of a rotating cylinder on the X-axis, over 100 frames. You can run this script directly in Blender's scripting editor."
    },
    {
        "Text Input": "A monkey zooms in and out.",
        "Blender Script": "To create a Blender script that makes a monkey (Suzanne, Blender's built-in monkey mesh) zoom in and out, we can animate the camera to move towards and away from Suzanne. Below is the Python script that you can run in Blender's scripting environment to achieve this effect.\n\n```python\nimport bpy\n\n# First, clear existing meshes and objects to start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.active_object\nmonkey.name = \"Suzanne\"\n\n# Setup the camera\nbpy.ops.object.camera_add(location=(0, -6, 3))\ncamera = bpy.context.active_object\ncamera.name = \"Camera\"\ncamera.rotation_euler = (1.1, 0, 0)  # Rotate to face the monkey\n\n# Set the camera as the active camera\nbpy.context.scene.camera = camera\n\n# Define keyframe positions for the camera to zoom in and out\nkeyframes = {\n    1: -6,    # Starting position\n    50: -2,   # Zoom in position\n    100: -6,  # Zoom out to the start\n}\n\n# Insert keyframes for the animation\nfor frame, position in keyframes.items():\n    camera.location.y = position\n    camera.keyframe_insert(data_path='location', index=1, frame=frame)\n\n# Set up the animation playback\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n\n# Optionally, you can adjust render settings to make sure the animation looks good\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\nbpy.context.scene.render.filepath = \"//monkey_zoom_in_out\"\nbpy.context.scene.render.film_transparent = False\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.fps = 24\n\nprint(\"Script finished. You can now play the animation.\")\n```\n\n### How to Use:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text"
    },
    {
        "Text Input": "A cylinder orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cylinder orbits around another object, we can use a simple animation technique. In this script, we'll create a cylinder and another object (like a sphere or cube) and animate the cylinder to orbit around the object. This example will focus on using a sphere as the central object:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Set the scene\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 120\nbpy.context.scene.frame_current = 0\n\n# Create a central object - Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_obj = bpy.context.active_object\ncentral_obj.name = \"Central_Sphere\"\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(3, 0, 0))\ncylinder = bpy.context.active_object\ncylinder.name = \"Orbiting_Cylinder\"\n\n# Set the cylinder to orbit around the central object\norbit_radius = 3\norbit_speed = 2 * math.pi / bpy.context.scene.frame_end  # One full rotation over the course of the animation\n\n# Animate the cylinder\nfor frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end + 1):\n    # Calculate the angle for the current frame\n    angle = frame * orbit_speed\n\n    # Set new location based on the angle\n    x = orbit_radius * math.cos(angle)\n    y = orbit_radius * math.sin(angle)\n\n    # Move the cylinder to the new location\n    cylinder.location = (x, y, 0)\n\n    # Insert keyframe for the location\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 120\n```\n\n### Instructions\n1. Open Blender.\n2. Open a new text window by clicking on \"Text Editor\" in the scripting layout.\n3. Copy and paste the script into the text editor.\n4. Click on \"Run Script\" to execute the script.\n\n### Explanation\n- The script starts by clearing existing objects in the"
    },
    {
        "Text Input": "A monkey slides from top to bottom.",
        "Blender Script": "To create a simple Blender animation where a monkey (Suzanne) slides from the top to the bottom, you can use the following Python script. This script will set up the scene, create a plane as the slide, and animate the monkey's movement from the top of the plane to the bottom.\n\n```python\nimport bpy\n\ndef create_scene():\n    # Delete default objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n    # Add plane for slide\n    bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\n    slide = bpy.context.active_object\n    slide.name = 'Slide'\n    \n    # Rotate the plane to create a slide\n    slide.rotation_euler[0] = 1.2  # Tilt the slide downwards\n\n    # Add monkey head\n    bpy.ops.mesh.primitive_monkey_add(location=(0, 0, 3))\n    monkey = bpy.context.active_object\n    monkey.name = 'Suzanne'\n\n    # Set up the camera\n    bpy.ops.object.camera_add(location=(12, -12, 8))\n    bpy.context.scene.camera = bpy.context.active_object\n    bpy.context.scene.camera.rotation_euler = (1.1, 0, 0.8)\n\n    # Add a light source\n    bpy.ops.object.light_add(type='POINT', location=(5, -5, 5))\n\n    return monkey\n\ndef animate_monkey(monkey):\n    # Set the frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 50\n\n    # Initial position - Top of the slide\n    monkey.location = (0, 0, 3)\n    monkey.keyframe_insert(data_path='location', frame=1)\n\n    # Final position - Bottom of the slide\n    monkey.location = (0, 0, 0)\n    monkey.keyframe_insert(data_path='location', frame=50)\n\n# Run the function\nmonkey = create_scene()\nanimate_monkey(monkey)\n\n# Set the view to camera view for render\nbpy.context.space_data.region_3d.view_perspective = 'CAMERA'\n\n# Optionally, enable auto-rendering in script\n# bpy.ops.render.render(animation=True)\n```\n\n### Explanation:\n1. **Scene Setup**: The script begins by clearing the default objects and setting up a slide using a plane which is tilted by"
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a cone around the X-axis, we will need to use Blender's Python API. The script will create a cone, add it to the scene, and apply a rotation animation to it. Here's how you can achieve that:\n\n```python\nimport bpy\n\n# Delete all objects in the current scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the rotation mode to 'XYZ', allowing us to manipulate it with Euler angles\ncone.rotation_mode = 'XYZ'\n\n# Insert keyframes for the rotation animation\n# Rotate the cone on the X-axis from 0 to 360 degrees over 120 frames\n\n# Set initial keyframe (0 degrees)\ncone.rotation_euler[0] = 0\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set final keyframe (360 degrees or 2*pi radians)\nimport math\ncone.rotation_euler[0] = 2 * math.pi\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set the animation to be a cyclic rotation\naction = cone.animation_data.action\nfcurves = action.fcurves.find(data_path=\"rotation_euler\", index=0)\nfor modifier in fcurves.modifiers:\n    fcurves.modifiers.remove(modifier)\n\ncycle_modifier = fcurves.modifiers.new(type='CYCLES')\ncycle_modifier.mode_before = 'REPEAT'\ncycle_modifier.mode_after = 'REPEAT'\n\n# Set the animation parameters\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n```\n\nInstructions to run the script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the text editor area and paste the script above.\n3. Click the \"Run Script\" button to execute the script.\n\nThis script will create a cone and animate its rotation around the X-axis over 120 frames. The rotation is set to repeat indefinitely by using the Cycles modifier. You can adjust the number of frames, rotation amount, or repetition settings as needed to custom tailor the animation to your needs."
    },
    {
        "Text Input": "A cone spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cone spin and scale up, you can use the following code. This script will automate the process of adding a cone to the scene and animating it to spin and scale up over a specified number of frames.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 120\nbpy.context.scene.frame_end = total_frames\n\n# Set initial scale and rotation\ncone.scale = (1, 1, 1)\ncone.rotation_euler = (0, 0, 0)\n\n# Insert keyframes for start\ncone.keyframe_insert(data_path='scale', frame=1)\ncone.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Define the final scale and rotation\nfinal_scale = (3, 3, 3)  # Final scale after the animation\nfinal_rotation_z = 4 * math.pi  # 2 full rotations\n\n# Set the cone's scale and rotation at the end of the animation\ncone.scale = final_scale\ncone.rotation_euler = (0, 0, final_rotation_z)\n\n# Insert keyframes for end\ncone.keyframe_insert(data_path='scale', frame=total_frames)\ncone.keyframe_insert(data_path='rotation_euler', frame=total_frames)\n\n# Set interpolation mode to linear for all fcurves\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation script executed successfully.\")\n```\n\nTo use the script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block and paste the script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\nThis script will add a cone to the origin, animate it to spin around the Z-axis and scale up evenly over 120 frames, and use linear interpolation for smooth motion. You can adjust the `total_frames`, `final_scale`, and `final_rotation_z` variables to customize the animation"
    },
    {
        "Text Input": "A cube jumps up and lands.",
        "Blender Script": "To create an animation in Blender using Python where a cube jumps up and lands, you'll need to use Blender's built-in scripting capabilities. Here\u2019s a basic script that automates this animation process:\n\n1. **Setup Blender Environment**: Make sure you have a default Blender scene with a single camera and a light source.\n\n2. **Python Script**: Open Blender\u2019s text editor and paste the following script. This script will programmatically create a cube, set up keyframes to animate the jump, and adjust the timeline:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncube = bpy.context.active_object\n\n# Set frame start and end\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 50\n\n# Define jump keyframes\nkeyframes = {\n    0: 1,   # Initial position\n    10: 4,  # Highest jump point\n    20: 1,  # Landing point\n}\n\n# Insert keyframes\nfor frame, z_loc in keyframes.items():\n    bpy.context.scene.frame_set(frame)\n    cube.location = (0, 0, z_loc)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set interpolation to make the motion smooth: linear by default, so we change to BEZIER for ease-in-out effect\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\nprint(\"Jump animation created successfully!\")\n\n```\n\n3. **Run the Script**: Click the \u201cRun Script\u201d button in Blender\u2019s text editor.\n\n4. **Playback the Animation**: Use the timeline controls to play back your animation and see the cube jump and land.\n\n**Explanation**:\n\n- **Create a Cube**: We start by ensuring any existing meshes are deleted, then add a new cube at a specific location.\n  \n- **Setting up Keyframes**: We define the keyframes for the height (`z` location) to simulate a jump:\n  - Frame 0: Start position on the ground.\n  - Frame 10: The cube reaches its"
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "To create a Blender Python script that makes a cube move in a circular path, you can use the following script. This script will create a cube and animate it along a circular path using keyframes.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, 0, 0))\ncube = bpy.context.object\n\n# Define parameters for circular motion\ncenter_x, center_y, center_z = 0, 0, 0  # Center of the circle\nradius = 2                              # Radius of the circle\nnum_frames = 100                         # Number of frames for a full circle\nangle_step = (2 * math.pi) / num_frames  # Angle step per frame\n\n# Animate the cube along a circular path\nfor frame in range(num_frames + 1):\n    # Calculate angle and position\n    angle = frame * angle_step\n    x = center_x + radius * math.cos(angle)\n    y = center_y + radius * math.sin(angle)\n    z = center_z\n\n    # Set the frame number\n    bpy.context.scene.frame_set(frame)\n\n    # Update cube location\n    cube.location = (x, y, z)\n\n    # Insert keyframe for location\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = num_frames\n\nprint(\"Cube circular path animation complete.\")\n```\n\n### Explanation:\n- **Clearing the Scene:** First, it deletes any existing objects in the scene.\n- **Creating a Cube:** A cube is created with an initial position.\n- **Setting Parameters:** The center and radius of the circular path are set. The total number of frames for one complete circular motion is defined.\n- **Animating the Cube:**\n  - For each frame, the angle is calculated.\n  - The X and Y positions are computed using trigonometric functions to create circular motion.\n  - The Z position remains constant, keeping the cube on a flat circular path.\n  - The cube's location is updated, and a keyframe is inserted for that frame.\n- **Setting Animation Length:** The end frame of the animation is set to the total number of frames.\n\nTo run this script, simply paste it into"
    },
    {
        "Text Input": "A monkey performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect with a monkey (Suzanne) in Blender using Python, you can write a script that animates the Z-axis location to simulate the bouncing. Here is a simple script to achieve this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects and add a new monkey\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 1))\nmonkey = bpy.context.object\nmonkey.name = 'BouncingMonkey'\n\n# Set up animation parameters\nframe_start = 1\nframe_end = 100\nbounces = 5\namplitude = 2\n\n# Calculate bounce frequency\nfrequency = bounces / (frame_end - frame_start)\n\n# Set keyframes for bouncing effect\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the bouncing effect using a sine wave\n    z_location = amplitude * abs(math.sin(2 * math.pi * frequency * (frame - frame_start)))\n    \n    # Set the location of the monkey\n    monkey.location.z = z_location\n    \n    # Insert keyframe for location\n    monkey.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the scene's end frame\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set the interpolation type to linear for a more consistent bounce\nfor fc in monkey.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Bouncing animation applied to the monkey.\")\n```\n\n### How the Script Works:\n1. **Object Setup**: It first clears any mesh objects, then adds a new monkey mesh to the scene.\n2. **Animation Parameters**: Sets up key animation parameters, such as the number of frames, the number of bounces, and the bounce amplitude.\n3. **Keyframes**: For each frame in the specified range, it calculates the Z-location using a sine wave to simulate bouncing. This location is then keyframed.\n4. **Linear Interpolation**: The script optionally sets the interpolation type of the keyframes to 'LINEAR' for a more uniform bounce effect.\n5. **Execution**: Running this script in Blender's scripting editor will create"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a torus oscillate in a sine wave, you need to manipulate its location over time using a sine function. This can be accomplished using Blender's scripting capabilities. Below is an example script that animates a torus to move up and down like a sine wave.\n\n```python\nimport bpy\nimport math\n\ndef create_torus():\n    # Add a torus object\n    bpy.ops.mesh.primitive_torus_add()\n    torus = bpy.context.active_object\n    \n    return torus\n\ndef animate_torus(torus, frames=250, amplitude=1.0, frequency=1.0):\n    # Set the keyframe at frame 1\n    bpy.context.scene.frame_set(1)\n    torus.location.z = amplitude * math.sin(frequency * 0)\n    torus.keyframe_insert(data_path=\"location\", index=2)  # z-axis\n\n    # Animate through the frames\n    for frame in range(1, frames + 1):\n        bpy.context.scene.frame_set(frame)\n        time = frame / bpy.context.scene.render.fps  # Convert frame to time\n        # Calculate the new z position using a sine wave\n        z_location = amplitude * math.sin(frequency * time * 2 * math.pi)\n        torus.location.z = z_location\n        # Insert keyframe\n        torus.keyframe_insert(data_path=\"location\", index=2)  # z-axis\n\ndef main():\n    # Set the scene/frame settings\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 250  # Total number of frames\n    bpy.context.scene.render.fps = 24  # Frames per second\n\n    # Create a torus\n    torus = create_torus()\n    \n    # Animate the torus\n    animate_torus(torus, frames=250, amplitude=1.0, frequency=1.0)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nInstructions to use the script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text file within the Text Editor.\n3. Copy and paste the above script into the text file.\n4. Run the script by clicking the \"Run Script\" button.\n\nThe script performs the following actions:\n- Adds a torus object to the scene.\n- Sets up an animation that makes the torus oscillate vertically in a"
    },
    {
        "Text Input": "A cone performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cone in Blender using Python, you can use the Blender API to animate the cone's position along the Z-axis. Below is a script that sets up a simple bouncing animation for a cone:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.active_object\n\n# Set keyframe intervals\nframe_start = 1\nframe_end = 50\n\n# Number of bounces\nbounces = 5\n\n# Animate the cone to bounce\nfor bounce in range(bounces):\n    # Calculate the frame where the cone should be at its peak\n    peak_frame = frame_start + (bounce * (frame_end - frame_start) // bounces)\n    bounce_frame = peak_frame + (frame_end - frame_start) // (bounces * 2)\n\n    # Keyframe at the peak\n    cone.location.z = 5\n    cone.keyframe_insert(data_path=\"location\", index=2, frame=peak_frame)\n\n    # Keyframe at the bottom\n    cone.location.z = 1\n    cone.keyframe_insert(data_path=\"location\", index=2, frame=bounce_frame)\n\n# Set last frame to ensure the animation ends correctly\nbpy.context.scene.frame_end = frame_end\n\n# Set the interpolation to Linear for bounce effect\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\n```\n\n### Explanation:\n1. **Object Initialization**: First, the script deletes all existing objects in the scene and adds a cone.\n\n2. **Animation Setup**: Defines the start and end frames of the animation and the number of bounces. Each bounce is controlled by keyframes.\n\n3. **Keyframe Animation**: For each bounce, keyframes for the peak (highest point) and the bounce (lowest point, where the cone touches the \"ground\") are inserted.\n\n4. **Interpolation**: The keyframes are set to use linear interpolation to simulate a bouncing effect.\n\n5. **Playback**: The animation is set to"
    },
    {
        "Text Input": "A plane zooms in and out.",
        "Blender Script": "To achieve an animation where a plane zooms in and out in Blender using Python, you can create a script to automate this process. This script will create a plane, then set keyframes to animate its scaling over time to simulate the zoom in and out effect.\n\nHere\u2019s a basic Blender Python script to accomplish this:\n\n```python\nimport bpy\n\n# Deselect all objects first\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"ZoomingPlane\"\n\n# Set frame variables\nstart_frame = 1\nmid_frame = 50\nend_frame = 100\n\n# Insert keyframes for scale at the start (scale down)\nplane.scale = (0.5, 0.5, 0.5)\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Insert keyframes for scale at mid-frame (scale up - zoom in)\nplane.scale = (3.0, 3.0, 3.0)\nplane.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Insert keyframes for scale at end-frame (scale down - zoom out)\nplane.scale = (0.5, 0.5, 0.5)\nplane.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set up the timeline\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Zoom in and out animation setup complete.\")\n```\n\n### How this script works:\n\n1. **Create a Plane**: The script begins by clearing any active selections and then creates a plane in the scene. This plane will be named \"ZoomingPlane\".\n\n2. **Define Animation Keyframes**: Three keyframes are set:\n   - **Start Frame**: The plane is initially scaled down at frame 1.\n   - **Mid Frame**: The plane scales up to simulate zooming in by frame 50.\n   - **End Frame**: The plane scales back down to its original size by frame 100.\n\n3. **Set Timeline**: The script specifies the animation timeline to start at frame 1 and end at frame 100.\n\nThis script provides a simple framework to dynamically animate the zoom effect. You can customize the scale values"
    },
    {
        "Text Input": "A cone bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a cone bounce like a ball, we'll animate a cone object by scripting its movement up and down in Blender's 3D space. The script will set keyframes for the cone's location to create a bouncing effect.\n\nHere's a script to achieve this:\n\n```python\nimport bpy\n\n# Delete existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone at the origin\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 1))\ncone = bpy.context.object\n\n# Set the frame range for animation\nframe_start = 1\nframe_end = 100\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set up the bouncing parameters\nbounces = 5\nheight = 4\nbounce_decay = 0.7\nframes_per_bounce = (frame_end - frame_start) // bounces\n\n# Create bouncing animation\nfor bounce in range(bounces):\n    up_frame = frame_start + bounce * frames_per_bounce\n    down_frame = up_frame + frames_per_bounce // 2\n    \n    # Calculate the height for this bounce\n    bounce_height = height * (bounce_decay ** bounce)\n    \n    # Set keyframes for going up\n    cone.location.z = bounce_height\n    cone.keyframe_insert(data_path='location', index=2, frame=up_frame)\n    \n    # Set keyframes for coming down\n    cone.location.z = 0\n    cone.keyframe_insert(data_path='location', index=2, frame=down_frame)\n\n# Set interpolation to make it look like a bouncing ball\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Set up physics properties if desired\n# bpy.context.object.rigid_body = bpy.data.objects['Cone'].rigid_body\n# bpy.context.object.rigid_body.type = 'ACTIVE'\n# bpy.context.object.rigid_body.collision_shape = 'CONVEX_HULL'\n# bpy.context.object.rigid_body.restitution = 0.6\n\n# Set the timeline to start from the first frame\nbpy.context.scene.frame_set(frame_start)\n\nprint(\"Bouncing animation"
    },
    {
        "Text Input": "A plane orbits around another object.",
        "Blender Script": "To create a Blender Python script where a plane orbits around another object, we can use the following steps. This script will:\n\n1. Create a plane and another object (a sphere, for example).\n2. Set up the plane to orbit around the sphere using keyframe animation.\n\nHere's a script that achieves this:\n\n```python\nimport bpy\nimport math\nfrom math import radians\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a sphere for the plane to orbit around\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = \"Central Sphere\"\n\n# Add a plane that will orbit\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(3, 0, 0))\norbiting_plane = bpy.context.object\norbiting_plane.name = \"Orbiting Plane\"\n\n# Set the number of frames for a full orbit\nnum_frames = 120\nradius = 3\n\n# Set the initial keyframe\norbiting_plane.location = (radius, 0, 0)\norbiting_plane.keyframe_insert(data_path=\"location\", frame=1)\n\n# Create the orbit path\nfor frame in range(1, num_frames + 1):\n    angle = (frame / num_frames) * 2 * math.pi  # Calculate the angle for this frame\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    orbiting_plane.location = (x, y, 0)\n    orbiting_plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the animation to loop (or cycle)\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = num_frames\n\n# Switch to animation playback mode, so the effect can be viewed easily\nbpy.ops.screen.animation_play()\n\nprint(\"Animation setup complete. The plane should orbit the sphere.\")\n```\n\n### Instructions for using this script:\n\n1. Open Blender and go to the scripting tab.\n2. Create a new text block and paste the script above.\n3. Run the script by clicking the \"Run Script\" button.\n\n### Customization:\n- You can adjust the `radius` variable to change how far the plane is from the sphere while orbiting.\n- Change `num_frames` to speed up or"
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a cube orbit around another object, we can use basic animation techniques to set keyframes for the cube along a circular path. The following script sets up a scene with a stationary object in the center and a cube that orbits around it.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a central object (you can change the type or keep as empty)\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\ncentral_object = bpy.context.active_object\ncentral_object.name = \"Central Object\"\n\n# Add a cube to orbit around the central object\nbpy.ops.mesh.primitive_cube_add(location=(2, 0, 0))\ncube = bpy.context.active_object\ncube.name = \"Orbiting Cube\"\n\n# Define orbit parameters\norbit_radius = 2.0\norbit_duration = 120  # Number of frames for a complete orbit\ncenter_location = central_object.location\n\n# Insert keyframes to create orbital motion\nfor frame in range(orbit_duration + 1):\n    angle = (2 * math.pi * frame) / orbit_duration  # Complete revolution in 360 degrees\n    x = center_location.x + orbit_radius * math.cos(angle)\n    y = center_location.y + orbit_radius * math.sin(angle)\n    z = 0  # Orbit in the XY plane\n\n    # Set cube location\n    cube.location = (x, y, z)\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = orbit_duration\n\n# Set the animation start frame\nbpy.context.scene.frame_start = 0\n\n# Optional: Set up a camera for better visualization\nbpy.ops.object.camera_add(location=(5, -5, 5))\ncamera = bpy.context.active_object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n\n# To view the result:\n# 1. Switch to the Animation workspace.\n# 2. Use the timeline to play the animation.\n```\n\n### Instructions:\n\n1. **Run the Script**: Paste the script into a Blender text editor and run it. This will create a new scene with a central empty object and a cube that or"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a torus expand and shrink, you can make use of Blender's Python API to animate the scaling of a torus over time. Below is an example script that achieves this effect using keyframes.\n\n```python\nimport bpy\nimport math\n\n# Function to create and animate the torus\ndef create_animated_torus():\n    # Delete existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Add a torus\n    bpy.ops.mesh.primitive_torus_add()\n    torus = bpy.context.active_object\n\n    # Set initial scale\n    initial_scale = (1, 1, 1)\n    max_scale = (2, 2, 2)\n    min_scale = (0.5, 0.5, 0.5)\n    \n    # Set timeline end frame\n    bpy.context.scene.frame_end = 200\n\n    # Define expanding and contracting keyframes\n    frame_number = 1\n    torus.scale = initial_scale\n    torus.keyframe_insert(data_path='scale', frame=frame_number)\n\n    # Expand over 50 frames\n    frame_number += 50\n    torus.scale = max_scale\n    torus.keyframe_insert(data_path='scale', frame=frame_number)\n\n    # Contract over 50 frames\n    frame_number += 50\n    torus.scale = min_scale\n    torus.keyframe_insert(data_path='scale', frame=frame_number)\n\n    # Return to initial scale over 50 frames\n    frame_number += 50\n    torus.scale = initial_scale\n    torus.keyframe_insert(data_path='scale', frame=frame_number)\n\n    # Loop the animation\n    bpy.ops.screen.animation_play()\n\n# Run the function\ncreate_animated_torus()\n```\n\nThis script will:\n1. Clear any existing mesh objects in the Blender scene.\n2. Add a new torus to the scene.\n3. Animate the torus to:\n   - Expand from its initial `scale` to a `max_scale` over 50 frames.\n   - Contract to a `min_scale` over the next 50 frames.\n   - Return to the initial scale over the final 50 frames, completing a 150-frame loop.\n4. It sets a loop range, allowing you to continuously play the animation between frame "
    },
    {
        "Text Input": "A cone performs a bouncing effect.",
        "Blender Script": "To create a bouncing cone effect in Blender using Python, you'll need to use Blender's Python API. This script will create a cone and animate it moving up and down to simulate a bouncing effect. Make sure you have Blender open and are running the script in Blender's scripting environment.\n\nHere's a basic script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.active_object\n\n# Set the number of bounces and height parameters\nbounces = 10\nbounce_height = 2.0\nframe_rate = 24\nbounce_frames = 15\n\n# Animation start frame\nstart_frame = 1\n\n# Create the bouncing animation\nfor i in range(bounces):\n    # Calculate frames for the current bounce\n    start_up = start_frame + i * (2 * bounce_frames)\n    start_down = start_up + bounce_frames\n    \n    # Keyframe position at the baseline\n    cone.location.z = 0\n    cone.keyframe_insert(data_path=\"location\", frame=start_up)\n    \n    # Keyframe position at the peak of the bounce\n    cone.location.z = bounce_height\n    cone.keyframe_insert(data_path=\"location\", frame=(start_up + bounce_frames // 2))\n    \n    # Keyframe position returning to the baseline\n    cone.location.z = 0\n    cone.keyframe_insert(data_path=\"location\", frame=start_down)\n\n# Setting up the scene to play the whole animation smoothly\nend_frame = start_frame + (bounces * 2 * bounce_frames)\nbpy.context.scene.frame_end = end_frame\n\n# Optional: Set shading to smooth\nbpy.ops.object.shade_smooth()\n\n# Optional: Adjust timeline view\nfor area in bpy.context.screen.areas:\n    if area.type == 'DOPESHEET_EDITOR':\n        area.spaces[0].action = bpy.data.actions[0]\n    if area.type == 'TIMELINE':\n        area.spaces[0].clip_end = end_frame\n\nprint(\"Bouncing animation created successfully!\")\n```\n\n### Instructions\n\n1. **Open Blender**: Launch Blender and go to the"
    },
    {
        "Text Input": "A monkey spins while floating.",
        "Blender Script": "To create a Blender Python script where a monkey mesh spins while floating, we'll use Blender's scripting capabilities. The following script will create a Monkey (Suzanne) mesh in the scene, and use an animation to make it spin while appearing to float.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create Monkey (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 1))\n\n# Get the reference to the newly created monkey\nmonkey = bpy.context.active_object\nmonkey.name = 'FloatingSpinningMonkey'\n\n# Set the timeline length\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n\n# Insert keyframes for spinning animation\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\nmonkey.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Insert keyframes for floating animation\nmonkey.location = (0, 0, 1)\nmonkey.keyframe_insert(data_path=\"location\", frame=1)\n\nmonkey.location = (0, 0, 1.5)\nmonkey.keyframe_insert(data_path=\"location\", frame=60)\n\nmonkey.location = (0, 0, 1)\nmonkey.keyframe_insert(data_path=\"location\", frame=120)\n\n# Set interpolation to linear for constant spinning\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Monkey animation setup completed.\")\n```\n\n### Explanation:\n\n1. **Clear the Scene**: We begin by deselecting all objects, selecting only meshes, and deleting them to ensure we start with a clean slate.\n\n2. **Add Suzanne**: We add Blender's default Monkey mesh (`Suzanne`) at a specified location and size.\n\n3. **Set Animation Frames**: We define the animation to range from frame 1 to frame 120.\n\n4. **Spinning Animation**: At frame 1, the monkey's rotation is"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a sphere in Blender and animates it to expand and shrink repeatedly.\n\n```python\nimport bpy\n\n# Function to clear existing mesh and objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Invoke the clear function to start fresh\nclear_scene()\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.0, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"ExpandingShrinkingSphere\"\n\n# Set timeline frame start and end points\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Insert keyframes for the scale animation\nframe_start = bpy.context.scene.frame_start\nframe_end = bpy.context.scene.frame_end\nexpansion_duration = (frame_end - frame_start) // 2\n\n# Initial Scale - frame 1\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n# Expanded Scale - frame expansion_duration\nsphere.scale = (2, 2, 2)\nsphere.keyframe_insert(data_path=\"scale\", frame=frame_start + expansion_duration)\n\n# Back to Initial Scale - frame frame_end\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set interpolation type to linear for steady expansion/shrink\nfor fcurve in bpy.context.active_object.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Sphere expansion and shrink animation has been set up successfully!\")\n```\n\n### Instructions:\n\n1. Open Blender.\n2. Go to the Scripting workspace or open a new text editor window.\n3. Copy and paste the above script into the text editor.\n4. Click on `Run Script` in the text editor.\n5. After running the script, press `Space` or use the Timeline to observe the animation of the sphere expanding and shrinking.\n\n### Explanation:\n\n- **Clearing Scene**: The script starts by clearing the current scene to ensure no objects interfere with the animation we create.\n- **Creating a Sphere**: A UV sphere is added to the scene at the origin.\n- **Setting up Animation**: We configure the animation to occur"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a cube rotate 360 degrees, you can use the Blender Python API. Below is a script that you can run inside Blender's scripting editor to animate a cube rotation:\n\n```python\nimport bpy\n\n# Delete default cube, if any\nif \"Cube\" in bpy.data.objects:\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set keyframes for rotation\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\ncube.rotation_euler = (0, 0, 2 * 3.14159)  # Rotate 360 degrees around Z-axis\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=250)\n\n# Set scene properties\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Set the animation to play in cycles for continuous rotation\ncycles_mod = cube.animation_data.action.fcurves[0].modifiers.new(type='CYCLES')\ncycles_mod.mode_before = 'REPEAT'\ncycles_mod.mode_after = 'REPEAT'\n\ncycles_mod = cube.animation_data.action.fcurves[1].modifiers.new(type='CYCLES')\ncycles_mod.mode_before = 'REPEAT'\ncycles_mod.mode_after = 'REPEAT'\n\ncycles_mod = cube.animation_data.action.fcurves[2].modifiers.new(type='CYCLES')\ncycles_mod.mode_before = 'REPEAT'\ncycles_mod.mode_after = 'REPEAT'\n```\n\n### Explanation:\n- **Deleting existing cube**: The script first checks if there is already a default cube and deletes it.\n- **Creating a new cube**: A new cube is added to the scene.\n- **Setting keyframes**: The cube's rotation on the Z-axis is changed from 0 to 360 degrees, and keyframes are set at frames 1 and 250.\n- **Scene properties**: The frame range is set, with the animation starting at frame 1 and ending at frame 250.\n- **Cyclic animation**: The fcurve modifiers are used to make the rotation repeat continuously by setting the modifiers to '"
    },
    {
        "Text Input": "A cube moves diagonally upwards.",
        "Blender Script": "Below is a Blender Python script that animates a cube moving diagonally upwards. This script assumes you have Blender open and ready to execute Python scripts.\n\n```python\nimport bpy\n\n# Delete all existing objects for a clean start\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Define keyframe positions for the cube to move diagonally upwards\nstart_location = (0, 0, 0)\nend_location = (10, 10, 10)\n\n# Insert the first keyframe for the starting location\ncube.location = start_location\ncube.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Insert the last keyframe for the end location\ncube.location = end_location\ncube.keyframe_insert(data_path=\"location\", frame=end_frame)\n\nprint(\"Animation setup complete: Cube moves diagonally upwards.\")\n```\n\nHow to use this script:\n1. Open Blender.\n2. Open a new scripting workspace.\n3. Copy and paste the script into a new text block.\n4. Run the script.\n\nThe script will create a new cube and animate it moving from `(0, 0, 0)` to `(10, 10, 10)` over 100 frames, making it appear to move diagonally upwards across the 3D space. Adjust the `end_location` and `end_frame` values if you want to customize the direction, distance, or duration of the animation."
    },
    {
        "Text Input": "A cylinder wiggles side to side.",
        "Blender Script": "To create a Blender Python script where a cylinder wiggles side to side, you can make use of keyframes and manipulate the object's location properties over time. Below is a Blender Python script that automates the creation of such an animation.\n\n```python\nimport bpy\nimport math\n\n# Delete the default objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set the number of frames for the animation\ntotal_frames = 100  # Total number of frames for the animation\nwiggle_amplitude = 2  # Amplitude of wiggle\nwiggle_frequency = 0.1  # Frequency of wiggle\n\n# Set the animation keyframes\nfor frame in range(total_frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate wiggle position using a sine wave\n    x_position = wiggle_amplitude * math.sin(wiggle_frequency * frame)\n    \n    # Set the cylinder's location\n    cylinder.location.x = x_position\n    \n    # Insert a keyframe for the cylinder's location\n    cylinder.keyframe_insert(data_path=\"location\", index=0)  # index=0 corresponds to the x-axis\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = total_frames\n\n# Shading: Set the viewport shading to material preview\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        area.spaces[0].shading.type = 'MATERIAL'\n\nprint(\"Cylinder wiggle animation created.\")\n```\n\n### How to Use the Script\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new script in the text editor and copy the above code into the editor panel.\n3. Run the script by hitting \"Run Script\" or pressing `Alt` + `P` when focused on the text editor pane.\n4. The script will delete the default objects, create a new cylinder, and animate it wiggling side to side.\n\n### Adjustments\n- Modify `total_frames` to change the length of the animation.\n- `wiggle_amplitude` determines how far the cylinder moves side to side.\n- Adjust the `wiggle_frequency` to"
    },
    {
        "Text Input": "A cone spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cone spin and scale up, you'll need to use the Blender Python API to automate the animation of these properties. Here is a simple script for this purpose:\n\n```python\nimport bpy\n\n# Delete all existing objects first\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the initial scale and rotation\ncone.scale = (1, 1, 1)\ncone.rotation_euler = (0, 0, 0)\n\n# Number of frames over which the animation will occur\nframe_start = 1\nframe_end = 50\nscale_factor = 3  # Final scale multiplier\n\n# Insert initial scale and rotation keyframes\ncone.keyframe_insert(data_path=\"scale\", frame=frame_start)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Set final scale and rotation\ncone.scale = (scale_factor, scale_factor, scale_factor)\ncone.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\n\n# Insert final scale and rotation keyframes\ncone.keyframe_insert(data_path=\"scale\", frame=frame_end)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation method to linear\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation complete. Check the timeline to see the effect!\")\n```\n\n### Explanation:\n- **Object Creation**: The script begins by deleting any existing objects in the scene and adds a cone.\n- **Initial Setup**: Sets the starting scale and rotation of the cone.\n- **Keyframes**: The script sets keyframes to define the starting and ending conditions of the animation:\n  - **Start**: At frame 1, the cone's scale is set to `1` and rotation to `0`.\n  - **End**: At frame 50, the cone\u2019s scale grows to 3 times its original size, and it completes a full rotation (360 degrees or `6.28319` radians).\n- **Linear Interpolation**"
    },
    {
        "Text Input": "A monkey moves from left to right.",
        "Blender Script": "To create an animation in Blender where a monkey (specifically a Suzanne mesh) moves from left to right, we can write a Python script that leverages Blender's scripting capabilities. This script will add a Suzanne (the Blender monkey head), then animate its movement along the X-axis from a starting point to an endpoint over a specified number of frames.\n\nHere's a Python script to achieve that:\n\n```python\nimport bpy\n\ndef create_monkey():\n    # Clear existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n    # Add a monkey (Suzanne)\n    bpy.ops.mesh.primitive_monkey_add(location=(-5, 0, 0))  # Start from the left\n    monkey = bpy.context.active_object\n    monkey.name = \"MovingMonkey\"\n\n    return monkey\n\ndef animate_monkey(moving_monkey, start_frame, end_frame, start_location, end_location):\n    # Set the start location and insert a keyframe\n    moving_monkey.location = start_location\n    moving_monkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n    # Set the end location and insert a keyframe\n    moving_monkey.location = end_location\n    moving_monkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\ndef main():\n    # Set the frame range\n    start_frame = 1\n    end_frame = 100\n\n    # Create the monkey and animate it\n    moving_monkey = create_monkey()\n    animate_monkey(moving_monkey, start_frame, end_frame, start_location=(-5, 0, 0), end_location=(5, 0, 0))\n\n    # Set the scene frame range\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- **create_monkey()**: Clears the existing objects in the scene and adds a Suzanne mesh at a starting position on the left.\n- **animate_monkey()**: Sets keyframes for the monkey's movement along the X-axis. The monkey starts at `(-5, 0, 0)` and moves to `(5, 0, 0)`.\n- **main()**: Defines the frame range for the animation and calls the necessary functions to create and animate the monkey.\n\n### How to Run"
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "To make a cube move in a circular path using Blender's Python API, you can create an animation by generating keyframes that dictate the cube's location at various points in time. Below is a script that performs such an animation, assuming you have Blender and the required environment set up:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set parameters for the circular path\nradius = 5\nnumber_of_frames = 100\nfps = 24  # frames per second\nduration = int(number_of_frames / fps)\nangle_increment = (2 * math.pi) / (number_of_frames - 1)\n\n# Set the initial frame\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = number_of_frames\n\n# Animate the cube in a circular path\nfor frame in range(number_of_frames):\n    angle = frame * angle_increment\n    x = math.cos(angle) * radius\n    y = math.sin(angle) * radius\n    z = 0  # Keeping the movement in the XY plane\n\n    bpy.context.scene.frame_set(frame)\n    cube.location = (x, y, z)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set up the animation playback settings\nbpy.context.scene.render.fps = fps\nbpy.ops.screen.animation_play()\n\nprint(\"Animation complete: The cube moves in a circular path.\")\n```\n\n### Details:\n\n- **Cube Creation**: The script starts by creating a cube at the origin.\n- **Circular Path Configuration**: The cube will move in a circular path with a specified radius. The animation covers `number_of_frames` frames.\n- **Animation**: The script calculates the position of the cube at each frame using basic trigonometric functions to generate a circular path. It inserts keyframes at each calculated position.\n- **Playback Setup**: The animation playback speed is set up using `fps`. The animation starts playing back the circular movement of the cube as soon as the script runs.\n  \nTo run the script, open Blender, switch to the scripting workspace, paste this script into a new text block, and execute it. Your cube"
    },
    {
        "Text Input": "A sphere rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a sphere object 360 degrees, you need to use the `bpy` library, which allows scripting and automation in Blender. Below is an example of how you might write a script to create a sphere and rotate it around the Z-axis by 360 degrees:\n\n```python\nimport bpy\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new UV Sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, segments=32, ring_count=16, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set up rotation animation\n# Remove existing keyframes first\nsphere.animation_data_clear()\n\n# Set the frame range in the timeline\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Insert a keyframe for the start of the rotation (0 degrees)\nsphere.rotation_euler[2] = 0  # Euler Z rotation\nsphere.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Insert a keyframe for the end of the rotation (360 degrees or 6.28319 radians)\nsphere.rotation_euler[2] = 6.28319  # Euler Z rotation (360 degrees in radians)\nsphere.keyframe_insert(data_path='rotation_euler', frame=100)\n\n# Set the interpolation type to linear for constant rotation speed\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Sphere rotation animation setup complete.\")\n```\n\n### Explanation:\n\n1. **Clear Scene**: The script starts by deleting all existing objects in the Blender scene to ensure a clean slate.\n\n2. **Creating a Sphere**: It adds a UV sphere to the scene at the origin `(0, 0, 0)`.\n\n3. **Animating the Sphere**: \n   - It clears existing animation data on the sphere (if any).\n   - The timeline frames are set from 1 to 100.\n   - Two keyframes are inserted: \n     - At frame 1, the Z rotation is set to 0 radians.\n     - At frame 100, the Z rotation is set to 6.28319 radians, which corresponds to 360 degrees.\n"
    },
    {
        "Text Input": "A monkey spins and scales up.",
        "Blender Script": "To achieve the effect where a monkey mesh (Suzanne) spins and scales up in Blender using a Python script, you can create a script that animates these transformations. Below is a script to perform this action:\n\n```python\nimport bpy\n\n# Ensure we start with a fresh scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the initial scale and rotation keyframes\nmonkey.scale = (1, 1, 1)\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"scale\", frame=1)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set the final scale and rotation keyframes\n# Scaling up 3 times and rotating 360 degrees around the Z axis\nmonkey.scale = (3, 3, 3)\nmonkey.rotation_euler = (0, 0, 2 * 3.14159265)  # 360 degrees in radians\nmonkey.keyframe_insert(data_path=\"scale\", frame=60)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n\n# Set the interpolation type for smoother transitions\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n```\n\nExplanation:\n- **Create the Scene**: We start by resetting the scene to ensure there are no pre-existing objects.\n- **Add the Monkey Object**: Use `bpy.ops.mesh.primitive_monkey_add` to add Suzanne to the scene.\n- **Initial Keyframes (Frame 1)**: Set keyframes at frame 1 for the initial state; scale as 1 and no rotation.\n- **Final Keyframes (Frame 60)**: Set keyframes at frame 60 for the final state, where the scale becomes 3 and it spins 360 degrees.\n- **Interpolation Type**: Adjust the interpolation for smoother animations using 'BEZIER'.\n\nThis script is meant to be run in the scripting editor within Blender. Play the animation to see the monkey spin and scale up over the course of 60 frames. Adjust the frame numbers and scales as needed for different speeds or scales"
    },
    {
        "Text Input": "A sphere bounces like a ball.",
        "Blender Script": "To create an animation in Blender where a sphere bounces like a ball, you can use the following Python script. This will set up a simple animation for a bouncing ball effect using keyframes. Make sure to run this script in Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Clear existing scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 5))\nball = bpy.context.object\n\n# Set renderer to 'CYCLES'\nbpy.context.scene.render.engine = 'CYCLES'\n\n# Create a bouncing effect\n# Variables for the bouncing animation\nstart_frame = 1\nend_frame = 100\nbounce_height = 5\nbounce_dampening = 0.8\nground_y = 1\n\n# Set animation keyframes\nfor bounce in range(0, 10):  # 10 bounces\n    peak_frame = start_frame + bounce * 10\n    \n    # Calculate the height of each bounce\n    current_bounce_height = bounce_height * (bounce_dampening ** bounce)\n    \n    # Calculate position\n    peak_position = ground_y + current_bounce_height\n    \n    # Set the keyframes for the peak position (up)\n    ball.location = (0, 0, peak_position)\n    ball.keyframe_insert(data_path=\"location\", frame=peak_frame)\n    \n    # Set the keyframe for the ground position (right before hitting the ground)\n    ball.location = (0, 0, ground_y)\n    ball.keyframe_insert(data_path=\"location\", frame=peak_frame + 5)\n\n# Set smoothing on the location keyframes\nfor fcurve in ball.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Set frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Animation setup complete.\")\n```\n\n### How to Use This Script:\n\n1. **Open Blender** and switch to the Scripting workspace.\n2. **Create a new text file** within Blender text editor and paste the script above.\n3. **Run the script** by clicking the \"Run Script\" button in the text editor.\n4. Switch to the **Timeline window"
    },
    {
        "Text Input": "A monkey wiggles side to side.",
        "Blender Script": "To create a script in Blender that makes a monkey object (Suzanne) wiggle side to side, you will need to animate the rotation of the monkey. Here's a simple script to achieve this in Blender using Python:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add the monkey object\nbpy.ops.mesh.primitive_monkey_add(size=2)  # Add a monkey mesh object\nmonkey = bpy.context.active_object  # Get the active object which is the monkey\n\n# Set the location of the monkey\nmonkey.location = (0, 0, 0)\n\n# Choose the number of wiggles, duration, and amplitude of rotation\nnum_wiggles = 5\nduration = 120  # Total number of frames for the animation\namplitude = math.radians(15)  # Amplitude in radians, e.g., 15 degrees\n\n# Insert keyframes for the wiggle animation\nframe_number = 0\nbpy.context.scene.frame_end = duration\n\nfor i in range(num_wiggles * 2 + 1):\n    angle = amplitude if i % 2 == 0 else -amplitude\n    monkey.rotation_euler = (0, 0, angle)\n\n    # Insert keyframe for rotation\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=frame_number)\n    \n    # Move to the next keyframe\n    frame_number += duration / (num_wiggles * 2)\n\n# Set interpolation type to linear for all keyframes\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation script complete.\")\n```\n\nTo use this script:\n\n1. Open Blender.\n2. Go to the Scripting Workspace.\n3. Create a new text block and paste this script into it.\n4. Click the \"Run Script\" button to execute.\n\nThe script deletes any existing mesh objects, creates a new monkey head at the origin, and animates it to wiggle side to side over the specified number of frames with the given amplitude and number of wiggles. Adjust `num_wiggles`, `duration`, and `amplitude` as desired to change the behavior of the wiggling"
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a plane moving diagonally upwards, you'll need to manipulate the location data of the plane object over time. This script creates a plane, sets up the animation frames, and makes the plane move diagonally upwards.\n\n```python\nimport bpy\n\ndef create_and_animate_plane():\n    # Delete all existing objects to start clean\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a new plane\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.active_object\n\n    # Number of frames for the animation\n    total_frames = 100\n\n    # Starting and ending location of the plane for diagonal movement\n    start_location = (0, 0, 0)\n    end_location = (10, 10, 10)\n\n    # Insert keyframe for the starting location\n    plane.location = start_location\n    plane.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Insert keyframe for the ending location\n    plane.location = end_location\n    plane.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n    # Set the timeline frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = total_frames\n\n    # Optionally, set up interpolation to linear for consistent speed\n    for fcurve in plane.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\ncreate_and_animate_plane()\n```\n\nThis script does the following:\n\n- Deletes any existing mesh objects to start with a clean scene.\n- Adds a new plane object at the origin (0, 0, 0).\n- Sets the animation to move the plane diagonally from (0, 0, 0) to (10, 10, 10) over 100 frames.\n- Inserts keyframes for the plane's starting and ending locations.\n- Sets the interpolation to 'LINEAR' to ensure that the movement is at a constant speed.\n\nTo run this script, open Blender, switch to the \"Scripting\" workspace, and paste the script into a new text block. Then, click \"Run Script\" to execute it. After running the script, you"
    },
    {
        "Text Input": "A monkey flips upside down.",
        "Blender Script": "To flip a monkey (Suzanne) upside down in Blender using a Python script, you need to perform the following steps:\n\n1. Make sure a monkey mesh (Suzanne) is added to the scene.\n2. Use a Python script to rotate the monkey 180 degrees on the X-axis.\n\nHere's the script to do that in Blender:\n\n```python\nimport bpy\nimport math\n\n# Ensure no objects are selected\nbpy.ops.object.select_all(action='DESELECT')\n\n# Add a monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\n\n# Get the active object, which should be the newly added monkey\nmonkey = bpy.context.active_object\n\n# Select the monkey to ensure it is active for transformations\nmonkey.select_set(True)\n\n# Flip the monkey upside down by rotating 180 degrees around the X-axis\nmonkey.rotation_euler[0] = math.radians(180)\n\n# Optionally, update the scene to reflect changes\nbpy.context.view_layer.update()\n\nprint(\"The monkey has been flipped upside down.\")\n```\n\n### Steps to Run the Script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the Text Editor.\n3. Copy and paste the script into the Text Editor.\n4. Click on \"Run Script\" to execute the code.\n\nThis will add a new Suzanne mesh to your scene and flip it upside down by rotating it around the X-axis by 180 degrees. The monkey will appear inverted in the 3D viewport."
    },
    {
        "Text Input": "A plane tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a plane tilting back and forth, follow these steps. This script will create a simple plane and add a tilt animation using keyframes.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"TiltingPlane\"\n\n# Set the animation duration and tilt angle\nframe_start = 1\nframe_end = 120\ntilt_angle = 30  # Tilt 30 degrees back and forth\n\n# Set the scene frames\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Define keyframes for the tilt animation\nframes = [\n    (frame_start, 0),  # Start with no tilt\n    (frame_start + 30, tilt_angle),  # Tilt to 30 degrees\n    (frame_start + 60, -tilt_angle),  # Tilt to -30 degrees\n    (frame_end, 0)  # Return to no tilt\n]\n\n# Insert keyframes for the rotation of the plane\nplane.rotation_mode = 'XYZ'\nfor frame, angle in frames:\n    bpy.context.scene.frame_set(frame)\n    plane.rotation_euler = (angle * 3.14159 / 180, 0, 0)  # Convert degrees to radians for X rotation\n    plane.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n# Ensure the animation is linear for smooth transition\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Plane tilt animation created successfully.\")\n```\n\n### Script Explanation:\n\n1. **Clear Existing Objects**: The script begins by removing any existing objects in the Blender scene to ensure it starts with a clean slate.\n\n2. **Create a Plane**: It adds a plane mesh primitive in the 3D viewport.\n\n3. **Define Animation Parameters**:\n   - **`frame_start`** and **`frame_end`** determine the animation duration.\n   - **`tilt_angle`** specifies the maximum tilt angle in degrees.\n\n4"
    },
    {
        "Text Input": "A torus spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a torus spin and scale up, you can use the following script. This script assumes you are running it in Blender's scripting environment. It adds a keyframe animation to make the torus rotate around its Z-axis and scale over a set time period.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set the initial scale and rotation\ntorus.scale = (1, 1, 1)\ntorus.rotation_euler = (0, 0, 0)\n\n# Insert initial keyframes for scale and rotation at frame 1\ntorus.keyframe_insert(data_path=\"scale\", frame=1)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Define the end frame for the animation\nend_frame = 250\n\n# Set the final scale and rotation\ntorus.scale = (2, 2, 2)  # Scale up to twice the size\ntorus.rotation_euler = (0, 0, 6.28319)  # Spin 360 degrees (2 * pi radians)\n\n# Insert final keyframes for scale and rotation at end_frame\ntorus.keyframe_insert(data_path=\"scale\", frame=end_frame)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation type to linear for a consistent scaling and spinning effect\nfor fcurve in torus.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Torus animation setup complete.\")\n```\n\n### Explanation:\n- **Clear Previous Objects**: The script first deletes any existing mesh objects to start with a clean scene.\n- **Add Torus**: It uses `bpy.ops.mesh.primitive_torus_add()` to add a torus to the scene.\n- **Initial Keyframe**: The initial scale and rotation keyframes are set at frame 1.\n- **Final Keyframe**: The final scale (doubled) and a complete rotation (360 degrees) keyframes are set at frame"
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cone sliding from top to bottom, we need to follow these general steps:\n\n1. Add a cone to the scene.\n2. Set the initial position of the cone at the top.\n3. Create an animation that moves the cone downwards over time.\n\nBelow is a Python script that you can run in Blender's scripting editor:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, enter_editmode=False, align='WORLD', location=(0, 0, 5))\ncone = bpy.context.object\ncone.name = \"SlidingCone\"\n\n# Set the scene's frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\n\n# Insert the initial keyframe at the top position\ncone.location = (0, 0, 5)\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\n# Insert the final keyframe at the bottom position\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=50)\n\n# Set interpolation to linear\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optionally, set the viewport shading to rendered for better visibility\nbpy.context.space_data.shading.type = 'RENDERED'\n\nprint(\"Cone slide animation created!\")\n```\n\n## Instructions\n\n1. Open Blender and go to the \"Scripting\" workspace.\n2. Create a new Text block and paste the script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\nThis script will add a cone at a higher Z position and move it to a lower Z position over 50 frames while setting the keyframes and ensuring the animation interpolation is linear. You can adjust the `frame_end` and positions (initial and final) to customize the animation as per your needs."
    },
    {
        "Text Input": "A sphere performs a bouncing effect.",
        "Blender Script": "To create a bouncing sphere effect in Blender using a Python script, we need to set up the scene with a sphere, animate its movement along the Z-axis to simulate bouncing, and then render it. Here's a simple script to help you achieve that:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 5))\nsphere = bpy.context.object\nsphere.name = 'BouncingSphere'\n\n# Set up the frame range\nframe_start = 1\nframe_end = 100\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Keyframe the bouncing motion\nbounce_height = 5\nbounces = 3\nbounce_duration = (frame_end - frame_start) // bounces\n\n# Animate the bounce\nfor bounce in range(bounces + 1):\n    frame = frame_start + bounce * bounce_duration\n    z_pos = bounce_height if bounce % 2 == 0 else 0\n    \n    sphere.location.z = z_pos\n    sphere.keyframe_insert(data_path='location', index=2, frame=frame)\n\n# Set interpolation type to make the bounce effect more realistic\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'  # Default is 'BEZIER', setting is for clarity\n\n# Render settings\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"/tmp/bouncing_sphere_frame_\"\nbpy.ops.render.render(animation=True)\n\nprint(\"Bouncing sphere animation created and rendering to /tmp/\")\n\n```\n\n### How the Script Works:\n- **Object Creation**: The script starts by clearing the existing objects and then adds a UV sphere placed initially at a height of 5 units.\n- **Animation Setup**: A simple animation is set where the sphere's Z location is changed over several keyframes to create a bouncing effect. The sphere moves from the ground (z = 0) to a certain bounce height (z = 5).\n- **Keyframes**: Keyframes are inserted at specific frames to control the up and down motion of the sphere.\n-"
    },
    {
        "Text Input": "A plane moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a plane moving in a circular path, you can follow these steps. This script sets up a simple animation where a plane (mesh object) orbits around a circle. Here's how you can achieve this using Blender's Python API:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, location=(2, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"MovingPlane\"\n\n# Set the number of frames for the complete circular motion\nnum_frames = 250\n\n# Set animation parameters\nradius = 5\ncenter = (0, 0, 0)\n\n# Insert initial keyframe and animate the plane in a circular path\nfor frame in range(num_frames):\n    # Calculate location on circle\n    angle = (2 * math.pi * frame) / num_frames\n    x = center[0] + radius * math.cos(angle)\n    y = center[1] + radius * math.sin(angle)\n    plane.location = (x, y, center[2])\n    \n    # Insert keyframe for location\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = num_frames\n\n# Switch the scene timeline to the beginning\nbpy.context.scene.frame_set(1)\n```\n\nThis script performs the following tasks:\n1. Clears all existing objects in the scene.\n2. Adds a plane object.\n3. Animates this plane around a circle with a specified radius.\n4. Sets up keyframes along the circular path over a certain number of frames.\n\n### Usage\n1. Open Blender and go to the Scripting tab.\n2. Create a new text document and paste the script above.\n3. Run the script by clicking the \"Run Script\" button.\n\n### Explanation\n- The plane follows a circular path with a `radius` value which you can adjust.\n- The number of frames (`num_frames`) determines the speed of the animation; more frames mean slower movement.\n- The `frame_end` is set to ensure the animation loops back at the correct time.\n\nYou can adjust parameters like `radius`, `num_frames`, and initial `location` to customize your animation."
    },
    {
        "Text Input": "A plane expands and shrinks.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a plane by expanding and shrinking its scale over time. This script creates a plane in Blender and sets up a simple animation where the plane grows and then shrinks repeatedly.\n\n```python\nimport bpy\n\n# Function to clear existing objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Clear existing objects\nclear_scene()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"ExpandingShrinkingPlane\"\n\n# Set the initial scale\nplane.scale = (1, 1, 1)\n\n# Keyframe setup\nplane.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Expand to twice the size at frame 15\nplane.scale = (2, 2, 2)\nplane.keyframe_insert(data_path=\"scale\", frame=15)\n\n# Shrink back to original size at frame 30\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=30)\n\n# Infinite loop animation setup\nbpy.context.scene.frame_end = 30\nfor fcu in plane.animation_data.action.fcurves:\n    for kp in fcu.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nfcu.modifiers.new(type='CYCLES')\n\nprint(\"Animation setup completed. The plane will expand and shrink over time.\")\n```\n\n### How to Use:\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new script and paste the provided code into the text editor.\n3. Click on `Run Script` to execute the script.\n\nThis script will create a plane at the origin. The plane will expand to twice its size and then shrink back to its original size in a continuous loop. The animation cycle is set to last 30 frames, spanning 1 to 30, and then it loops due to the Cycles modifier applied to the keyframe data.\n\nRemember you can adjust the number of frames and scale values to get different speeds or sizes for the expansion and shrinking effect by altering the frame numbers and scale values in the script."
    },
    {
        "Text Input": "A torus spins and scales up.",
        "Blender Script": "Here's a Blender Python script that creates a torus and animates it to spin and scale up over time:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set initial scale and rotation\ntorus.scale = (1, 1, 1)\ntorus.rotation_euler = (0, 0, 0)\n\n# Set keyframes for scale\ntorus.keyframe_insert(data_path=\"scale\", frame=1)\ntorus.scale = (5, 5, 5)\ntorus.keyframe_insert(data_path=\"scale\", frame=120)\n\n# Set keyframes for rotation\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Rotate 360 degrees (2*pi radians) around the Z-axis\ntorus.rotation_euler = (0, 0, 2 * math.pi)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set interpolation to linear for steady scaling and rotation\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Update the scene\nbpy.context.scene.frame_end = 120\n\nprint(\"Torus animation created with spinning and scaling.\")\n```\n\nThis script does the following:\n\n1. Clears any existing objects in the scene.\n2. Adds a torus at the center of the scene.\n3. Sets the initial scale and rotation keyframes at frame 1.\n4. Sets the final scale and rotation keyframes at frame 120. The torus scales up to 5 times its initial size and rotates 360 degrees around the Z-axis.\n5. Changes the interpolation for the keyframes to linear to make the animation steady.\n6. Sets the scene's frame end to 120 to match the length of the animation.\n\nSimply run this script in Blender's scripting environment to see the torus spin and scale up"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "Certainly! To create a Blender Python script where a torus expands and shrinks, you can use the following code. This script animates a torus's size by modifying its scale over time.\n\nTo use this script, make sure you have Blender open and create a new script in the Scripting workspace. Paste the code below into the script editor:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.4, location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set up the animation\ntotal_frames = 100\nexpand_frames = 50\n\n# Set keyframes for expansion\nfor frame in range(total_frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the scale factor\n    if frame <= expand_frames:\n        # Expanding phase\n        scale_factor = 1 + 0.5 * (frame / expand_frames)  # Expand to 1.5x size\n    else:\n        # Shrink phase\n        scale_factor = 1.5 - 0.5 * ((frame - expand_frames) / (total_frames - expand_frames))  # Shrink back to 1x size\n    \n    # Apply scale\n    torus.scale = (scale_factor, scale_factor, scale_factor)\n    \n    # Insert keyframe\n    torus.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = total_frames\n```\n\n### Brief Explanation:\n- **Clear and Create Torus:** The script first clears all mesh objects from the scene, then adds a torus at the origin.\n- **Animation Setup:** Animation length is set to 100 frames, with the torus expanding for the first 50 frames and shrinking for the next 50.\n- **Keyframe Insertion:** As the loop progresses, the scale is calculated and set, and a keyframe is inserted for the scale at each frame.\n- **Playback:** You can press the play button in the timeline to see the torus expand and shrink.\n\nRun this code inside Blender, and you should see the torus smoothly expanding and then contracting. Adjust the `expand"
    },
    {
        "Text Input": "A cube tilts back and forth.",
        "Blender Script": "Certainly! To create an animation in Blender where a cube tilts back and forth, you can use the following Python script. This script will add a cube to the scene and animate its rotation to create a tilting effect.\n\n```python\nimport bpy\nimport math\n\n# Clear the existing scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\nbpy.context.scene.frame_set(1)\n\n# Function to set keyframes for rotation\ndef set_rotation_keyframe(frame, rotation_x):\n    bpy.context.scene.frame_set(frame)\n    cube.rotation_euler = (rotation_x, 0, 0)\n    cube.keyframe_insert(data_path=\"rotation_euler\", index=0)  # adding keyframe for x rotation\n\n# Tilting animation - back and forth\nset_rotation_keyframe(1, math.radians(0))    # Initial upright\nset_rotation_keyframe(25, math.radians(15))  # Tilt forward\nset_rotation_keyframe(50, math.radians(-15)) # Tilt backward\nset_rotation_keyframe(75, math.radians(15))  # Tilt forward\nset_rotation_keyframe(100, math.radians(0))  # Back to upright\n\n# Interpolations might need to be set to linear for a smooth back and forth, but let's see how it goes\nfor fcurve in cube.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Animation script run successfully!\")\n```\n\n### Instructions\n\n1. **Open Blender** and switch to the Scripting workspace.\n2. **Create a new text block** and copy the script above into this text editor.\n3. Click `Run Script` to execute the script in Blender. \n\nThe script deletes any existing objects, adds a new cube, and creates a simple tilting animation by inserting keyframes for rotation. The cube tilts forward and backward over the set frame range, and the interpolations are set to linear to achieve a smooth back-and-forth motion."
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "Below is a Blender Python script that creates a simple animation of a sphere expanding and shrinking. It uses keyframes to animate the scale of the sphere over time.\n\n```python\nimport bpy\n\n# Set up the scene, clearing existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"ExpandingSphere\"\n\n# Set up the timeline for animation\nframe_start = 1\nframe_max = 100\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_max\n\n# Insert keyframes for expanding and shrinking animation\nscale_factor_min = 1.0\nscale_factor_max = 2.0\n\n# Initial keyframe at frame 1 with minimum scale\nsphere.scale = (scale_factor_min, scale_factor_min, scale_factor_min)\nsphere.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n# Keyframe at frame 25 with maximum scale (expanding)\nsphere.scale = (scale_factor_max, scale_factor_max, scale_factor_max)\nsphere.keyframe_insert(data_path=\"scale\", frame=25)\n\n# Keyframe at frame 50 back to minimum scale (shrinking)\nsphere.scale = (scale_factor_min, scale_factor_min, scale_factor_min)\nsphere.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Another keyframe at frame 75 with maximum scale (expanding)\nsphere.scale = (scale_factor_max, scale_factor_max, scale_factor_max)\nsphere.keyframe_insert(data_path=\"scale\", frame=75)\n\n# Final keyframe at frame 100 back to minimum scale (shrinking)\nsphere.scale = (scale_factor_min, scale_factor_min, scale_factor_min)\nsphere.keyframe_insert(data_path=\"scale\", frame=frame_max)\n\n# Optionally, set interpolation to linear for even scaling speed\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Sphere expanding and shrinking animation created.\")\n```\n\nHow to Use the Script:\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block and paste the script into it.\n3."
    },
    {
        "Text Input": "A cylinder rotates 360 degrees.",
        "Blender Script": "Below is a simple Blender Python script that creates a cylinder and animates it to rotate 360 degrees around the Z-axis. You can run this script in Blender's Scripting panel.\n\n```python\nimport bpy\n\n# First, clear existing objects and data\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\ncylinder.name = \"RotatingCylinder\"\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120  # 120 frames for a 360-degree rotation\n\n# Set initial rotation keyframe at frame 1\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set final rotation keyframe at frame 120\ncylinder.rotation_euler = (0, 0, 3.14159 * 2)  # 360 degrees in radians\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set interpolation type to linear for consistent rotation speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Cylinder created and animated to rotate 360 degrees.\")\n```\n\n### Explanation\n1. **Clear Existing Objects**: The script starts by selecting and deleting all existing objects to ensure there is no clutter.\n   \n2. **Create a Cylinder**: It then creates a cylinder using `bpy.ops.mesh.primitive_cylinder_add` with a default size.\n\n3. **Animation Setup**:\n   - The animation is set to start at frame 1 and end at frame 120 to give a smooth rotation over 120 frames.\n   - A keyframe is inserted at the start with no rotation, and another at frame 120 with a 360-degree rotation in radians (`2\u03c0`).\n   - The interpolation is set to 'LINEAR' to ensure the cylinder rotates at a constant speed.\n\nTo execute this script, open Blender, switch to the Scripting workspace, create a new text block, paste this script into it, and click \"Run Script\". This will create and animate"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, we'll use Blender's Python API to animate the movement of a plane. The script will add a plane to the scene and apply a sine wave-based side-to-side movement to simulate the wiggling effect over time.\n\nHere is a script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Remove default objects from the scene (optional)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = 'WigglingPlane'\n\n# Set up animation\nscene = bpy.context.scene\nframe_end = 250\nscene.frame_end = frame_end\n\n# Function to add keyframes for wiggling motion\ndef wiggle_plane(obj):\n    for frame in range(scene.frame_start, frame_end + 1):\n        # Calculate side-to-side movement using sine function\n        offset_x = math.sin(frame * 0.1) * 0.5\n        obj.location.x = offset_x\n        \n        # Insert keyframe for the x location\n        obj.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Apply wiggle animation to the plane\nwiggle_plane(plane)\n\n# Update the scene\nbpy.context.view_layer.update()\n\n# Inform the user that the script has finished running\nprint(\"Wiggling animation applied to the plane.\")\n```\n\n### Explanation\n\n- **Removing Default Objects**: The script starts by optionally removing any existing mesh objects from the scene for a clean start.\n- **Adding a Plane**: A new plane is added at the origin.\n- **Animation Setup**: The script specifies the end frame for the animation sequence.\n- **Wiggle Function**: It defines a function to compute a sine wave-based offset for the x-coordinate of the plane over time, which is then used to create a wiggling movement.\n- **Keyframing**: The script inserts keyframes for each frame in the sequence, using the computed offset.\n- **Scene Update**: Finally, the script updates the Blender scene to apply all changes.\n\nThis script will create a simple side-to-side wiggling motion for"
    },
    {
        "Text Input": "A cube performs a bouncing effect.",
        "Blender Script": "To create a bouncing cube effect in Blender using Python, you can utilize Blender's scripting capabilities to animate the cube along the Z-axis, making it go up and down in a bouncing motion. Below is a Python script that can be run in Blender's scripting editor to achieve this effect:\n\n```python\nimport bpy\n\n# Define the bouncing parameters\nbounce_height = 2.0  # The height the cube will bounce\nbounce_duration = 20  # The number of frames for a full bounce cycle\ntotal_bounces = 5  # Total number of bounces\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncube = bpy.context.object\n\n# Set keyframes for the bouncing effect\nfor bounce in range(total_bounces):\n    start_frame = bounce * bounce_duration\n    mid_frame = start_frame + bounce_duration // 2\n    end_frame = start_frame + bounce_duration\n    \n    # Set the cube at ground level\n    cube.location.z = 1\n    cube.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Set the cube at the peak of the bounce\n    cube.location.z = bounce_height + 1\n    cube.keyframe_insert(data_path=\"location\", frame=mid_frame)\n    \n    # Set the cube back at ground level\n    cube.location.z = 1\n    cube.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation type to make the motion more realistic\nfor fcu in cube.animation_data.action.fcurves:\n    for keyframe in fcu.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Optional: Play the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_bounces * bounce_duration\nbpy.ops.screen.animation_play()\n\n```\n\n### Instructions:\n\n1. **Open Blender**.\n2. **Switch to the \"Scripting\" workspace** by selecting it from the top of the Blender interface.\n3. **Create a new text block** and paste the script above into it.\n4. **Run the script** by clicking the \"Run Script\" button.\n\n### Explanation:\n\n- A cube is created and positioned correctly to allow a bouncing effect.\n"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a cube 360 degrees, you need to perform the following steps. This script will add a cube to the scene (if it doesn't already exist), and then apply a rotation animation to it.\n\nHere's a simple script that achieves this:\n\n```python\nimport bpy\n\ndef create_or_select_cube():\n    \"\"\"Create a cube if it does not exist or select if it already exists\"\"\"\n    # Check if there is already a cube in the scene\n    if \"Cube\" in bpy.data.objects:\n        # Select the existing cube\n        cube = bpy.data.objects[\"Cube\"]\n        bpy.context.view_layer.objects.active = cube\n        cube.select_set(True)\n    else:\n        # Create a new cube and select it\n        bpy.ops.mesh.primitive_cube_add(size=2)\n        cube = bpy.context.active_object\n    \n    return cube\n\ndef animate_cube_rotation(cube, duration=120):\n    \"\"\"Animate the cube rotating 360 degrees over the given duration (in frames)\"\"\"\n    # Ensure the cube starts at rotation 0 around Z-axis\n    cube.rotation_euler = (0, 0, 0)\n    cube.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=-1)\n    \n    # Set rotation to 360 degrees (2 * pi radians) at the end frame\n    cube.rotation_euler = (0, 0, 2 * 3.14159265)\n    cube.keyframe_insert(data_path=\"rotation_euler\", frame=duration, index=-1)\n\ndef main():\n    # Clear existing selection\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Create or select the cube\n    cube = create_or_select_cube()\n    \n    # Animate cube rotation\n    animate_cube_rotation(cube)\n\n    # Set the scene's end frame for the animation\n    bpy.context.scene.frame_end = 120\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n\n1. **Open Blender**: Start a new project.\n2. **Access the Script Editor**: Open the \"Scripting\" workspace or split your view to add a \"Text Editor\" if it's not already visible.\n3. **Create a New Text Block**: In the Text Editor, create a new text block and copy-paste the above script.\n4. **Run the Script**: Click the \"Run Script\" button to execute the code. This will"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create an oscillating torus using a sine wave in Blender, we need to script the animation in Python. This can be achieved by modifying the torus's position over time in a sine wave pattern.\n\nHere's a step-by-step Blender Python script to animate the torus:\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Function to create a torus\ndef create_torus():\n    bpy.ops.mesh.primitive_torus_add(\n        align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0),\n        major_segments=48,\n        minor_segments=12,\n        major_radius=1,\n        minor_radius=0.25\n    )\n    return bpy.context.active_object\n\n# Clear existing objects\nclear_scene()\n\n# Create a torus\ntorus = create_torus()\n\n# Define animation parameters\nframe_start = 1\nframe_end = 250\namplitude = 2.0\nfrequency = 0.1\n\n# Insert initial keyframe\ntorus.location.z = amplitude * math.sin(2 * math.pi * frequency * frame_start / bpy.context.scene.render.fps)\ntorus.keyframe_insert(data_path='location', frame=frame_start)\n\n# Apply sine wave oscillation and insert keyframes\nfor frame in range(frame_start, frame_end + 1):\n    z_position = amplitude * math.sin(2 * math.pi * frequency * frame / bpy.context.scene.render.fps)\n    torus.location.z = z_position\n    torus.keyframe_insert(data_path='location', frame=frame)\n\n# Set animation timeline\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nprint(\"Torus oscillation animation setup complete.\")\n```\n\n### Explanation:\n1. **Clear Scene**: The `clear_scene` function deletes all existing objects in the scene to start fresh.\n\n2. **Create Torus**: The `create_torus` function adds a torus to the scene and returns the created object.\n\n3. **Animation Parameters**:\n   - *frame_start* and *frame_end* define the animation timeline.\n   - *amplitude* controls the height of the oscillation.\n   - *frequency* affects how fast the torus oscillates.\n\n4. **Keyframes**: The"
    },
    {
        "Text Input": "A cylinder wiggles side to side.",
        "Blender Script": "To create a Blender Python script where a cylinder wiggles side to side, we\u2019ll animate the cylinder's movement along the x-axis over time. Below is a simple script to accomplish this using Blender\u2019s Python API. \n\n```python\nimport bpy\nimport math\n\n# Delete existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Define wiggle parameters\nstart_frame = 1\nend_frame = 250\nfrequency = 2  # frequency of the wiggle in Hz\namplitude = 1  # maximum deviation from center\n\n# Set up keyframe animation for the cylinder\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate wiggle position using a sine wave\n    wiggle_position = amplitude * math.sin(frequency * (frame * math.pi / 24))\n    \n    # Move the cylinder along x-axis\n    cylinder.location.x = wiggle_position\n    \n    # Insert keyframe for the location\n    cylinder.keyframe_insert(data_path=\"location\", index=0)\n    \n# Set interpolation to linear for simple back and forth motion\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Reset the frame back to the start\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Cylinder wiggle animation created successfully.\")\n```\n\n### Explanation:\n\n1. **Scene Clearing**: The script starts by deleting any existing objects to ensure the scene is empty.\n\n2. **Cylinder Creation**: A cylinder is added to the scene.\n\n3. **Wiggle Parameters**:\n   - `start_frame`: The frame where the animation starts.\n   - `end_frame`: The last frame of the animation.\n   - `frequency`: How many cycles per second the wiggle has. Adjusting this alters how fast it wiggles.\n   - `amplitude`: The extent of movement to each side.\n\n4. **Animation**:\n   - The script iterates over each frame from `start_frame` to `end_frame`.\n   - For each frame, it"
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that sets up a cone and makes it rotate around the X-axis, you can use Blender's scripting capabilities. Here's a basic script to achieve this:\n\n```python\nimport bpy\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Animation parameters\nstart_frame = 1\nend_frame = 250\nrotation_degrees = 360  # Total degrees of rotation\n\n# Set rotation keyframes\ncone.rotation_mode = 'XYZ'\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ncone.rotation_euler = (0, 0, 3.14159 * 2)  # Rotate 360 degrees in radians\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the timeline to start and end with the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Adding a linear interpolation to maintain constant speed\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# If running from within Blender, ensure the scene updates\nif bpy.context.screen is not None:\n    bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)\n\nprint(\"Cone rotation animation set up complete.\")\n```\n\n### Explanation:\n\n1. **Initialize Scene**: The script begins by deleting all objects in the current scene for a clean start. This is optional, but ensures no pre-existing objects interfere with the script.\n\n2. **Create a Cone**: A cone is added to the scene using Blender's `primitive_cone_add` function. The location is set at the origin `(0, 0, 0)`.\n\n3. **Animation Setup**:\n    - **Frame Range**: Defines the start and end frames for the animation (from 1 to 250).\n    - **Rotation Keyframes**: The cone's rotation is set to rotate 360 degrees around the X-axis by the end frame"
    },
    {
        "Text Input": "A cube oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a cube oscillate in a sine wave, you can animate its Z-axis position using Blender's scripting capabilities. Below is a script that will achieve this effect by creating a keyframe sequence for an oscillating cube:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set the number of frames for the animation\ntotal_frames = 250\nbpy.context.scene.frame_end = total_frames\nframe_step = 5\namplitude = 2\nfrequency = 0.1\n\n# Animate the cube's position using a sine wave function\nfor frame in range(0, total_frames, frame_step):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the new Z position as a sine wave\n    z_position = amplitude * math.sin(frequency * frame)\n    \n    # Set the cube's location\n    cube.location = (0, 0, z_position)\n    \n    # Insert keyframe for the location\n    cube.keyframe_insert(data_path=\"location\", index=2)  # index 2 corresponds to Z-axis\n\n# Set the interpolation to linear for a smooth sine wave animation\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n        \n# Play animation\nbpy.ops.screen.animation_play()\n```\n\n### Steps to Run the Script:\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block and paste the above script into it.\n3. Click \"Run Script\" to execute the script.\n\n### Explanation of the script:\n- **Clear Existing Objects:** The script starts by selecting and deleting all existing objects to ensure a clean workspace.\n- **Create a Cube:** A cube is added at the origin `(0, 0, 0)`.\n- **Animation Setup:** The animation is designed to last 250 frames, but you can adjust this value (`total_frames`) to your preference.\n- **Sine Wave Calculation:** The cube's Z location is animated to follow a sine wave pattern. This utilizes `math.sin()` to produce oscillation, where the amplitude and"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates an expanding and shrinking animation for a cube:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 60\n# Set scale values\ninitial_scale = (1, 1, 1)\nexpanded_scale = (2, 2, 2)\nshrinked_scale = (0.5, 0.5, 0.5)\n\n# Set the interpolation type to 'LINEAR' for smooth scaling\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Initial scale keyframe\ncube.scale = initial_scale\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Expanded scale keyframe\ncube.scale = expanded_scale\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame + (end_frame - start_frame) // 3)\n\n# Shrinked scale keyframe\ncube.scale = shrinked_scale\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame + 2 * (end_frame - start_frame) // 3)\n\n# Return to initial scale before animation loops\ncube.scale = initial_scale\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Optional: Set the animation to loop\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n```\n\nThis script does the following:\n\n1. Deletes all existing mesh objects to start with a clean scene.\n2. Adds a new cube in the center of the scene.\n3. Sets keyframes to animate the cube's scale:\n   - Initially at its default size.\n   - Expands to twice its size in all directions.\n   - Shrinks to half its original size.\n   - Returns to its original size to complete the cycle.\n4. Sets the animation to loop from start to end for continuous expansion and shrinking.\n\nRun this script in Blender's scripting editor to see the animation in action. Make sure to adjust `start_frame` and `end_frame"
    },
    {
        "Text Input": "A monkey rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a Blender Python script that will rotate a monkey mesh (Suzanne) 360 degrees about the Z-axis.\n\n```python\nimport bpy\n\n# Ensure that we start with a clean slate\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new monkey mesh\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\n\n# Get the reference to the current object (which should be the monkey)\nmonkey = bpy.context.active_object\n\n# Set the rotation mode to Euler (in case it isn't already)\nmonkey.rotation_mode = 'XYZ'\n\n# Rotate the monkey 360 degrees around the Z-axis\nfor frame in range(1, 121):  # 120 frames for a smooth rotation\n    bpy.context.scene.frame_set(frame)\n    monkey.rotation_euler[2] = (frame / 120) * 2 * 3.14159265  # Complete rotation over 120 frames\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=2)  # Insert keyframe for the Z-axis rotation\n\n# Set the scene's end frame for the animation\nbpy.context.scene.frame_end = 120\n\nprint(\"Monkey rotation animation created successfully!\")\n```\n\n### How to Use the Script:\n\n1. Open Blender, switch to the \"Scripting\" workspace, or open a new text editor window.\n2. Copy and paste the script into the new text file in Blender's text editor.\n3. Run the script using the \"Run Script\" button.\n\n### Script Details:\n\n- The script adds a monkey mesh to the scene.\n- It rotates the monkey once (360 degrees) around its Z-axis over 120 frames, creating a full rotation animation.\n- Keyframes are inserted at each frame to ensure that the rotation is captured in the animation.\n- The animation length is set to 120 frames, which you can adjust if you want a faster or slower rotation.\n\nThis will create a simple 360-degree rotation animation of Suzanne in Blender. Adjust the frame numbers as needed for different speeds."
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a torus move diagonally upwards, you can use the Blender Python API (bpy) to animate a torus object moving along a diagonal path. Below is a simple script to achieve this:\n\n```python\nimport bpy\n\n# Set the scene\nscene = bpy.context.scene\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = \"MovingTorus\"\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 100\nmovement_distance = 10  # Diagonal distance it will cover\n\n# Insert the initial keyframe\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Calculate the movement per frame\ndiagonal_movement = movement_distance / (end_frame - start_frame)\n\n# Set the final keyframe for a diagonal movement upwards\ntorus.location = (diagonal_movement * (end_frame - start_frame), \n                  diagonal_movement * (end_frame - start_frame), \n                  diagonal_movement * (end_frame - start_frame))\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation mode to linear for consistent speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set scene end frame\nscene.frame_end = end_frame\n\n# Optionally, play the animation to verify\nbpy.ops.screen.animation_play()\n```\n\n### Script Explanation:\n\n1. **Create a Torus**: Uses Blender's Python API to add a torus to the scene at the origin point `(0, 0, 0)`.\n\n2. **Define Animation Parameters**: \n   - `start_frame` is when the animation starts.\n   - `end_frame` is when the animation ends.\n   - `movement_distance` is the distance the torus moves diagonally.\n\n3. **Initial Keyframe**: Sets the starting location and inserts a keyframe.\n\n4. **Final Keyframe**: Calculates the final position based on the diagonal movement and inserts a keyframe.\n\n5. **Linear Interpolation**: Ensures the torus moves at a constant speed by setting all keyframe interpolations to"
    },
    {
        "Text Input": "A plane rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that will animate a plane rotating 360 degrees. This script assumes you have Blender installed and you can run this script directly in Blender's scripting environment.\n\n```python\nimport bpy\n\n# Ensure we start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the new plane object\nplane = bpy.context.active_object\n\n# Set the rotation mode to Euler\nplane.rotation_mode = 'XYZ'\n\n# Define the frame range for the animation\nstart_frame = 1\nend_frame = 240  # 240 frames for a full 360-degree rotation at 24 fps (10 seconds)\n\n# Set the initial keyframe at frame 1\nbpy.context.scene.frame_set(start_frame)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set the final keyframe at frame 240\nbpy.context.scene.frame_set(end_frame)\nplane.rotation_euler = (0, 0, 2 * 3.14159)  # 360 degrees in radians (2*pi)\nplane.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set the scene's frame start and end\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Rotation animation set for the plane over 360 degrees!\")\n```\n\n**Instructions for Use:**\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text file in the text editor panel.\n3. Copy and paste the entire script above into the text file.\n4. Press the \"Run Script\" button.\n\nThis script will create a plane and animate it to rotate 360 degrees over a time span of 240 frames, which at a default frame rate of 24 FPS creates an animation of 10 seconds. You can adjust `end_frame` if you need to change the duration of the animation."
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, you can use the following script. This script animates the movement of a plane using keyframes:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Define the wiggle animation properties\nframe_start = 1\nframe_end = 50\nfrequency = 10  # How many times it moves left to right\namplitude = 0.5  # How far it moves side to side\n\n# Set keyframes for the wiggle animation\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the offset using a sine wave\n    x_offset = amplitude * math.sin(2 * math.pi * frequency * (frame / frame_end))\n    \n    # Set the location of the plane\n    plane.location.x = x_offset\n    \n    # Insert the keyframe for the location\n    plane.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Adjust the timeline\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_set(frame_start)\n\n# Set the interpolation type to linear for a constant speed\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\nThis script does the following:\n1. Clears existing objects from the scene.\n2. Adds a new plane to the scene.\n3. Defines parameters for the wiggle animation, including start and end frames, frequency, and amplitude of wiggling.\n4. Calculates a sine-based offset for each frame to simulate the wiggle movement.\n5. Inserts keyframes for these calculated positions.\n6. Adjusts the scene's timeline to match the animation frames.\n7. Sets the interpolation of keyframes to 'LINEAR' to ensure consistency in the wiggling motion.\n\nTo run this script, paste it into the Blender Python scripting editor and execute it. You should see the plane wiggling side to side when you play the animation."
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a cube orbit around another object, we will need to set up a simple scene with an object at the center and animate the cube to move around it. Here's a script that accomplishes this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a central object (Empty for center reference)\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\ncenter_empty = bpy.context.active_object\ncenter_empty.name = \"Center_Empty\"\n\n# Add a cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, 0, 0))\ncube = bpy.context.active_object\ncube.name = \"Orbiting_Cube\"\n\n# Set the number of frames for a full orbit\nnum_frames = 120\n\n# Set up an animation for the cube to orbit\nfor frame in range(num_frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the angle in radians for the current frame\n    angle = 2 * math.pi * (frame / num_frames)\n    \n    # Set the new location for the cube\n    x = 2 * math.cos(angle)\n    y = 2 * math.sin(angle)\n    \n    cube.location = (x, y, 0)\n    \n    # Insert keyframe for the location\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the End Frame for the animation\nbpy.context.scene.frame_end = num_frames\n\nprint(\"Cube orbit setup complete, your animation is ready to play!\")\n```\n\n### Explanation:\n\n1. **Clearing the Scene:**\n   - First, we remove all existing mesh objects to start with a clean scene.\n\n2. **Adding Objects:**\n   - We add an empty at the origin to serve as the center object around which the cube will orbit.\n   - A cube is added at a starting position along the x-axis (2 units away from the origin).\n\n3. **Animation Setup:**\n   - We define the number of frames for a full orbit as `num_frames`.\n   - For each frame, we calculate the angle to determine the position of the cube in its orbit. The cube's position is updated using basic trigonometry (cosine and sine functions"
    },
    {
        "Text Input": "A cylinder bounces like a ball.",
        "Blender Script": "To create a bouncing cylinder animation in Blender using a Python script, we can use Blender's `bpy` module to automate the process. This script will create a simple bouncing animation by keyframing the location of a cylinder object along the z-axis.\n\nHere is a Python script that you can run in Blender's scripting environment:\n\n```python\nimport bpy\nimport math\n\n# Ensure everything is deselected\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a cylinder mesh\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, location=(0, 0, 0))\ncylinder = bpy.context.active_object\ncylinder.name = \"BouncingCylinder\"\n\n# Define bouncing parameters\nframes = 60\nbounce_height = 5\nbounces = 4\n\n# Set keyframes for the bouncing cylinder\nfor bounce in range(bounces):\n    # Calculate frame numbers\n    start_frame = bounce * frames\n    mid_frame = start_frame + (frames // 2)\n    end_frame = start_frame + frames\n    \n    # The cylinder starts on the ground at each bounce\n    cylinder.location.z = 0\n    cylinder.keyframe_insert(data_path=\"location\", frame=start_frame, index=2)\n    \n    # The cylinder reaches the maximum bounce height in the mid-frame\n    cylinder.location.z = bounce_height\n    cylinder.keyframe_insert(data_path=\"location\", frame=mid_frame, index=2)\n    \n    # The cylinder returns to the ground position\n    cylinder.location.z = 0\n    cylinder.keyframe_insert(data_path=\"location\", frame=end_frame, index=2)\n\n# Optional: Make the cylinder rotation uniform if needed\n# bpy.context.object.rotation_euler = (0, 0, 0)\n# for frame in range(0, bounces * frames + frames, frames):\n#     cylinder.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n\n# Set interpolation to linear for a more bouncing ball effect\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'BEZIER'\n\nprint(\"Bouncing cylinder animation created successfully!\")\n```\n\n### Instructions to Run the Script\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block in the text editor or open an existing one.\n3. Paste the"
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a cube moving in a circular path, you can use the following script. This script will create a cube in the scene, then animate it along a circular path.\n\n```python\nimport bpy\nimport math\n\n# Remove all existing objects to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a new cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncube = bpy.context.active_object\n\n# Define circular motion parameters\nradius = 5\nframes = 250\nangle_increment = (2 * math.pi) / frames  # Full circle divided by number of frames\n\n# Set up animation keyframes to move the cube in a circular path\nfor frame in range(frames):\n    # Calculate x and y coordinates\n    x = radius * math.cos(angle_increment * frame)\n    y = radius * math.sin(angle_increment * frame)\n    \n    # Set the cube's location\n    cube.location = (x, y, 1)\n    \n    # Insert keyframe for location\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Optional: Set end frame of the animation\nbpy.context.scene.frame_end = frames\n```\n\n### How to Use the Script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into the text editor.\n3. Press the \"Run Script\" button.\n\n### Explanation:\n- The script begins by clearing the scene of all objects.\n- A new cube is added at position (0, 0, 1).\n- A circular path is calculated by incrementing the angle for each frame, which computes the `x` and `y` positions using cosine and sine functions.\n- For each frame of the animation, the cube's location is updated, and a keyframe for its location is inserted.\n- The animation ends at the specified number of frames, completing the circular motion.\n\nYou can adjust the `radius`, `frames`, and `size` of the cube according to your preferences. This script creates a full circular path animation that loops smoothly over the set number of frames."
    },
    {
        "Text Input": "A cube jumps up and lands.",
        "Blender Script": "Certainly! Below is a Blender Python script that makes a cube perform a simple jump animation. The cube will move up and then come back down to its original position using keyframes.\n\n```python\nimport bpy\n\ndef create_animation():\n    # Check if there is an existing cube, otherwise create one\n    if \"Cube\" not in bpy.data.objects:\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\n\n    # Select the cube\n    cube = bpy.data.objects['Cube']\n    bpy.context.view_layer.objects.active = cube\n    bpy.ops.object.select_all(action='DESELECT')\n    cube.select_set(True)\n    \n    # Set the current frame to 1 and record its starting location\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 30\n    bpy.context.scene.frame_set(1)\n    cube.location = (0, 0, 0)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n    \n    # Move the cube up at frame 10 (jump peak)\n    bpy.context.scene.frame_set(10)\n    cube.location = (0, 0, 2)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n    \n    # Move the cube back to start position at frame 20\n    bpy.context.scene.frame_set(20)\n    cube.location = (0, 0, 0)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n    # Set interpolation to 'LINEAR' for consistent motion\n    for fcurve in cube.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n    \n    print(\"Cube jumping animation created successfully!\")\n\ncreate_animation()\n```\n\n### Instructions:\n1. Open Blender.\n2. Go to the `Scripting` workspace.\n3. Create a new text block.\n4. Copy and paste the script above into the text editor.\n5. Click the 'Run Script' button.\n\n### Explanation:\n- This script creates or selects an existing cube object.\n- Sets up a simple animation keyframed at frames 1, 10, and 20 denoting the rising and falling of the cube.\n- Sets the interpolation of the keyframes to 'LINEAR' for a uniform speed during the jump.\n- Adjust `frame_end` to 30 to provide a slight pause"
    },
    {
        "Text Input": "A monkey bounces like a ball.",
        "Blender Script": "Here's a Blender Python script that animates a monkey mesh (Suzanne) to bounce like a ball. To use this script, ensure you have a fresh Blender project open and then execute the script in Blender's scripting console.\n\n```python\nimport bpy\nimport math\n\ndef create_monkey():\n    '''Create a monkey mesh (Suzanne) and return the object.'''\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\n    monkey = bpy.context.object\n    monkey.name = 'BouncyMonkey'\n    return monkey\n\ndef setup_scene():\n    '''Prepare the scene for the animation.'''\n    bpy.context.scene.frame_end = 100\n    bpy.context.scene.render.fps = 24\n\ndef animate_monkey_bounce(monkey):\n    '''Create an animation for the monkey to bounce like a ball.'''\n    # Clear any existing animation data\n    if monkey.animation_data:\n        monkey.animation_data_clear()\n    \n    # Set keyframes for bouncing\n    frames = [1, 12, 24, 36, 48, 60, 72, 84, 96]  # Keyframe positions\n    heights = [0, 2, 0, 1.8, 0, 1.5, 0, 1.2, 0]   # Corresponding heights\n\n    for frame, height in zip(frames, heights):\n        bpy.context.scene.frame_set(frame)\n        monkey.location.z = height\n        monkey.keyframe_insert(data_path=\"location\", index=2)  # Z-axis only\n\n    # Add a little rotation to make it more dynamic as it bounces\n    for i, frame in enumerate(frames):\n        bpy.context.scene.frame_set(frame)\n        monkey.rotation_euler.y = math.radians(45 * (i % 2))\n        monkey.keyframe_insert(data_path=\"rotation_euler\", index=1)\n\ndef main():\n    '''Main function to create and animate Suzanne as a bouncing ball.'''\n    setup_scene()\n    monkey = create_monkey()\n    animate_monkey_bounce(monkey)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n1. Open Blender.\n2. Switch to the \"Scripting\" workspace.\n3. Create a new text block in the scripting editor and paste the script above.\n4."
    },
    {
        "Text Input": "A plane bounces like a ball.",
        "Blender Script": "To create an animation in Blender where a plane bounces like a ball, you can use the following Python script to set up the scene and animate the plane. This script will create a plane, add a bouncing animation using keyframes, and set up the viewport for visualization.\n\n```python\nimport bpy\nimport math\nimport random\n\n# Delete existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\n\n# Get reference to the plane object\nplane = bpy.context.active_object\nplane.name = 'BouncingPlane'\n\n# Define bouncing animation parameters\nbounce_height = 2.0\nbounce_times = 5\nframe_start = 1\nframes_per_bounce = 20\n\n# Clear existing keyframes\nplane.animation_data_clear()\n\n# Animate the plane to bounce\nfor i in range(bounce_times):\n    # Calculate the bounce start and mid-air frames\n    frame_up = frame_start + i * frames_per_bounce\n    frame_down = frame_up + frames_per_bounce // 2\n    \n    # Set keyframes for up and down motion\n    plane.location.z = 0\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_up)\n    \n    plane.location.z = bounce_height\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_down)\n    \n    plane.location.z = 0\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_down + frames_per_bounce // 2)\n\n# Add some rotation for better effect\nfor fcurve in plane.animation_data.action.fcurves:\n    # Add a modifier to the Z location to simulate a bounce with exponential decay\n    fcurve.modifiers.new(type='BOUNCY')\n    bouncy_mod = fcurve.modifiers[-1]\n    bouncy_mod.factor = 0.6  # Decay factor to show diminishing bounce height\n\n# Set up the camera\nbpy.ops.object.camera_add(location=(5, -5, 5), rotation=(math.radians(60), 0, math.radians(45)))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\n# Set the frame range for the animation\n"
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cylinder in Blender using Python, you'll use the Blender `bpy` module to animate the cylinder's position to give the appearance of bouncing. Below is a script that sets up the animation:\n\n```python\nimport bpy\n\n# Delete default cube\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Cube'].select_set(True)\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.object\n\n# Set the number of bounces and frames per bounce\nbounces = 5\nframes_per_bounce = 20\nbounce_height = 4\n\n# Create bouncing animation\nfor bounce in range(bounces):\n    start_frame = bounce * frames_per_bounce\n    mid_frame = start_frame + frames_per_bounce // 2\n    end_frame = start_frame + frames_per_bounce\n\n    # Set keyframe for starting point of the bounce\n    cylinder.location.z = 1\n    cylinder.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n    \n    # Set keyframe for apex of the bounce\n    cylinder.location.z = bounce_height\n    cylinder.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n    \n    # Set keyframe for landing of the bounce\n    cylinder.location.z = 1\n    cylinder.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Set interpolation mode to make the bouncing more realistic\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'BEZIER'\n```\n\n### Explanation\n\n- **Setup**: The script clears the default cube and adds a cylinder at the origin.\n- **Animation**: It creates an animated bouncing effect by setting keyframes for the cylinder's vertical position. The cylinder moves up to a specific height and then returns to its starting height to complete a bounce. This is done for a specified number of bounces.\n- **Interpolation**: Keyframe interpolation is set to 'BEZIER' to smooth out the movement, making the bounce appear more natural.\n\nTo execute the script:\n\n1. Open Blender and go to the `Scripting` workspace.\n2. Create a new text block and"
    },
    {
        "Text Input": "A monkey moves from left to right.",
        "Blender Script": "To create a simple animation where a monkey (using the Suzanne mesh in Blender) moves from left to right, you can use the following Blender Python script. This script sets up the scene, creates the monkey object, and animates it moving across the screen.\n\n```python\nimport bpy\n\ndef create_monkey():\n    # Add a monkey mesh (Suzanne)\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(-5, 0, 0))\n    monkey = bpy.context.active_object\n    monkey.name = \"MovingMonkey\"\n\ndef animate_monkey(monkey):\n    # Set the total number of frames for the animation\n    total_frames = 100\n\n    # Set the start and end location of the monkey\n    start_location = (-5, 0, 0)\n    end_location = (5, 0, 0)\n\n    # Set keyframe for the start location\n    monkey.location = start_location\n    monkey.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set keyframe for the end location\n    monkey.location = end_location\n    monkey.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n    # Optional: Set the output settings for rendering\n    bpy.context.scene.render.image_settings.file_format = 'FFMPEG'\n    bpy.context.scene.render.filepath = \"//monkey_animation\"\n    bpy.context.scene.frame_end = total_frames\n\ndef setup_scene():\n    # Clear existing objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Create the Suzanne monkey head\n    create_monkey()\n\n    # Get the monkey object\n    monkey = bpy.data.objects.get(\"MovingMonkey\")\n\n    # Create animation\n    if monkey:\n        animate_monkey(monkey)\n\nsetup_scene()\n```\n\nInstructions to use the script:\n1. Open Blender.\n2. Access the \"Scripting\" workspace by clicking on the \"Scripting\" tab.\n3. Click `New` to create a new script file.\n4. Copy and paste the script above into the text editor.\n5. Click on `Run Script` to execute the script.\n\nYou will see Suzanne, the monkey mesh, starting from the left and moving to the right across 100 frames. You can adjust the `total_frames` variable to speed up or slow down the animation, as well as modify the `start_location` and `end_location` to change the path of the monkey"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates an animation where a sphere expands and shrinks over time. This script uses the Blender Python API to automate the creation and animation of a sphere object.\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Clear any existing objects in the scene\nclear_scene()\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"ExpandingShrinkingSphere\"\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Set animation scaling keyframes\nscaling_factor = 2.0\nframes_per_cycle = 50\n\nfor frame in range(0, 101, frames_per_cycle):\n    bpy.context.scene.frame_set(frame)\n    scale = 1.0 if (frame // frames_per_cycle) % 2 == 0 else scaling_factor\n    \n    # Set the scale\n    sphere.scale = (scale, scale, scale)\n    \n    # Insert a keyframe for scale\n    sphere.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Use f-curve modifiers to create a smooth expanding/shrinking animation\n# Add a generator to create a repetitive pattern\nfcurves = sphere.animation_data.action.fcurves\nfor fcurve in fcurves:\n    mod = fcurve.modifiers.new(type='FNGENERATOR')\n    mod.mode = 'POLYNOMIAL'\n    mod.coefficients = (0, (2 * math.pi * (scaling_factor - 1) / frames_per_cycle))\n\n# Play the animation in cycles\nbpy.context.scene.render.fps = 24  # Set frames per second\n\nprint(\"Sphere expansion and shrink animation script completed.\")\n```\n\nExplanation:\n- The script starts by clearing the existing scene to ensure a clean slate.\n- It then creates a UV sphere at the origin of the scene.\n- The frame range is set to 100 frames.\n- The sphere scales up and then down every 50 frames, creating a loop of expanding and shrinking.\n- Keyframes are inserted to capture the scale at specific frames.\n- Finally, the script uses f-curve modifiers to smooth the transition between expanding and shrinking.\n\nYou"
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "To create a scene in Blender where a sphere orbits around another object, such as a cube, you can use Python scripting to automate the process. Below is a simple script that sets up this scene. It creates a cube and a sphere and then animates the sphere orbiting around the cube.\n\n```python\nimport bpy\nimport math\n\n# Reset the scene by deleting all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = \"Central Cube\"\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(3, 0, 0))\norbiting_sphere = bpy.context.object\norbiting_sphere.name = \"Orbiting Sphere\"\n\n# Set up the animation frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Animate the sphere to orbit around the cube\nfor frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end + 1):\n    # Set the current frame\n    bpy.context.scene.frame_set(frame)\n\n    # Calculate the angle for the current frame\n    angle = 2 * math.pi * (frame / bpy.context.scene.frame_end)\n    \n    # Calculate new position of the sphere\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    z = 0  # assuming a flat orbit on the xy-plane\n\n    # Set the new location for the sphere\n    orbiting_sphere.location = (x, y, z)\n    \n    # Insert keyframes for the location\n    orbiting_sphere.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the animation to repeat by setting end to one less than beginning (infinite loop)\nbpy.context.scene.use_preview_range = True\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\nbpy.context.scene.frame_preview_start = bpy.context.scene.frame_start\nbpy.context.scene.frame_preview_end = bpy.context.scene.frame_end\n```\n\n### Instructions:\n1. Open Blender, switch to the \"Scripting\" workspace.\n2. Create a new script, paste in the code provided above.\n3"
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "To create a Blender Python script that flips a torus upside down, you can use the following code. This script will create a torus in the Blender scene and animate it flipping 180 degrees around the X-axis.\n\n```python\nimport bpy\n\n# Function to create a torus\ndef create_torus():\n    bpy.ops.mesh.primitive_torus_add(\n        align='WORLD',\n        location=(0, 0, 0), \n        rotation=(0, 0, 0), \n        major_radius=1, \n        minor_radius=0.25\n    )\n    return bpy.context.object\n\n# Function to insert keyframes for flipping the torus\ndef flip_torus(torus, start_frame, end_frame):\n    # Set initial rotation keyframe\n    torus.rotation_euler = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n    \n    # Set flipped rotation keyframe\n    torus.rotation_euler = (3.14159, 0, 0)  # 180 degrees in radians\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n    \n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a torus\ntorus = create_torus()\n\n# Set keyframes to animate flipping\nflip_torus(torus, start_frame=1, end_frame=60)\n\n# Set the scene's end frame\nbpy.context.scene.frame_end = 60\n\nprint(\"Torus flipping animation created!\")\n```\n\n### Explanation:\n\n1. **Import Blender Python (bpy):** This is the module used to interact with Blender's API.\n\n2. **Function `create_torus`:** This function adds a torus primitive to the scene.\n\n3. **Function `flip_torus`:** This function takes the torus object and keyframes for an animation that rotates the torus 180 degrees around the X-axis.\n\n4. **Deleting existing objects:** To start with an empty scene, it deletes all the current objects in the Blender scene.\n\n5. **Create and animate the torus:**\n   - First, create the torus.\n   - Set two keyframes to animate the rotation from `0` to `3.14159` radians (180 degrees), between frames 1 and 60.\n\n6. **Set the scene's"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "To create a Blender animation where a cube expands and shrinks, you'll need to write a Python script that automates this process using Blender's animation system. Below is a script that will create a cube, set up the animation to expand and shrink the cube along all axes, and play it back in a loop.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Remove all elements in the current scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef create_cube():\n    # Create a new cube and center it at the origin\n    bpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\n    return bpy.context.active_object\n\ndef animate_cube(cube):\n    # Set the total frames for the animation\n    total_frames = 60\n\n    # Set up the animation for expanding and shrinking\n    cube.scale = (1, 1, 1)\n    cube.keyframe_insert(data_path=\"scale\", frame=1)\n\n    # Frame when the cube is fully expanded\n    cube.scale = (2, 2, 2)\n    cube.keyframe_insert(data_path=\"scale\", frame=total_frames // 2)\n\n    # End frame with the cube back to original scale\n    cube.scale = (1, 1, 1)\n    cube.keyframe_insert(data_path=\"scale\", frame=total_frames)\n\n    # Make the animation loop\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = total_frames\n\ndef main():\n    clear_scene()\n    cube = create_cube()\n    animate_cube(cube)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions to Use the Script:\n\n1. **Open Blender:**\n   - Start Blender and switch to the \"Scripting\" workspace.\n\n2. **Create a New Script:**\n   - Click \"New\" in the text editor area within Blender to create a new script.\n\n3. **Copy and Paste the Script:**\n   - Copy the script above and paste it into the text editor.\n\n4. **Run the Script:**\n   - Make sure you have saved any current work, as this script will clear the scene.\n   - Click the \"Run Script\" button to execute the script.\n\n5. **Playback the Animation:**\n   - Press `Spacebar` to watch the cube expand and shrink repeatedly.\n\nThis script does the following:\n- Clears the existing"
    },
    {
        "Text Input": "A cube scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a cube scale up and down, you need to animate the scale property of the cube over time. Below is a script that accomplishes this task by creating a cube and animating it using keyframes.\n\n```python\nimport bpy\n\n# Clear existing mesh and objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set up the animation\nstart_frame = 1\nend_frame = 60\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define scale animation (scale up and then down)\nscale_min = 1.0\nscale_max = 3.0\n\n# Insert keyframes for scaling\n\n# Start at normal scale\ncube.scale = (scale_min, scale_min, scale_min)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Scale up to maximum\nmid_frame = (start_frame + end_frame) // 2\ncube.scale = (scale_max, scale_max, scale_max)\ncube.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Scale back down to normal\ncube.scale = (scale_min, scale_min, scale_min)\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation type to make the animation smooth\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\nprint(\"Scale up and down animation setup complete.\")\n```\n\n### Explanation of the Script:\n\n1. **Setup and Cleanup:**\n   - The script first clears any existing objects to start with a clean scene.\n   \n2. **Cube Creation:**\n   - A new cube is created at the origin `(0, 0, 0)`.\n\n3. **Animation Setup:**\n   - Define the start and end frames for the animation (`1 to 60`).\n   - The animation smoothly scales from a minimum scale (`1.0`) to a maximum scale (`3.0`) and back down.\n\n4. **Keyframe Insertion:**\n   - Keyframes are inserted to animate the scale property of the cube. The"
    },
    {
        "Text Input": "A monkey wiggles side to side.",
        "Blender Script": "To create a simple animation of a monkey (or a monkey head, using Blender's built-in model) that wiggles side to side, you would follow these general steps in a Blender Python script:\n\n1. Set up the scene.\n2. Add a monkey mesh.\n3. Create keyframes for the animation to make the monkey wiggle.\n4. Play back the animation.\n\nBelow is an example script to accomplish this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing meshes and objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new monkey mesh (Suzanne - the Blender monkey model)\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set up animation timeline\nstart_frame = 1\nend_frame = 60  # 60 frames for a one-second animation at 60 fps\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define the wiggle motion by setting keyframes\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    # Use a sine wave to make the animation smooth\n    # The number controls the speed of the wiggle\n    angle = math.pi / 8 * math.sin(frame * math.pi / 15)\n\n    # Keyframe for the rotation on Z-axis\n    monkey.rotation_euler[2] = angle\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Set the scene to play at 60 frames per second\nbpy.context.scene.render.fps = 60\n\n# Play the animation in Blender\nbpy.ops.screen.animation_play()\n```\n\nTo run this script in Blender:\n\n1. Open Blender.\n2. Switch to the Scripting workspace.\n3. Create a new text file in the text editor.\n4. Copy and paste the script above.\n5. Click the \"Run Script\" button.\n\nThis script will add the monkey head to the scene, and then animate it to wiggle side to side by adjusting its rotation around the Z-axis using sine wave values for a smooth oscillating effect. Adjust parameters like `math.pi / 8` and `math.pi / 15` for different amplitude and frequency of the wiggle."
    },
    {
        "Text Input": "A torus moves in a circular path.",
        "Blender Script": "Below is a Blender Python script that animates a torus moving in a circular path around the origin. It uses keyframes to animate the transformation of the torus over time.\n\n```python\nimport bpy\nimport math\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(2, 0, 0))\ntorus = bpy.context.active_object\n\n# Define the circular path radius and duration of animation\npath_radius = 4\nanimation_length = 250  # frames (10 seconds at 25 FPS)\n\n# Move the torus to the starting point of the path\ntorus.location = (path_radius, 0, 0)\n\n# Set up the animation\ntorus.keyframe_insert(data_path=\"location\", frame=0)\n\nfor frame in range(1, animation_length + 1):\n    # Calculate the position based on the frame number\n    angle = (2 * math.pi / animation_length) * frame  # Full circle over the course of the animation\n    \n    # Update torus location to follow the circle path\n    x = path_radius * math.cos(angle)\n    y = path_radius * math.sin(angle)\n    torus.location = (x, y, 0)\n\n    # Insert a keyframe for the new position\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = animation_length\n```\n\nTo use this script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block and paste the script into the text editor.\n3. Run the script.\n\nThis will create a torus and animate it, moving in a circular path around the origin with a radius of 4 units over 10 seconds at 25 frames per second. You can adjust the `path_radius` and `animation_length` variables to change the size of the path and the duration of the animation, respectively."
    },
    {
        "Text Input": "A torus zooms in and out.",
        "Blender Script": "To create a Blender Python script that animates a torus zooming in and out, you can use the following script. This script creates a torus in the Blender scene and animates its scale to simulate the zooming effect.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Delete all objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\ndef create_torus():\n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n    torus = bpy.context.active_object\n    return torus\n\ndef add_scale_animation(obj):\n    # Set up the animation frame range\n    start_frame = 1\n    mid_frame = 30\n    end_frame = 60\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n    \n    # Set initial scale (normal size)\n    obj.scale = (1, 1, 1)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame)\n    \n    # Set mid-point scale (zoom in)\n    obj.scale = (2, 2, 2)\n    obj.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n    \n    # Set end-point scale (back to normal size)\n    obj.scale = (1, 1, 1)\n    obj.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\ndef main():\n    # Clear the current scene\n    clear_scene()\n    \n    # Create a torus\n    torus = create_torus()\n    \n    # Add scale animation\n    add_scale_animation(torus)\n\n# Run the script\nmain()\n```\n\nTo execute this script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste this script into the text editor.\n3. Click the \"Run Script\" button or use `Alt + P` with the text editor focused.\n\nThe script will create a torus in the 3D viewport and animate its scale to make it appear as if it is zooming in and out. The animation will play over 60 frames, zooming in at frame 30. You can adjust the `start_frame`, `mid_frame`, and `end_frame` variables to change the timing of the animation."
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "To create a Blender Python script that flips a torus upside down, you should first ensure that a torus is created and then apply a rotation to it. Below is a script that achieves this by creating a torus and rotating it 180 degrees around its X-axis:\n\n```python\nimport bpy\nimport math\n\n# Delete existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\n\n# Get the created torus object\ntorus = bpy.context.active_object\n\n# Set the rotation of the torus to flip it upside down (180 degrees around the X-axis)\ntorus.rotation_euler = (math.pi, 0, 0)\n\n# Update the scene\nbpy.context.view_layer.update()\n```\n\nTo run this script:\n\n1. Open Blender.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text block and paste the script into it.\n4. Run the script by clicking the \"Run Script\" button.\n\nThis will add a torus to your scene and rotate it so that it is flipped upside down. Note that the rotation is done using radians, where `math.pi` equals 180 degrees."
    },
    {
        "Text Input": "A torus performs a bouncing effect.",
        "Blender Script": "To create a bouncing torus effect in Blender using Python scripting, you can write a script that adds a torus to the scene and animates its location to create the bouncing effect. Here\u2019s an example of how you might achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and objects\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 1))\n\n# Get the torus object\ntorus = bpy.context.object\ntorus.name = \"BouncingTorus\"\n\n# Set the number of frames for the animation\nframe_start = 1\nframe_end = 120\n\n# Insert keyframes for the animation\nfor frame in range(frame_start, frame_end + 1):\n    # Compute the normalized time value (0 to 1 within the cycle)\n    t = (frame - frame_start) / (frame_end - frame_start)\n    \n    # Create a bouncing effect using a sine wave pattern\n    bounce_height = abs(math.sin(t * math.pi * 2)) * 2 \n    torus.location.z = 1 + bounce_height\n    \n    # Set the current frame\n    bpy.context.scene.frame_set(frame)\n    \n    # Insert a Location Keyframe\n    torus.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = frame_end\n\nprint(\"Bouncing animation has been created.\")\n```\n\n### Explanation:\n1. **Clear Scene**: We start by clearing the current Blender scene to ensure there's nothing unintended before adding the torus.\n\n2. **Add Torus**: The torus is added to the scene at a specific location.\n\n3. **Animation Setup**: We set up an animation to simulate bouncing using a sine wave pattern. This gives us a smooth, cyclic up-and-down motion.\n\n4. **Keyframes**: We iterate through the range of frames we want the animation to cover, calculating the `bounce_height` for each frame using a sine function. The `abs()` ensures the torus always bounces upwards.\n\n5. **Animation Frames**: Keyframes are inserted for the torus\u2019s `location` at each frame to create the animation.\n\n6. **Frame End**: We set the total number"
    },
    {
        "Text Input": "A monkey rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a monkey object (Suzanne) rotate 360 degrees, you'll want to use the Blender Python API (bpy). Below is a script that creates a Suzanne mesh, adds it to the scene, and animates it rotating a full 360 degrees around the Z-axis over the course of 120 frames.\n\n```python\nimport bpy\n\ndef create_monkey():\n    # Set the current scene\n    scene = bpy.context.scene\n    \n    # Create a new mesh and object for the monkey (Suzanne)\n    bpy.ops.mesh.primitive_monkey_add(size=2.0, location=(0, 0, 0))\n    monkey = bpy.context.active_object\n    \n    # Set the frame start and end\n    scene.frame_start = 1\n    scene.frame_end = 120\n    \n    # Insert a keyframe at the starting position/frame\n    monkey.rotation_euler = (0, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=scene.frame_start)\n    \n    # Set the final rotation, 360 degrees (2 * pi radians)\n    monkey.rotation_euler = (0, 0, 3.14159 * 2)  # Approximately 6.28318 radians\n    \n    # Insert keyframe at the end position/frame\n    monkey.keyframe_insert(data_path=\"rotation_euler\", frame=scene.frame_end)\n    \n    # Set interpolation type to linear for constant rotation speed\n    for fcurve in monkey.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'LINEAR'\n\nif __name__ == \"__main__\":\n    create_monkey()\n```\n\n### Instructions to Run the Script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new script by clicking \"New\" or open an existing text block.\n3. Copy and paste the script above into the text editor in Blender.\n4. Click the \"Run Script\" button to execute the script.\n\nThis script will add a monkey object to your scene and animate it rotating once around its Z-axis across 120 frames, which can be adjusted to your desired frame rate and rotation speed. The rotation is set with linear interpolation to ensure a smooth, consistent speed throughout the animation."
    },
    {
        "Text Input": "A cylinder moves from left to right.",
        "Blender Script": "To create a Blender Python script where a cylinder moves from left to right, we need to automate the creation of the cylinder and animate its movement across the scene using keyframes. Below is the script that accomplishes this task:\n\n```python\nimport bpy\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(-5, 0, 0))\ncylinder = bpy.context.object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Insert keyframes for the animation\ncylinder.location.x = -5\ncylinder.keyframe_insert(data_path=\"location\", frame=1)\n\ncylinder.location.x = 5\ncylinder.keyframe_insert(data_path=\"location\", frame=100)\n\n# Set the interpolation to linear for a constant speed movement\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Cylinder animation setup complete.\")\n```\n\nSteps to use the script:\n1. Open Blender and switch to the 'Scripting' workspace.\n2. Create a new text block or open the existing one and paste the script.\n3. Run the script using the 'Run Script' button.\n\nThe script will clear the current scene, create a cylinder at the specified starting location, then animate the cylinder by moving it from left to right across 100 frames (approximately 3 seconds at 30FPS). The interpolation is set to 'LINEAR' to ensure a constant speed throughout the animation. Adjust the frames or positions as needed for different effects."
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cylinder in Blender using Python, you'll need to use Blender's scripting capabilities to animate the cylinder. Below is a script that creates a simple bouncing animation for a cylinder:\n\n```python\nimport bpy\nimport math\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\n\n# Get the created cylinder object\ncylinder = bpy.context.active_object\n\n# Clear any existing animation data\ncylinder.animation_data_clear()\n\n# Set frame range\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Add bouncing animation\nbounce_height = 2.0\nbounce_frequency = 0.1\n\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate new z location using a simple sin function for bouncing\n    z_location = bounce_height * abs(math.sin(bounce_frequency * frame))\n    cylinder.location.z = z_location\n    \n    # Insert keyframe for location\n    cylinder.keyframe_insert(data_path=\"location\", index=2)\n\n# Optional: set up a smoother interpolation for realistic bouncing\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'  # You can try 'BEZIER', 'LINEAR', etc. for different effects\n\nprint(\"Bouncing animation created for the cylinder.\")\n```\n\n### Description of the Code:\n- The script creates a new cylinder in the Blender scene.\n- It then clears any previous animations on this object.\n- The script sets the animation frame range from 1 to 100.\n- It then calculates a bouncing motion by adjusting the z-location of the cylinder over time, using a sine wave function to simulate the bounce.\n- Keyframes are inserted for each frame to create the animation.\n- Finally, the script sets the keyframe interpolation to 'SINE' for a smoother bounce. You can tweak this to other interpolation types for different effects.\n\nYou can run this script in Blender's Text Editor and it will animate the cylinder to simulate a bouncing effect. Adjust the `bounce_height` and `bounce_frequency` variables to tweak the bounce amplitude and speed, respectively."
    },
    {
        "Text Input": "A torus tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a torus tilting back and forth, you can use the following script. This will create a torus and animate its rotation along a specific axis to achieve the tilting effect:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Define the animation parameters\nframe_start = 1\nframe_end = 60\ntilt_angle = 30  # Degrees\n\n# Set keyframes for the tilt animation\ntorus.rotation_mode = 'XYZ'\n\n# Frame 1: Tilt to one side\nbpy.context.scene.frame_set(frame_start)\ntorus.rotation_euler = (0, 0, -tilt_angle * 3.14159 / 180)\ntorus.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Frame 30: Return to middle\nmid_frame = (frame_start + frame_end) // 2\nbpy.context.scene.frame_set(mid_frame)\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Frame 60: Tilt to the other side\nbpy.context.scene.frame_set(frame_end)\ntorus.rotation_euler = (0, 0, tilt_angle * 3.14159 / 180)\ntorus.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Set up the animation to loop\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.render.fps = 24\n\n# Enable auto-playback for animation\nbpy.context.scene.frame_current = frame_start\nbpy.ops.screen.animation_play()\n\n# Done with the setup\nprint(\"Animation setup complete - Torus is tilting back and forth.\")\n```\n\n**Instructions for Use:**\n1. Open Blender.\n2. Go to \"Scripting\" workspace.\n3. Create a new text file and paste the above script.\n4. Click \"Run Script.\"\n\nThis script will create a torus at the origin and"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a sphere expand and shrink, you can use the following script as a guide. This script will animate the sphere's scale to create an expanding and shrinking effect over time.\n\n```python\nimport bpy\nimport math\n\ndef clear_scene():\n    # Delete all objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef create_sphere():\n    # Create a new UV Sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    sphere = bpy.context.active_object\n    sphere.name = \"ExpandingShrinkingSphere\"\n    return sphere\n\ndef animate_sphere(sphere, start_frame, end_frame, scale_min, scale_max):\n    # Sets initial scale\n    sphere.scale = (scale_min, scale_min, scale_min)\n    sphere.keyframe_insert(data_path=\"scale\", frame=start_frame)\n    \n    # Calculate midpoint for scaling\n    mid_frame = (start_frame + end_frame) // 2\n    \n    # Set scale to maximum at midpoint\n    sphere.scale = (scale_max, scale_max, scale_max)\n    sphere.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n    # Revert to minimum scale at end\n    sphere.scale = (scale_min, scale_min, scale_min)\n    sphere.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\ndef main():\n    # Clear existing objects\n    clear_scene()\n\n    # Create the sphere\n    sphere = create_sphere()\n\n    # Animation settings\n    start_frame = 1\n    end_frame = 60  # Duration of animation in frames\n    scale_min = 1.0\n    scale_max = 2.0\n\n    # Animate the sphere\n    animate_sphere(sphere, start_frame, end_frame, scale_min, scale_max)\n    \n    # Set the end frame of the scene\n    bpy.context.scene.frame_end = end_frame\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **Clear Scene**: The function `clear_scene()` removes all objects from the current Blender scene.\n- **Create Sphere**: The `create_sphere()` function adds a new UV sphere to the scene at the origin.\n- **Animate Sphere**: `animate_sphere()` accepts the sphere object and defines keyframes for its scale. It makes the sphere"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "Below is a Blender Python script that animates a torus oscillating in a sine wave pattern. The script creates a torus and applies keyframes to its Z location to make it move up and down in a sine wave motion.\n\n```python\nimport bpy\nimport math\n\n# Delete existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(\n    align='WORLD',\n    location=(0, 0, 0)\n)\ntorus = bpy.context.object\ntorus.name = 'SineWaveTorus'\n\n# Define the animation parameters\nstart_frame = 1\nend_frame = 250\nfrequency = 1   # Frequency of the sine wave\namplitude = 2   # Amplitude of the sine wave\nnum_cycles = 5  # Number of full sine wave cycles over the animation\n\n# Set the frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Animate the torus\nfor frame in range(start_frame, end_frame + 1):\n    # Calculate the y position using a sine wave function\n    t = frame / end_frame  # Normalized time variable (0 to 1)\n    # Compute the z position as a sine wave\n    z_position = amplitude * math.sin(num_cycles * math.pi * 2 * t * frequency)\n\n    # Set the location of the torus\n    torus.location = (0, 0, z_position)\n\n    # Insert keyframe for the location\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Set interpolation to linear for constant speed sine wave\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\nprint(\"Torus oscillation animation created successfully.\")\n```\n\nWhen you run this script in Blender's Scripting tab, it will:\n\n1. Clear the scene of any existing objects.\n2. Add a new torus object at the origin.\n3. Define animation parameters, including frequency and amplitude for the sine wave motion, as well as the number of cycles.\n4. Calculate and apply location keyframes to make the torus oscillate along the Z-axis over a specified number of frames"
    },
    {
        "Text Input": "A sphere tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a sphere tilt back and forth, you can use the following script. This will automate the creation of a sphere, and set up a simple animation for it to tilt along the X-axis.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Delete all objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef create_sphere():\n    # Create a UV sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    sphere = bpy.context.object\n    sphere.name = 'TiltSphere'\n    return sphere\n\ndef tilt_sphere(sphere, frames=50, max_angle=30):\n    # Set initial keyframe\n    sphere.rotation_euler[0] = 0\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\n    # Set keyframe for tilt in one direction\n    sphere.rotation_euler[0] = max_angle * (3.14159 / 180)  # Convert degrees to radians\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=frames//2, index=0)\n\n    # Set keyframe to return to the initial position\n    sphere.rotation_euler[0] = 0\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=frames, index=0)\n\n    # Set keyframe to tilt in the opposite direction\n    sphere.rotation_euler[0] = -max_angle * (3.14159 / 180)  # Convert degrees to radians\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=3*frames//2, index=0)\n\n    # Set keyframe to return to the rest position again\n    sphere.rotation_euler[0] = 0\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=2*frames, index=0)\n\ndef setup_animation():\n    # Set the end frame for the animation\n    bpy.context.scene.frame_end = 100\n\ndef main():\n    clear_scene()\n    sphere = create_sphere()\n    tilt_sphere(sphere)\n    setup_animation()\n\nmain()\n```\n\n### Explanation:\n\n1. **Function Definitions**:\n    - `clear_scene()`: Deletes all objects in the current scene to start with a clean slate.\n    - `create_s"
    },
    {
        "Text Input": "A cone orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cone orbits around another object, such as a sphere, you can utilize Blender's Python API to set up the scene, create the objects, and animate the cone to orbit the sphere. Below is a script that accomplishes this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a sphere at the origin\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Central_Sphere\"\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1.5, location=(3, 0, 0))\ncone = bpy.context.object\ncone.name = \"Orbiting_Cone\"\n\n# Prepare a collection for the animation\nscene = bpy.context.scene\nscene.frame_start = 0\nscene.frame_end = 250\n\n# Set up animation for the cone\nfor frame in range(scene.frame_start, scene.frame_end + 1):\n    # Calculate the angle based on the frame number\n    angle = math.radians(frame * 360 / scene.frame_end)\n    \n    # Set the new location of the cone with respect to the sphere\n    distance = 3  # Distance from the sphere\n    cone.location = (distance * math.cos(angle), distance * math.sin(angle), 0)\n    \n    # Keyframe the new location\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Animation setup complete.\")\n```\n\n### How the Script Works:\n- **Clear Existing Mesh Objects**: The script starts by clearing existing meshes in the scene to ensure a fresh start.\n- **Create a Sphere**: It creates a sphere at the origin to serve as the central object.\n- **Create a Cone**: A cone is created at a certain offset from the sphere, which represents its initial position.\n- **Animation Setup**: The script sets up an animation by looping through frames. For each frame, it calculates a new position for the cone using trigonometric functions to simulate circular motion around the sphere.\n- **Keyframing**: The script sets keyframes for the cone's location for each frame to create the animation.\n\n### Execution\n1"
    },
    {
        "Text Input": "A monkey slides from top to bottom.",
        "Blender Script": "To create a simple Blender animation script where a monkey (represented by the Suzanne mesh) slides from the top to the bottom of the scene, you can use the following Python script. This script sets up a basic animation by moving Suzanne from a higher point in the Z-axis to a lower one and keyframing the positions for an animation effect.\n\n```python\nimport bpy\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a plane to act as the ground\nbpy.ops.mesh.primitive_plane_add(size=10, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Add a Suzanne (monkey) mesh\nbpy.ops.mesh.primitive_monkey_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 5))\nmonkey = bpy.context.active_object\n\n# Add a basic material to the monkey\nmat = bpy.data.materials.new(name=\"MonkeyMaterial\")\nmat.diffuse_color = (0.8, 0.5, 0.2, 1)  # RGBA\nmonkey.data.materials.append(mat)\n\n# Set frames for the animation\nstart_frame = 1\nend_frame = 60\n\n# Set initial location and keyframe it\nmonkey.location = (0, 0, 5)\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set final location and keyframe it\nmonkey.location = (0, 0, 1)\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set interpolation to make the slide smoother\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\n# Optional: Set up the camera\nbpy.ops.object.camera_add(align='VIEW', location=(7, -7, 5))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\ncamera.rotation_euler = (1.1, 0, 0.8)\n\n# Optional: Add a light source\nbpy.ops.object.light_add(type='SUN', radius=1, location=(5, 5, 5))\n\nprint(\"Animation setup complete"
    },
    {
        "Text Input": "A cylinder expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a cylinder expand and shrink, we will use Blender's `bpy` module to animate the scaling of a cylinder object. This script assumes you are starting with an open Blender project. Here's the script:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = 'ExpandingCylinder'\n\n# Set animation parameters\nframe_start = 1\nframe_end = 100\nscale_min = 0.5\nscale_max = 2.0\n\n# Function to add scale keyframes\ndef add_scale_keyframes(obj, frame, scale_factor):\n    obj.scale = (scale_factor, scale_factor, scale_factor)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame)\n\n# Animate the cylinder\ncurrent_frame = frame_start\nscale_factor = scale_min\nscaling_up = True\n\nwhile current_frame <= frame_end:\n    add_scale_keyframes(cylinder, current_frame, scale_factor)\n    \n    if scaling_up:\n        scale_factor += (scale_max - scale_min) / (frame_end / 2)\n        if scale_factor >= scale_max:\n            scaling_up = False\n    else:\n        scale_factor -= (scale_max - scale_min) / (frame_end / 2)\n        if scale_factor <= scale_min:\n            scaling_up = True\n            \n    current_frame += (frame_end / 20)  # Keyframe every 5 frames for smoother animation\n\n# Set the timeline range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nprint(\"Animation setup complete. Play the animation to see the cylinder expand and shrink.\")\n```\n\n### Instructions\n\n1. Open Blender and ensure you're in the scripting tab or text editor.\n2. Copy and paste the above script into a new script file in Blender.\n3. Run the script by clicking on the \"Run Script\" button.\n\n### Details\n\n- **Initial Setup**: The script deletes all existing objects and then adds a new cylinder.\n- **Animation**: The cylinder is animated to expand and shrink between a minimum and maximum scale factor. This is done"
    },
    {
        "Text Input": "A cube zooms in and out.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that animates a cube to zoom in and out. This script assumes that you have a cube object present in your Blender scene. The script will create a simple animation where the cube zooms in and out by modifying its scale.\n\n```python\nimport bpy\n\n# Clear existing animation data\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Define the cube object\ncube = bpy.data.objects.get(\"Cube\")\nif not cube:\n    raise ValueError(\"Cube object not found in the scene.\")\n\n# Set initial scale\ncube.scale = (1, 1, 1)\n\n# Insert keyframes for initial scale\ncube.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Scale up to zoom in\ncube.scale = (3, 3, 3)\ncube.keyframe_insert(data_path=\"scale\", frame=25)\n\n# Scale back to original to zoom out\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Scale down for a reverse zoom effect\ncube.scale = (0.5, 0.5, 0.5)\ncube.keyframe_insert(data_path=\"scale\", frame=75)\n\n# Scale back to original scale to complete the cycle\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=100)\n\n# Setting up the interpolation type for a smoother animation\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Play the animation in the timeline\nbpy.context.scene.frame_current = 1\nbpy.ops.screen.animation_play()\n```\n\n### How to Use the Script\n\n1. **Open Blender**: Start Blender and ensure the default cube is present in your scene.\n   \n2. **Switch to \"Scripting\" Workspace**: Go to the \"Scripting\" workspace in Blender where you can run Python scripts.\n\n3. **Create a New Text Block**: In the \"Text Editor\", create a new text block and copy the script above into it.\n\n4. **Run the Script**: Click on `Run Script` while in the Text Editor. The animation should start automatically.\n\n5. **View the Animation**: Switch to the \"Timeline\" view to see"
    },
    {
        "Text Input": "A plane zooms in and out.",
        "Blender Script": "To create a Blender Python script where a plane object repeatedly zooms in and out, you can animate the scale of the plane using keyframes. Here's a script that does this:\n\n```python\nimport bpy\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Access the recently created plane object\nplane = bpy.context.object\n\n# Set the number of frames for the animation\nstart_frame = 1\nend_frame = 120\n\n# Add scale keyframes for the plane on the first cycle\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\nplane.scale = (3, 3, 3)  # Zoom in\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame + 30)\n\nplane.scale = (1, 1, 1)  # Return to original size\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame + 60)\n\n# Repeat zoom in and out\nplane.scale = (3, 3, 3)  # Zoom in\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame + 90)\n\nplane.scale = (1, 1, 1)  # Return to original size\nplane.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = end_frame\n```\n\n### Steps to Use This Script:\n\n1. Open Blender and go to the scripting workspace.\n2. Create a new text file and paste the script into it.\n3. Press `Run Script` to execute the script.\n4. Switch to the Animation workspace or Timeline view to see the keyframes.\n5. Play the animation to watch the plane zoom in and out.\n\n### Explanation:\n- **Plane Creation:** The script starts by deleting all current objects in the scene and then creates a plane.\n- **Keyframe Animation:** \n  - The `scale` property of the plane is animated with keyframes to create a zooming effect. \n  - The plane starts at its original size, zooms in by scaling up to 3 times, and then returns to its original size.\n  - This cycle"
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "To create a Blender Python script where a sphere moves in a circular path, we can animate the sphere along a circular trajectory using keyframes. Here\u2019s a simple script using Blender's Python API that achieves this:\n\n```python\nimport bpy\nimport math\n\n# Clean up existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set number of frames for a full circle\nframes_in_circle = 120  # Adjust this for the speed of motion, 120 frames for a 5 second loop at 24fps\n\n# Circular path properties\nradius = 5\ncenter_x, center_y, center_z = 0, 0, 0\n\n# Animate the sphere along a circular path\nfor frame in range(frames_in_circle + 1):\n    # Calculate position on the circle\n    angle = (2 * math.pi / frames_in_circle) * frame\n    x = center_x + radius * math.cos(angle)\n    y = center_y + radius * math.sin(angle)\n    z = center_z  # Keep the sphere on the same z-axis level\n\n    # Set the location of the sphere\n    sphere.location = (x, y, z)\n\n    # Insert a keyframe for the location at the current frame\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frames_in_circle\n\n# Optional: Set interpolation to linear to ensure constant speed\nfor fc in sphere.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Animation of a sphere moving in a circular path is created.\")\n```\n\nHere\u2019s a breakdown of what the script does:\n\n1. Deletes any existing objects in the scene to start fresh.\n2. Creates a UV sphere at the origin.\n3. Defines the parameters for the circular path, like the number of frames for one complete circle and the radius of the circle.\n4. Loops through the frames, calculates the position of the sphere along the circular path for each frame, and inserts keyframes.\n5. Sets the total number of animation frames.\n6. Optionally, it sets the interpolation type of the"
    },
    {
        "Text Input": "A cube scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a cube scale up and down, you'll want to animate the scale property over time. Here's a simple script that you can run in Blender's scripting editor to achieve this effect:\n\n```python\nimport bpy\n\n# Delete all existing objects first\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set initial scale\ncube.scale = (1, 1, 1)\n\n# Get animation data and create an action for the cube\ncube.animation_data_create()\naction = bpy.data.actions.new(name=\"CubeScaleAnimation\")\ncube.animation_data.action = action\n\n# Create fcurves for each scale axis\nfcurves = [action.fcurves.new(data_path=\"scale\", index=i) for i in range(3)]\n\n# Define keyframes for scaling up and down\nkeyframes = [\n    (0, 1),    # Frame 0, scale 1\n    (20, 2),   # Frame 20, scale 2 (scaling up)\n    (40, 1),   # Frame 40, scale 1 (scaling down)\n    (60, 0.5), # Frame 60, scale 0.5 (scale down further)\n    (80, 1)    # Frame 80, scale back to 1\n]\n\n# Append the keyframes to each fcurve\nfor fcurve in fcurves:\n    for frame, scale in keyframes:\n        fcurve.keyframe_points.add(1)\n        fcurve.keyframe_points[-1].co = (frame, scale)\n\n# Set interpolation type to make it look smoother\nfor fcurve in fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = 100\n\n# Optional: play the animation\nbpy.ops.screen.animation_play()\n\n# Note: Blender must be running with UI present to execute this script, \n# and the Timeline should be visible to see the animation.\n```\n\nThis script:\n\n1. Clears the scene of all objects to start fresh.\n2. Adds a cube at the origin.\n3. Creates an action and f"
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a simple Blender animation where a cone slides from the top to the bottom of the scene, you can use the following script. This script sets up a basic animation where a cone object moves along the Z-axis from a higher position to a lower one over a specified number of frames.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 5))\ncone = bpy.context.active_object\n\n# Set the animation duration\nstart_frame = 1\nend_frame = 50\n\n# Initial keyframe at the top position\ncone.location.z = 5.0\ncone.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n# Final keyframe at the bottom position\ncone.location.z = 0.0\ncone.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Set the animation playback settings\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_set(start_frame)\n\n# Set the scene to start playing the animation\nbpy.ops.screen.animation_play()\n\n```\n\n### Instructions to Use the Script:\n\n1. **Open Blender**: Launch your Blender application.\n2. **Switch to the Scripting Workspace**: You can find it at the top menu bar or create a new panel by splitting your current workspace.\n3. **Create a New Script**: Click on the \"New\" button in the scripting area to create a new text block.\n4. **Paste the Script**: Copy the script above into the text editor.\n5. **Run the Script**: Click the \"Run Script\" button to execute the script. This will initiate the animation in the timeline.\n\n### Script Explanation:\n\n- **Delete Existing Objects**: The script begins by removing all existing objects from the scene to ensure a clean start.\n- **Create a Cone**: A new cone is added to the scene at a specific initial location along the Z-axis.\n- **Animation Setup**: The animation spans 50 frames. The cone's z-axis position changes from 5 (top) to 0 (bottom).\n- **Keyframing**: The position is keyfr"
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "Certainly! Below is a basic Blender Python script to animate a plane scaling up and down. The animation will loop by scaling the plane from its original size to a larger size and back to the original size. This example assumes that you are using Blender's Python environment.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False)\nplane = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 100\nbpy.context.scene.frame_end = total_frames\n\n# Function to set keyframes for scaling the plane\ndef scale_plane(object, frame, scale_vector):\n    bpy.context.scene.frame_set(frame)\n    object.scale = scale_vector\n    object.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Initial scale (time = 0)\ninitial_scale = (1, 1, 1)\nscale_plane(plane, 1, initial_scale)\n\n# Scaled up size (time = 50)\nscaled_up = (2, 2, 2)\nscale_plane(plane, total_frames // 2, scaled_up)\n\n# Return to initial scale (time = 100)\nscale_plane(plane, total_frames, initial_scale)\n\n# Set interpolation to linear for smooth scaling\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Playback the animation\nbpy.ops.screen.animation_play()\n```\n\n### Instructions:\n\n1. Open Blender and go to the \"Scripting\" tab.\n2. Create a new text block and paste the script above.\n3. Run the script by clicking on the \"Run Script\" button in the text editor.\n\n### Explanation:\n\n- **Plane Creation**: The script creates a new plane and ensures no other mesh objects are in the scene.\n- **Scaling Animation**: The plane will scale up from its original size to twice its size and back to its original size over 100 frames.\n- **Keyframing**: The `scale_plane` function is used to insert keyframes at various points, defining the scaling transitions.\n- **Linear Interpolation**: Ensures smooth transitions between keyframes.\n- **Playback**"
    },
    {
        "Text Input": "A cylinder jumps up and lands.",
        "Blender Script": "To create a simple animation in Blender where a cylinder jumps up and lands, you can use the following Python script. This script uses Blender's Python API (bpy) to create a cylinder, set up the animation, and keyframe the movement.\n\nBefore running the script, ensure Blender is open with a new or empty project. Then open the Scripting workspace and paste the script into a new script tab. Press the \"Run Script\" button to execute it.\n\n```python\nimport bpy\n\n# Delete all mesh objects to start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set the animation frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 40\n\n# Initial keyframe (Frame 1: Starting point)\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", frame=1)\n\n# Frame 20: Cylinder at the peak of the jump\ncylinder.location = (0, 0, 5)\ncylinder.keyframe_insert(data_path=\"location\", frame=20)\n\n# Frame 40: Cylinder lands back to the start position\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", frame=40)\n\n# Set the interpolation type to 'LINEAR' for a simple up and down motion\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optional: Set the end frame back to 40 for a seamless loop\nbpy.context.scene.frame_end = 40\n\nprint(\"Jump animation created successfully!\")\n```\n\nExplanation of the script:\n\n1. **Delete Existing Meshes**: The script starts by clearing any existing mesh objects in the scene.\n\n2. **Add a Cylinder**: It creates a new cylinder primitive and places it above the ground.\n\n3. **Setup Animation Frames**: The script specifies the frame range for the animation (1 to 40).\n\n4. **Insert Keyframes**: \n   - At frame 1"
    },
    {
        "Text Input": "A cylinder moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that moves a cylinder in a spiral motion, we can utilize Blender's `bpy` module to create a cylinder and animate it along a spiral path. Here's a script that demonstrates how to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Parameters for the spiral\nnum_frames = 250\nspirals = 3  # Number of spiral loops\nheight = 10.0  # Total height of the spiral\nradius = 5.0  # Maximum radius of the spiral\n\n# Animate the cylinder\nfor frame in range(num_frames):\n    # Progress from 0 to 1 over num_frames\n    progress = frame / (num_frames - 1)\n    \n    # Calculate the spiral position\n    angle = 2 * math.pi * spirals * progress\n    x = radius * progress * math.cos(angle)\n    y = radius * progress * math.sin(angle)\n    z = height * progress\n    \n    # Set the location\n    cylinder.location = (x, y, z)\n    \n    # Insert keyframe\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the scene's frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = num_frames\n```\n\n### Explanation:\n- **Clear Existing Mesh**: The script starts by clearing all existing mesh objects in the scene.\n- **Create a Cylinder**: A cylinder is created at the origin.\n- **Spiral Parameters**: Define the number of frames, number of spirals, total height, and maximum radius of the spiral path.\n- **Animate the Cylinder**:\n  - We loop over each frame and calculate the position on the spiral path.\n  - The `angle` determines the rotation around the z-axis based on the current progress along the spiral.\n  - The `x`, `y`, and `z` coordinates are determined for each frame based on the spiral equations.\n  - The cylinder's location is updated, and a location keyframe is inserted for each frame.\n- **Set Frame Range**"
    },
    {
        "Text Input": "A torus moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a torus moves from left to right, you can use the following Python script. This script will use Blender's scripting capabilities to add a torus to the scene, set up keyframes to animate its movement, and play the animation.\n\nHere's a step-by-step script:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(location=(-3, 0, 0))  # Start position on the left\ntorus = bpy.context.active_object\n\n# Set up animation frame range\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert initial location keyframe at the start frame\ntorus.location = (-3, 0, 0)  # Starting position on the left\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Insert final location keyframe at the end frame\ntorus.location = (3, 0, 0)  # End position on the right\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optional: Set the scene to the shading mode where you can view the movement better\nbpy.context.space_data.shading.type = 'MATERIAL'\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\n```\n\nTo use this script:\n\n1. Open Blender and go to the \"Scripting\" workspace.\n2. Create a new text block and copy-paste the script into it.\n3. Press the \"Run Script\" button to execute the script.\n\nThis will animate a torus moving from a location of (-3, 0, 0) to (3, 0, 0) over 100 frames. You can adjust the starting and ending positions, or the number of frames to suit your needs. The animation will be set up in Blender to loop through these frames, showing the torus moving from left to right. Adjust the shading type by changing the `shading.type` line to view the object in different modes, if desired."
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a sphere moving in a circular path, follow these steps. The script will set up a scene in Blender, create a sphere, and animate it along a circular path.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(1, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"AnimatedSphere\"\n\n# Define the circular path properties\nradius = 5\ncenter = (0, 0, 0)\nframe_start = 0\nframe_end = 250\nnum_frames = frame_end - frame_start + 1\nangle_increment = 2 * math.pi / num_frames\n\n# Set the animation keyframes\nfor frame in range(frame_start, frame_end + 1):\n    angle = frame * angle_increment\n    x = center[0] + radius * math.cos(angle)\n    y = center[1] + radius * math.sin(angle)\n    \n    sphere.location = (x, y, center[2])\n\n    # Insert keyframe for the location at current frame\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set interpolation type for smoother circular motion\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf_point in fcurve.keyframe_points:\n        kf_point.interpolation = 'LINEAR'\n\n# Set playback range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set the end frame for the scene\nbpy.context.scene.frame_end = frame_end\n\n# Set the scene's render resolution and output properties for animation\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\nbpy.context.scene.render.filepath = \"//circular_animation.mp4\"\n```\n\n### Explanation:\n\n1. **Scene Preparation**:\n    - Deletes any existing mesh objects in the scene to start with a clean slate.\n\n2. **Sphere Creation**:\n    - Adds a UV sphere to the scene. This will be animated along a circular path.\n\n3. **Animation Setup**:\n    - Defines a circular path with specified"
    },
    {
        "Text Input": "A cone wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a cone wiggle side to side, you'll need to animate the movement of a cone object along the X-axis. Below is a script that demonstrates how to create a cone and apply a wiggling motion using keyframe animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Define the frame range for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_end = end_frame\n\n# Define wiggle parameters\nwiggle_amplitude = 2  # The amount of wiggle to the side\nwiggle_frequency = 10  # The wiggling speed\n\n# Insert keyframes for wiggling animation\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the X position using a sine wave\n    x_position = wiggle_amplitude * math.sin(wiggle_frequency * frame * (2 * math.pi / (end_frame - start_frame)))\n    \n    # Set the cone's location\n    cone.location.x = x_position\n    \n    # Insert keyframe for the X location\n    cone.keyframe_insert(data_path=\"location\", index=0)\n\n# Set interpolation to linear for smoother motion\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\nprint(\"Cone wiggling animation created successfully.\")\n```\n\n### Explanation:\n\n- **Clear Existing Meshes**: The script first clears existing mesh objects to ensure the scene is clean.\n- **Create Cone**: A new cone is created at the origin with default dimensions.\n- **Animation Setup**: The script sets up an animation that runs from frame 1 to frame 100.\n- **Wiggle Parameters**: The amplitude and frequency determine how much and how fast the cone wiggles.\n- **Keyframe Insertion**: For each frame, the script calculates a new X position using a sine function to simulate wiggling and"
    },
    {
        "Text Input": "A torus performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a torus in Blender using a Python script, you'll need to animate the Z-location of the torus object. This script will add a simple keyframe animation to achieve the bouncing effect. Here's how you can do it:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = \"BouncingTorus\"\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 100\nbounces = 5\namplitude = 2.0  # The maximum height of the bounce\n\n# Add keyframes for bouncing\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the bounce factor using a sine wave for smooth transition\n    # Scale the wave and move it to positive range using math.pi * bounces\n    bounce_factor = abs(math.sin(math.pi * bounces * (frame - start_frame) / (end_frame - start_frame)))\n    \n    # Set the Z location using the bounce factor\n    torus.location.z = bounce_factor * amplitude\n    \n    # Insert a keyframe for the location\n    torus.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set interpolation to linear for consistent bouncing (optional)\nfor fcurve in torus.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Bouncing torus animation created!\")\n```\n\n### How It Works:\n- **Torus Creation:** We start by adding a torus to the scene.\n- **Animation Parameters:** Define the start and end frame of the animation, the number of bounces, and the amplitude of the bounce.\n- **Keyframe Insertion:** For each frame, calculate the bounce factor using a sine wave function to simulate smooth up-and-down movement. The Z-location of the torus is adjusted based on this factor, and a keyframe is inserted.\n- **Linear Interpolation (Optional):"
    },
    {
        "Text Input": "A cone moves diagonally upwards.",
        "Blender Script": "To create a script that generates a cone and animates it moving diagonally upwards in Blender, you can use the Blender Python API. Here's a basic script that accomplishes this task:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(\n    vertices=32, \n    radius1=1, \n    radius2=0, \n    depth=2, \n    enter_editmode=False, \n    align='WORLD', \n    location=(0, 0, 0), \n    scale=(1, 1, 1)\n)\ncone = bpy.context.active_object\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Set initial keyframe (starting position)\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set final keyframe (ending position)\ncone.location = (5, 5, 5)\ncone.keyframe_insert(data_path=\"location\", frame=100)\n\n# Optionally, set the type of interpolation\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the timeline to the starting frame\nbpy.context.scene.frame_current = bpy.context.scene.frame_start\n```\n\nHere's a breakdown of the script:\n\n1. **Clearing the Scene**: The script starts by selecting and deleting all existing objects in the scene to ensure a clean slate.\n\n2. **Adding a Cone**: The `bpy.ops.mesh.primitive_cone_add()` function adds a cone to the scene with specified parameters.\n\n3. **Frame Range**: The animation is set to run from frame 1 to frame 100.\n\n4. **Initial Keyframe**: Sets the initial location of the cone at frame 1 to the origin `(0, 0, 0)` and inserts a keyframe for the location.\n\n5. **Final Keyframe**: Sets the final location of the cone at frame 100 to `(5, 5, 5)`, making it move diagonally upwards, and inserts a keyframe for the location.\n\n6. **Optional Interpolation**: The loop goes through the"
    },
    {
        "Text Input": "A monkey spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne, the default Blender monkey head) spin while floating, you'll need to use Blender's Python API to set up the animation. Below is a script that you can execute in Blender's scripting editor:\n\n```python\nimport bpy\n\n# Delete existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add monkey (Suzanne) mesh\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 2))\nmonkey = bpy.context.active_object\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Add keyframes for rotation to make the monkey spin\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\nmonkey.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Add keyframes for location to make the monkey float up and down\nmonkey.location = (0, 0, 2)\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\nmonkey.location = (0, 0, 4)\nmonkey.keyframe_insert(data_path=\"location\", frame=int((start_frame + end_frame) / 2))\n\nmonkey.location = (0, 0, 2)\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Add interpolation for a smoother animation\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR' if fcurve.data_path == \"rotation_euler\" else 'SINE'\n\n# Set the 3D View to Frame Start\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Monkey spin and float animation created!\")\n```\n\n### How the Script Works\n\n- **Delete Existing Objects**: The script starts by deleting existing mesh objects to ensure a clean scene.\n- **Add Suzanne**: The monkey head (Suzanne) is added at a height of 2 Blender units.\n"
    },
    {
        "Text Input": "A monkey tilts back and forth.",
        "Blender Script": "To create a script for Blender that makes a monkey (Suzanne) tilt back and forth, you can use the following Python script. This will animate Suzanne to tilt along the X-axis over a given duration. Here\u2019s the Python code you can use:\n\n```python\nimport bpy\n\ndef create_suzanne_tilting_animation():\n    # Remove existing objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Add a monkey (Suzanne) mesh\n    bpy.ops.mesh.primitive_monkey_add(size=2.0, location=(0, 0, 0))\n    suzanne = bpy.context.active_object\n    \n    # Set the animation parameters\n    total_frames = 60  # Total frames for the animation\n    tilt_angle = 30    # Maximum tilt angle in degrees\n\n    # Insert keyframes for tilting back and forth\n    for frame in range(total_frames):\n        bpy.context.scene.frame_set(frame)\n        \n        # Calculate the tilt angle for the current frame\n        angle = tilt_angle * (1 if (frame // 15) % 2 == 0 else -1)\n        \n        # Apply rotation\n        suzanne.rotation_euler = (angle if frame % 30 else -angle, 0, 0)\n        \n        # Insert keyframe\n        suzanne.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n    # Set the scene's frame start and end\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = total_frames - 1\n\n# Run the function to create the animation\ncreate_suzanne_tilting_animation()\n```\n\n### Instructions to Run this Script:\n1. Open Blender.\n2. Open a new or existing project.\n3. Open a scripting tab or create a new text block in the text editor.\n4. Copy the above script into Blender\u2019s text editor.\n5. Click on \"Run Script\" to execute.\n\nThis script will automatically delete any existing objects in the scene, create a new Suzanne (monkey) mesh, and set keyframes so that it tilts back and forth. The keyframes are set on the X-axis rotation of the mesh, alternating the tilt direction every 15 frames over a total of 60 frames. The tilt motion will continue forward and backward, creating a repetitive animation loop. Adjust `total_frames` and `tilt_angle`"
    },
    {
        "Text Input": "A torus performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a torus using Blender's Python API, you can set up keyframe animations for the object's Z-axis location to simulate bouncing. This script will create a torus and animate it with a simple bouncing motion.\n\nHere's a basic script to achieve this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 1))  # Start slightly above the ground\ntorus = bpy.context.object\n\n# Set up animation parameters\nbounce_height = 2\nframes_per_bounce = 20\nnum_bounces = 5\n\n# Set keyframes for the bouncing effect\nfor bounce in range(num_bounces):\n    start_frame = bounce * frames_per_bounce\n    peak_frame = start_frame + frames_per_bounce // 2\n    end_frame = start_frame + frames_per_bounce\n\n    # Set keyframes\n    torus.location.z = 1.0  # Starting height\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n    torus.location.z = 1.0 + bounce_height  # Peak height\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=peak_frame)\n\n    torus.location.z = 1.0  # Ending height (back to bounce start)\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Set interpolation to 'LINEAR' to avoid easing in/out\naction = torus.animation_data.action\nfor fcurve in action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = end_frame\n\n# Optionally, adjust the gravity for a more realistic bounce\n# bpy.context.scene.gravity[2] = -9.81 # Enable physics if you want to simulate gravity\n```\n\n### How the Script Works\n1. **Create a Torus**: The script starts by creating a torus at a starting height of `1` unit to give it space to \"bounce\".\n\n2. **Animation Keyframes**: Use a loop to animate the torus for a specified number of bounces:\n  "
    },
    {
        "Text Input": "A plane tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a plane tilting back and forth, we'll use the scripting capabilities within Blender. This script will create a plane and then add a simple animation to tilt the plane back and forth.\n\nHere's a script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set animation properties\nframe_start = 1\nframe_end = 60\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Define rotation keyframes\ntilt_angle = math.radians(30)  # Tilt angle in radians\n\n# Initial keyframe at frame_start\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Tilt forward at quarter way\nmid_forward = (frame_start + frame_end) // 4\nplane.rotation_euler = (tilt_angle, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=mid_forward)\n\n# Back to neutral at half-way point\nmid_point = (frame_start + frame_end) // 2\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=mid_point)\n\n# Tilt backward at three-quarters of the way\nmid_backward = 3 * (frame_start + frame_end) // 4\nplane.rotation_euler = (-tilt_angle, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=mid_backward)\n\n# Return to initial position at frame_end\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation to linear for more constant motion\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Plane tilt animation created.\")\n```\n\nTo use this script:\n\n1. Open Blender and switch to the Scripting workspace"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, you can use a script that leverages Blender's animation system. This script will create a plane, and then animate it so it appears to bounce up and down over time. Here's an example script:\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing mesh objects in the scene\ndef clear_mesh_objects():\n    bpy.ops.object.select_all(action='DESELECT')\n    for obj in bpy.data.objects:\n        if obj.type == 'MESH':\n            obj.select_set(True)\n    bpy.ops.object.delete()\n\n# Clear existing mesh objects\nclear_mesh_objects()\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"BouncingPlane\"\n\n# Define bounce parameters\nbounce_height = 2  # The height of the bounce\nbounce_duration = 30  # Number of frames for a complete bounce loop\ntotal_frames = 120  # Total number of frames to animate\n\n# Add animation keyframes for bouncing effect\nfor frame in range(total_frames):\n    t = frame / bounce_duration  # Normalize time for a single bounce cycle\n    # Calculate the Z position using a sine function for smooth bounce\n    z_position = bounce_height * abs(math.sin(math.pi * t))\n    \n    # Set the frame and location of the plane\n    plane.location = (0, 0, z_position)\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = total_frames\n\n# Set the timeline to start the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_set(0)\n```\n\n### Explanation:\n\n1. **Clear Existing Objects:** The script begins by clearing any existing mesh objects in the scene using `bpy.ops.object.delete()`.\n\n2. **Create a Plane:** It then creates a new plane using `bpy.ops.mesh.primitive_plane_add()`.\n\n3. **Bounce Parameters:** \n   - `bounce_height` determines how high the plane will bounce.\n   - `bounce_duration` sets the number of frames for one complete bounce loop.\n   - `total_frames` is the total number of frames over which the animation occurs.\n\n4. **Animation Loop:** \n   - The script loops over the range of frames to create a"
    },
    {
        "Text Input": "A sphere performs a bouncing effect.",
        "Blender Script": "To create a bouncing sphere animation in Blender using a Python script, you'll use the `bpy` module to set up the sphere, the scene, and animate it over time. Below is an example script that achieves this effect:\n\n```python\nimport bpy\n\n# Clear existing mesh and objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nsphere = bpy.context.object\nsphere.name = \"BouncingSphere\"\n\n# Set the frame start and end for the animation\nframe_start = 1\nframe_end = 100\n\n# Set initial keyframe for sphere (starting point)\nsphere.location = (0, 0, 1)\nsphere.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Create bounce effect by modifying location and inserting keyframes\nbounce_height = 3\nfor frame in range(frame_start, frame_end + 1, 10):\n    # Calculate bounce factor: alternate between the ground (0) and max height\n    bounce_factor = bounce_height if (frame // 10) % 2 == 0 else 1\n    \n    # Update sphere's Z location\n    sphere.location.z = bounce_factor\n    \n    # Insert keyframe at each step\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Spline interpolation for a smoother bounce\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Set render options\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set viewport shading to render preview\nbpy.context.space_data.shading.type = 'RENDERED'\n\nprint(\"Bouncing sphere animation setup completed.\")\n```\n\n### Breakdown of the Script:\n\n1. **Object and Scene Setup**:\n   - It clears existing mesh objects to start with a fresh scene.\n   - It adds a UV sphere located slightly above the ground plane to start the bounce.\n\n2. **Animation Setup**:\n   - Sets initial and subsequent keyframes for the sphere's bouncing effect by alternating its Z position.\n   - Uses a simple logic to determine whether the sphere should be at the top of its"
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "To create a Blender Python script that makes a torus flip upside down, we can animate its rotation. Below is a script that sets up a torus and animates its rotation from 0 to 180 degrees around the X-axis, effectively flipping it upside down.\n\n```python\nimport bpy\n\ndef create_torus():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Add a torus\n    bpy.ops.mesh.primitive_torus_add(\n        align='WORLD',\n        location=(0, 0, 0),\n        rotation=(0, 0, 0)\n    )\n    torus = bpy.context.active_object\n    torus.name = \"FlippingTorus\"\n    return torus\n\ndef animate_flip(torus):\n    # Set the frame range\n    total_frames = 60\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = total_frames\n    \n    # Set initial keyframe for rotation\n    torus.rotation_euler = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n    \n    # Set final keyframe for rotation (180 degrees around the X-axis)\n    torus.rotation_euler = (3.14159, 0, 0)  # 180 degrees in radians\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\ndef setup_world():\n    # Optionally, you can setup the world\n    bpy.context.scene.world.color = (0.05, 0.05, 0.05)\n\ndef main():\n    setup_world()\n    torus = create_torus()\n    animate_flip(torus)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions\n\n1. **Open Blender**: Launch Blender and ensure you are in the scripting workspace.\n   \n2. **Create New Script**: Copy the above script into a new text block in Blender's text editor.\n\n3. **Run Script**: Click on the \"Run Script\" button. The torus will be created and animated to flip upside down.\n\n4. **Playback Animation**: Go to the \"Timeline\" window and press the play button to see the torus animate.\n\nThis script initializes a torus, sets up a simple animation to"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a cube expand and shrink, you can use the following script. This script sets up a simple animation where the cube scales up and then scales back down over time.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.object\n\n# Define frames for the animation\nstart_frame = 1\nmid_frame = 30\nend_frame = 60\n\n# Ensure the animation is set to the correct frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the initial scale keyframe\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Set the scale at its largest\ncube.scale = (2, 2, 2)\ncube.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Return to the original scale\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation to linear for a uniform scale change\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation setup: Cube will expand and shrink.\")\n```\n\nThis script performs the following steps:\n\n1. **Setup:** Clears existing objects in the scene to start with a clean state.\n\n2. **Creation:** Adds a new cube at the origin.\n\n3. **Animation Frames:** Defines the frames for the start, middle, and end of our animation.\n\n4. **Keyframing:**\n   - Sets the initial scale at `start_frame` to `(1, 1, 1)`.\n   - Sets the cube to expand to twice its size `(2, 2, 2)` at `mid_frame`.\n   - Brings the scale back to the original size at `end_frame`.\n\n5. **Interpolation:** Ensures that the animation moves linearly from one keyframe to another for a smooth and even scaling effect.\n\nRun this script in Blender's scripting editor to set up and view the animation. You can adjust the frame numbers and scale factors to customize the speed and"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a basic animation of a sphere expanding and contracting over time.\n\n```python\nimport bpy\n\n# Delete the default cube if it exists\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"ExpandingSphere\"\n\n# Set keyframe for initial size\ninitial_scale = (1, 1, 1)\nsphere.scale = initial_scale\nsphere.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Set keyframe for expanded size\nexpanded_scale = (2, 2, 2)  # Change these values for a larger expansion\nsphere.scale = expanded_scale\nsphere.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Set keyframe for shrunken size\nshrunken_scale = (0.5, 0.5, 0.5)  # Change these values for a smaller shrink\nsphere.scale = shrunken_scale\nsphere.keyframe_insert(data_path=\"scale\", frame=100)\n\n# Set keyframe back to initial size\nsphere.scale = initial_scale\nsphere.keyframe_insert(data_path=\"scale\", frame=150)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = 150\n\n# Set the frame rate of the scene if necessary\nbpy.context.scene.render.fps = 24\n\n# Optional: Set interpolation type to linear to make the animation linear\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Sphere expansion and contraction animation created.\")\n```\n\nThis script:\n\n1. Deletes the default cube object if it exists.\n2. Creates a UV sphere object.\n3. Animates the sphere to expand and contract over several frames:\n   - Starts with an initial scale of 1.0.\n   - Expands to a scale of 2.0 at frame 50.\n   - Shrinks to a scale of 0.5 at frame 100.\n   - Returns to the initial scale by frame 150.\n4. Sets the total length of the animation to 150 frames"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "To create a Blender Python script that animates a cube expanding and shrinking, you can use the following script. This script utilizes Blender's `bpy` module to create a keyframe animation where a cube expands and then shrinks back to its original size.\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the number of frames for the animation\nframe_start = 1\nframe_expand = 30\nframe_shrink = 60\nframe_end = 90\n\n# Set the initial scale and insert a keyframe\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n# Expand the cube and insert a keyframe\ncube.scale = (2, 2, 2)\ncube.keyframe_insert(data_path=\"scale\", frame=frame_expand)\n\n# Shrink the cube back to its original size and insert a keyframe\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=frame_shrink)\n\n# Final frame back to initial size to loop seamlessly\ncube.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set the timeline to match the animation length\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optionally, set the frames to always play in a loop for preview\nbpy.context.scene.frame_set(frame_start)\n```\n\n### Explanation:\n\n- **Create and Remove Objects**: The script starts by deleting all current objects in the scene and then adds a new cube with standard dimensions.\n\n- **Keyframe Animation**: \n  - The animation starts at `frame_start`, where the cube's scale is set to `(1, 1, 1)`.\n  - At `frame_expand`, the scale is increased to `(2, 2, 2)` to simulate expansion.\n  - At `frame_shrink`, the cube returns to its original scale.\n  - A final keyframe at `frame_end` is added to ensure the animation loops smoothly.\n\n- **Timeline Setup**: The script config"
    },
    {
        "Text Input": "A torus moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that makes a torus move in a spiral motion, you'll want to animate its position over time using a mathematical function. This script will use Blender's animation capabilities to achieve this effect.\n\nHere's a script you can use:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set the number of frames for the animation\ntotal_frames = 250\n\n# Spiral parameters\nspiral_turns = 5\nheight = 5\nradius_increment = 0.1\n\n# Insert keyframes for spiral motion\nfor frame in range(total_frames):\n    # Calculate the angle in radians for the current frame\n    angle = (2 * math.pi * spiral_turns) * (frame / total_frames)\n    \n    # Calculate the radius for the current frame\n    radius = 1 + (radius_increment * frame)\n    \n    # Calculate the z-position for the current frame\n    z_position = height * (frame / total_frames)\n    \n    # Calculate the x and y position using the spiral formula\n    x_position = radius * math.cos(angle)\n    y_position = radius * math.sin(angle)\n    \n    # Set the location of the torus\n    torus.location = (x_position, y_position, z_position)\n    \n    # Insert the keyframe for the current frame\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set frame range for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\n# Play animation (optional, in Blender environment)\n# bpy.ops.screen.animation_play()\n```\n\n### How the script works:\n- **Object Creation:** The script starts by clearing any existing objects and creating a new torus mesh.\n- **Animation Loop:** It specifies a total number of frames for the animation and iterates over each frame:\n  - **Mathematical Calculation:** It calculates the position of the torus in a spiral pattern using trigonometric functions.\n  - **Keyframe Insertion:** The calculated position is set for each frame, and a keyframe is inserted for the location attribute"
    },
    {
        "Text Input": "A plane oscillates in a sine wave.",
        "Blender Script": "To create an animation in Blender where a plane oscillates in a sine wave pattern, you can use Python scripting to achieve this. Below is a simple script that you can run in Blender's scripting editor. This script will create a plane and animate its movement in a sine wave over time.\n\n```python\nimport bpy\nimport math\n\n# Clear existing scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create Plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"OscillatingPlane\"\nplane.animation_data_clear()  # Clear any existing animation data\n\n# Set the frame range\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Create animation for the plane to oscillate in a sine wave\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the position based on a sine wave\n    x_position = frame / 10.0\n    z_position = math.sin(x_position) * 2.0  # Amplitude of 2\n\n    # Insert keyframes\n    plane.location = (x_position, 0, z_position)\n    plane.keyframe_insert(data_path=\"location\", index=-1, frame=frame)\n\n# Switch to Graph Editor and adjust interpolation to linear for smooth oscillation\nbpy.context.area.type = 'GRAPH_EDITOR'\nbpy.ops.graph.interpolation_type(type='LINEAR')\nbpy.context.area.type = 'TEXT_EDITOR'\n\nprint(\"Sine wave animation created for the plane.\")\n```\n\n### Explanation:\n- **Scene Setup**: The script begins by clearing the current scene to remove any existing objects.\n- **Plane Creation**: A new plane is added at the origin with a size of 2 units.\n- **Animation Frame Range**: The total animation frames are set from 1 to 250.\n- **Sine Wave Calculation**: For each frame, the X position is incremented, and the Z position is calculated using a sine function to create the oscillation effect.\n- **Keyframe Insertion**: The script loops over each frame, calculating the position of the plane and inserting keyframes for its location.\n- **Interpolation**: The keyframe interpolation is set to linear, ensuring a smooth"
    },
    {
        "Text Input": "A monkey scales up and down.",
        "Blender Script": "To create a Blender Python script that animates a monkey object (Suzanne) scaling up and down, you can use Blender's Python API to set keyframes and animate the scaling over time. The following script achieves this:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey (Suzanne) object\nbpy.ops.mesh.primitive_monkey_add(enter_editmode=False, align='WORLD', location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Function to set scale keyframes\ndef set_scale_keyframes(obj, frame_start, frame_end, scale_start, scale_end):\n    obj.scale = (scale_start, scale_start, scale_start)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\n    obj.scale = (scale_end, scale_end, scale_end)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set scaling keyframes for the monkey\nset_scale_keyframes(monkey, frame_start=1, frame_end=20, scale_start=1, scale_end=2)\nset_scale_keyframes(monkey, frame_start=21, frame_end=40, scale_start=2, scale_end=1)\n\n# Set the timeline to the correct frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 40\n\n# Enable automatic playing of the animation\nbpy.context.area.type = 'DOPESHEET_EDITOR'  # Switch to Dopesheet\nbpy.context.space_data.show_smooth_keyframes = True  # Ensure keyframe display is smooth\n\n# Switch back to 3D View\nbpy.context.area.type = 'VIEW_3D'\n```\n\n### Explanation:\n\n1. **Clear Existing Objects**: The script begins by clearing any existing objects from the scene to start fresh.\n\n2. **Add Monkey (Suzanne)**: It then adds a Suzanne (Blender's monkey mesh) to the scene.\n\n3. **Function to Set Keyframes**: The `set_scale_keyframes` function is defined to apply scaling keyframes to any object. It takes parameters such as the object, start and end frames, and initial and final scales.\n\n4. **Set Scaling Keyframes**: Scaling keyframes are set such that the monkey scales up from frame 1 to 20"
    },
    {
        "Text Input": "A plane rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a plane on the X-axis, you'll need a basic understanding of Blender's Python API (bpy). Here's a simple script that creates a plane and continuously rotates it around the X-axis. \n\nBefore running the script, ensure that Blender is open and the Scripting workspace is active. Paste the script into a new text block and execute it.\n\n```python\nimport bpy\nimport math\n\n# Function to create a plane\ndef create_plane():\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\n\n# Function to set up a simple animation for the plane\ndef rotate_plane_x(plane, start_frame, end_frame, angle_degrees):\n    # Insert the initial keyframe\n    plane.rotation_euler = (0, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n    \n    # Calculate the rotation in radians\n    rotation_radians = math.radians(angle_degrees)\n    \n    # Set the end rotation\n    plane.rotation_euler = (rotation_radians, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Clear all existing objects\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Create a plane\ncreate_plane()\n\n# Get the created plane object\nplane = bpy.context.active_object\n\n# Specify animation keyframes and rotation\nstart_frame = 1\nend_frame = 50\nangle_degrees = 360  # Full rotation\n\n# Set up the rotation animation\nrotate_plane_x(plane, start_frame, end_frame, angle_degrees)\n\n# Set the current frame for better visibility\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_set(start_frame)\n\n# Optionally, enable animation playback\n# bpy.ops.screen.animation_play()\n\nprint(\"Script execution completed. Press Spacebar to view the animation.\")\n```\n\n### How This Script Works:\n\n1. **Create Plane**: The `create_plane` function adds a plane primitive to the scene.\n   \n2. **Rotate Animation**: The `rotate_plane_x` function sets up keyframes to animate the plane's rotation around the X-axis from `start_frame` to `end_frame`. It rotates the plane by `angle_degrees` degrees over these frames.\n\n3. **Clear Scene**: The script starts by clearing the existing scene to ensure"
    },
    {
        "Text Input": "A sphere scales up and down.",
        "Blender Script": "To create a Blender Python script that animates a sphere scaling up and down, you can use the Blender API to automate the process. Below is an example script that sets up a basic scene with a UV sphere and animates its scale:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"ScalingSphere\"\n\n# Define the frames and scaling keyframes\nstart_frame = 1\nend_frame = 100\nmid_frame = (start_frame + end_frame) // 2\n\n# Set scale keyframes\n# Initial scale at frame 1\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Max scale at frame 50\nsphere.scale = (2, 2, 2)\nsphere.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Return to initial scale at frame 100\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the playback range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the animation to repeat\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_current = start_frame\n\n# Add a loop modifier to the scale animation to make it repeat\nfcurves = sphere.animation_data.action.fcurves\nfor fcurve in fcurves:\n    for modifier in fcurve.modifiers:\n        fcurve.modifiers.remove(modifier)\n    repeat_modifier = fcurve.modifiers.new(type='CYCLES')\n    repeat_modifier.mode_before = 'REPEAT'\n    repeat_modifier.mode_after = 'REPEAT'\n\nprint(\"Animation setup complete. The sphere will scale up and down in a loop.\")\n```\n\nThis script will:\n\n1. Clear any existing mesh objects in the scene.\n2. Create a new UV sphere at the world origin.\n3. Set keyframes to animate the sphere's scale: starting at scale `(1, 1, 1)`, scaling"
    },
    {
        "Text Input": "A cone spins and scales up.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cone and animates it by making it spin around its vertical axis and scale up over time.\n\n```python\nimport bpy\nfrom math import radians\n\n# Create a new cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set animation length (frames)\nanimation_length = 120\n\n# Set initial rotation keyframe\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set final rotation keyframe\ncone.rotation_euler = (0, 0, radians(360))\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=animation_length)\n\n# Set initial scale keyframe\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Set final scale keyframe (scales up)\ncone.scale = (2, 2, 2)\ncone.keyframe_insert(data_path=\"scale\", frame=animation_length)\n\n# Set interpolation type to linear for smooth animation\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Make sure timeline is set to the beginning\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = animation_length\nbpy.context.scene.frame_current = 1\n```\n\nHere's what the script does:\n- It creates a cone with a base radius of 1 and a height of 2.\n- Establishes a 120-frame animation.\n- In the animation, it rotates the cone by 360 degrees around its Z-axis, making it appear as if it's spinning.\n- Scales the cone up evenly to twice its original size.\n- Sets linear interpolation for smooth motion throughout the animation.\n\nTo execute this script:\n1. Open Blender.\n2. Open the scripting workspace or navigate to it.\n3. Click 'New' to create a new script and paste this Python code.\n4. Click 'Run Script' to execute.\n\nMake sure to have your timeline set to display all frames by adjusting the start and end frames in the timeline editor. You should see the cone spinning and scaling up as you play the animation."
    },
    {
        "Text Input": "A sphere flips upside down.",
        "Blender Script": "To create a Blender Python script that animates a sphere flipping upside down, you'll want to use Blender's Python API to create a sphere, and then animate its rotation along the X-axis. Below is a script that accomplishes this task:\n\n```python\nimport bpy\n\ndef create_sphere():\n    # Deselect all to start clean\n    bpy.ops.object.select_all(action='DESELECT')\n\n    # Create a UV sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, \n                                         enter_editmode=False, \n                                         align='WORLD', \n                                         location=(0, 0, 0))\n\n    # Get the newly created sphere\n    sphere = bpy.context.active_object\n    return sphere\n\ndef animate_flip(sphere):\n    # Set the animation frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 50\n\n    # Set the initial keyframe on frame 1\n    sphere.rotation_euler = (0, 0, 0) # Initial Rotation\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n    # Set the final keyframe on frame 50 for the sphere flipped 180 degrees upside down\n    sphere.rotation_euler = (3.14159, 0, 0) # 180 degrees rotation in radians\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\ndef main():\n    # Create a sphere\n    sphere = create_sphere()\n    \n    # Animate the flip\n    animate_flip(sphere)\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n1. **Create a Sphere**: \n   - We use `bpy.ops.mesh.primitive_uv_sphere_add()` to add a sphere to the scene at the origin `(0, 0, 0)`.\n\n2. **Animate the Flip**:\n   - We set the animation frame range from 1 to 50.\n   - At frame 1, set the sphere's rotation to (0, 0, 0), meaning no rotation.\n   - At frame 50, set the sphere's rotation to `(3.14159, 0, 0)` in radians, which is equivalent to 180 degrees, flipping it upside down around the X-axis.\n   - Insert keyframes at these points for the rotation using `keyframe_insert`.\n\n3. **Run the Script**:\n  "
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender script that rotates a cone around the X-axis, you'll want to set up a simple animation where the rotation of the cone changes over time. Below is a Python script using Blender's Python API to accomplish this task:\n\n```python\nimport bpy\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cone object\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the number of frames for the animation\nbpy.context.scene.frame_end = 250  # Animation will run for 250 frames\n\n# Set the initial keyframe\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\n# Set the final keyframe\ncone.rotation_euler = (6.28319, 0, 0)  # Rotate 360 degrees in radians (2 * pi)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=250, index=0)\n\n# Set up the animation playback settings\nbpy.context.scene.render.fps = 24  # Set frames per second\nbpy.context.scene.frame_start = 1  # Start frame of the animation\nbpy.context.scene.frame_end = 250  # End frame of the animation\n\n# Enable auto-play of animations\nbpy.context.scene.use_preview_range = True\nbpy.context.scene.frame_preview_start = 1\nbpy.context.scene.frame_preview_end = 250\n\nprint(\"Cone rotation animation on X-axis created successfully.\")\n```\n\n### Explanation:\n\n1. **Delete Existing Objects**: The script begins by selecting and deleting any existing objects to start with a fresh scene.\n\n2. **Create a Cone**: A cone is created using `bpy.ops.mesh.primitive_cone_add`. You can adjust the `vertices`, `radius1`, and `depth` parameters to your liking.\n\n3. **Setup Animation**: \n   - The animation timeline is set from frame 1 to 250.\n   - At frame 1, the cone is set to have no rotation (0 radians).\n   - At frame 250, the cone is rotated 360 degrees (6.28319 radians) on the"
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a torus move diagonally upwards, we will animate the torus along a diagonal path. The script will create a torus and then animate its movement upwards along the x, y, and z axes simultaneously. Here's a basic script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the total number of frames for the animation\ntotal_frames = 100\n\n# Insert initial keyframe for the torus at the origin\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=0)\n\n# Calculate the end location for the torus (moving diagonally upwards)\nend_location = (5, 5, 5)  # You can adjust these numbers for a different path\n\n# Insert keyframe at the last frame determining the end of the movement\ntorus.location = end_location\ntorus.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n# Set the animation end frame\nbpy.context.scene.frame_end = total_frames\n\n# Optional: Set the interpolation type to 'LINEAR' for constant speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete.\")\n```\n\nThis script will:\n\n1. Clear any existing mesh objects in the scene.\n2. Add a torus at the origin.\n3. Set an initial keyframe at frame 0 with the torus located at (0, 0, 0).\n4. Define an end location for the torus that is diagonally upwards (e.g., (5, 5, 5)), altering the coordinates will change the travel path.\n5. Insert a keyframe at the last frame of the animation where the torus will be at its new location.\n6. Optionally, sets the interpolation type to 'LINEAR' so the torus moves at a constant speed.\n\nYou can customize the `end_location` to your desired coordinates to modify the path, and the"
    },
    {
        "Text Input": "A monkey scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a monkey head (Suzanne) scale up and then scale down, you can use the following script. This script will animate the scaling process by inserting keyframes for the scaling property of the monkey mesh.\n\n```python\nimport bpy\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\n\n# Add a monkey object\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the initial scale\ninitial_scale = (1, 1, 1)\nmonkey.scale = initial_scale\n\n# Set keyframe for initial scale\nmonkey.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Specify scale up values\nscale_up = (3, 3, 3)\n\n# Insert keyframe for scaling up at frame 30\nmonkey.scale = scale_up\nmonkey.keyframe_insert(data_path=\"scale\", frame=30)\n\n# Insert keyframe for scaling back down to initial scale at frame 60\nmonkey.scale = initial_scale\nmonkey.keyframe_insert(data_path=\"scale\", frame=60)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = 60\n\n# Set playback to start at the first frame for immediate viewing\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_current = 1\n\n# Play the animation in Blender's timeline\nbpy.ops.screen.animation_play()\n```\n\nThis script does the following:\n\n1. Deselects all objects in the scene to start with a clean selection.\n2. Adds a monkey head, known as 'Suzanne', at the origin point (0, 0, 0).\n3. Sets an initial scale for Suzanne and inserts a keyframe at frame 1.\n4. Scales up Suzanne to a larger size at frame 30 and inserts another keyframe.\n5. Scales Suzanne back down to the original size at frame 60 and inserts a final keyframe.\n6. Sets the scene's end frame to 60 to coincide with the scaling animation.\n7. Starts the animation playback in Blender immediately after running the script.\n\nMake sure you have Blender open with the scripting workspace active to run the script, and adjust any parameters as necessary to fit your specific needs or preferences."
    },
    {
        "Text Input": "A torus moves in a circular path.",
        "Blender Script": "To create a Blender Python script where a torus follows a circular path, we need to animate the torus' location along a predefined circular curve. The following script adds a torus and a circular path, and then animates the torus to move along that path.\n\nHere's a step-by-step script that achieves this in Blender:\n\n```python\nimport bpy\nimport mathutils\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a Torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Create a circle path\nbpy.ops.curve.primitive_bezier_circle_add(radius=5, location=(0, 0, 0))\ncircle_path = bpy.context.object\n\n# Add a follow path constraint to the torus\nconstraint = torus.constraints.new(type='FOLLOW_PATH')\nconstraint.target = circle_path\nconstraint.use_fixed_location = True\n\n# If the evaluation time doesn't exist, add it\nif not circle_path.data.animation_data:\n    circle_path.data.animation_data_create()\n\n# Add a keyframe to make the torus follow the circle\ncircle_path.data.path_duration = 100  # Duration of the path in frames\n\n# Set the torus to start at the beginning of the path\ncircle_path.data.eval_time = 0\ncircle_path.data.keyframe_insert(data_path='eval_time', frame=1)\n\n# Set the torus to finish at the end of the path\ncircle_path.data.eval_time = circle_path.data.path_duration\ncircle_path.data.keyframe_insert(data_path='eval_time', frame=circle_path.data.path_duration)\n\n# Set the animation to play in a loop\nfor fcurve in circle_path.data.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optionally set the animation playback to loop\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\nbpy.context.scene.render.fps = 24  # Set frames per second for smooth animation\n\n# Switch to object mode and deselect all\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.select_all(action='DESELECT')\n\n# Select the torus\ntorus.select_set(True)\n\n# Make torus the active object"
    },
    {
        "Text Input": "A cone scales up and down.",
        "Blender Script": "To create a Blender Python script that animates a cone scaling up and down, you can use the following script. This script will create a cone and animate its scale property over time.\n\n```python\nimport bpy\n\n# Function to create a cone\ndef create_cone():\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\n    return bpy.context.active_object\n\n# Function to animate the scale of the cone\ndef animate_cone_scale(cone):\n    scene = bpy.context.scene\n    frame_start = scene.frame_start\n    frame_end = scene.frame_end\n    scale_min = 0.5\n    scale_max = 2.0\n    \n    # Set keyframes for scale animation\n    for frame in range(frame_start, frame_end + 1):\n        # Set the current frame in the scene\n        scene.frame_set(frame)\n        \n        # Calculate the scale based on the frame (loop every 60 frames)\n        phase = (frame / 30) % 2  # 0 to 2 for full cycle\n        if phase <= 1:\n            scaleFactor = scale_min + (scale_max - scale_min) * phase\n        else:\n            scaleFactor = scale_max - (scale_max - scale_min) * (phase - 1)\n        \n        # Set the scale of the cone\n        cone.scale = (scaleFactor, scaleFactor, scaleFactor)\n        \n        # Insert a keyframe for the scale property\n        cone.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set playback range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 240\n\n# Create a cone\ncone = create_cone()\n\n# Animate the cone's scale\nanimate_cone_scale(cone)\n\n# Set the timeline to display keys properly\nbpy.context.scene.frame_current = bpy.context.scene.frame_start\n```\n\nThis script will create a cone in Blender and animate its scaling. The cone will continuously scale up and down between frames 0 and 240. You can adjust the `frame_start`, `frame_end`, `scale_min`, and `scale_max` variables to customize the animation. \n\nTo run this script, copy and paste it into Blender's scripting editor, and then click the \"Run Script\" button. Ensure that no existing objects might conflict with this script if you are running"
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a torus and animates it to flip upside down. This script assumes you're running it directly within Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Delete all previous objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\n\n# Get the reference to the torus\ntorus = bpy.context.active_object\n\n# Set frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Ensure the timeline is set to the start\nbpy.context.scene.frame_set(1)\n\n# Insert keyframe for the initial rotation\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set timeline to the last frame\nbpy.context.scene.frame_set(60)\n\n# Insert keyframe for the final rotation (180 degrees on the X-axis)\ntorus.rotation_euler = (math.pi, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set interpolation to linear for a smooth, constant speed flip\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Updates the view to the first frame\nbpy.context.scene.frame_set(1)\n\nprint(\"Torus flip animation setup complete.\")\n```\n\n### Explanation:\n- The script first clears the scene by selecting and deleting all objects.\n- It creates a new torus at the origin with default rotation.\n- Then it defines the frame range for the animation (from frame 1 to frame 60).\n- The script sets the rotation of the torus at frame 1 to be the initial upright position.\n- By frame 60, it applies a rotation of 180 degrees on the X-axis to flip the torus upside down.\n- Keyframes are inserted at frames 1 and 60 to record these positions.\n- The interpolation type for playing back the animation is set to 'LINEAR' to ensure a constant flipping speed.\n- Finally, it resets the scene to the starting"
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a sphere orbit around another object, we'll use Blender's `bpy` module to set up the scene, create a sphere and a central object (like a cube), and animate the sphere's orbit around the central object. We'll make use of drivers for this purpose, which are suitable for creating continuous orbit animations. Here is the script:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create the central object (a cube)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = \"CentralCube\"\n\n# Create the orbiting sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(5, 0, 0))\norbiting_sphere = bpy.context.object\norbiting_sphere.name = \"OrbitingSphere\"\n\n# Add a keyframe to define driver-driven animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Driver setup for orbiting motion\n# The sphere will rotate around the Z-axis of the central cube\norbit_radius = 5\norbit_speed = 1  # Modify this to speed up or slow down the orbit\n\n# Ensure the sphere follows the rotation\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = orbiting_sphere\n\n# Add drivers to the sphere's location to make it orbit around the cube\nfor axis in [\"X\", \"Y\"]:\n    driver = orbiting_sphere.driver_add(f\"location.{axis}\").driver\n\n    # Set up the animation variables\n    if axis == \"X\":\n        var = driver.variables.new()\n        var.name = 'cos_angle'\n        var.targets[0].id_type = 'SCENE'\n        var.targets[0].id = bpy.context.scene\n        driver.expression = f\"{orbit_radius} * cos(frame * {orbit_speed} * 0.02)\"\n\n    elif axis == \"Y\":\n        var = driver.variables.new()\n        var.name = 'sin_angle'\n        var.targets[0].id_type = 'SCENE'\n        var.targets[0].id = bpy.context.scene\n        driver.expression = f\"{orbit_radius} * sin(frame * {orbit"
    },
    {
        "Text Input": "A cone moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a cone moving in a circular path, you can use the following script. This script will add a cone, create an empty object as the center of rotation, and animate the cone to follow a circular path around this empty object.\n\n```python\nimport bpy\nfrom math import radians\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(3, 0, 0))\ncone = bpy.context.object\ncone.name = \"MovingCone\"\n\n# Create an empty object to act as the center of rotation\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\nempty = bpy.context.object\nempty.name = \"RotationCenter\"\n\n# Parent the cone to the empty\ncone.parent = empty\n\n# Set the total number of frames for the animation\ntotal_frames = 250\nbpy.context.scene.frame_end = total_frames\n\n# Add a keyframe for the empty object at the start and end of the animation to rotate it\nempty.rotation_euler = (0, 0, 0)\nempty.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\nempty.rotation_euler = (0, 0, radians(360))\nempty.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\n# Set interpolation type to linear for constant speed rotation\nfor fcurve in empty.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# (Optional) Adjust the camera and lighting to better view the animation\nbpy.ops.object.camera_add(location=(10, -10, 5), rotation=(radians(60), 0, radians(45)))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\n\n# Add a sun lamp for lighting\nbpy.ops.object.light_add(type='SUN', location=(5, 5, 10))\n\nprint(\"Cone moving in a circular path animation created.\")\n```\n\nHow the script works:\n\n1. **Clearing Existing Objects**: To start from a clean slate, any existing mesh objects in the scene are deleted.\n   \n2. **"
    },
    {
        "Text Input": "A cylinder spins and scales up.",
        "Blender Script": "Below is a Blender Python script (using Blender's API) to create a spinning cylinder that scales up over time. This script animates the cylinder's rotation and scaling using keyframes.\n\n```python\nimport bpy\n\n# Delete default cube\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set timeline to start from frame 1\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Initial scale and rotation\ncylinder.scale = (1, 1, 1)\ncylinder.rotation_euler = (0, 0, 0)\n\n# Insert initial scale and rotation keyframes\ncylinder.keyframe_insert(data_path='scale', frame=1)\ncylinder.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Set final scale and rotation values at the end frame\ncylinder.scale = (3, 3, 3)   # Scale up by 3 times\ncylinder.rotation_euler = (0, 0, 6.28319 * 2)  # 4 complete rotations (8 * pi)\n\n# Insert final scale and rotation keyframes\ncylinder.keyframe_insert(data_path='scale', frame=100)\ncylinder.keyframe_insert(data_path='rotation_euler', frame=100)\n\n# Go to the first frame and play the animation\nbpy.context.scene.frame_set(1)\nbpy.ops.screen.animation_play()\n```\n\n### Instructions to Use:\n\n1. **Open Blender**: Start a new General project.\n\n2. **Text Editor**: Go to `Scripting` workspace or open a new `Text Editor`.\n\n3. **Script**: Copy and paste the script above into the text editor.\n\n4. **Run the Script**: With the text editor active, click `Run Script` to execute the script.\n\n5. **Preview Animation**: The script will create a spinning cylinder that scales up over 100 frames. You should see the animation playing.\n\n### Customization:\n\n- **Scale Values**: Change `(3, 3, 3)` to any desired values to adjust the final size of the scaling effect.\n  \n- **Rotation"
    },
    {
        "Text Input": "A plane bounces like a ball.",
        "Blender Script": "To create a Blender script that makes a plane bounce like a ball, we need to animate the plane's position using keyframes to simulate the bouncing motion. Here's a Python script for Blender that accomplishes this task:\n\n```python\nimport bpy\nimport math\n\ndef create_bouncing_plane():\n    # Deselect all objects\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Create a plane\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\n    plane = bpy.context.active_object\n    plane.name = \"BouncingPlane\"\n    \n    # Set up initial variables\n    bounce_height = 2\n    num_bounces = 5\n    frames_per_bounce = 30\n\n    # Insert keyframes for bouncing motion\n    for bounce in range(num_bounces):\n        start_frame = bounce * frames_per_bounce\n        mid_frame = start_frame + frames_per_bounce // 2\n        end_frame = start_frame + frames_per_bounce\n\n        # Position keyframes: start -> up -> down -> start ...\n        plane.location.z = 0\n        plane.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n        plane.location.z = bounce_height\n        plane.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n\n        plane.location.z = 0\n        plane.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n        # Decrease bounce height with each bounce\n        bounce_height *= 0.8\n\n    # Finalize animation duration\n    bpy.context.scene.frame_end = num_bounces * frames_per_bounce\n\n    # Set up f-curves for smooth interpolation (ease in and out)\n    for fcurve in plane.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'BEZIER'\n\n# Execute the function\ncreate_bouncing_plane()\n```\n\nTo use this script in Blender:\n1. Open Blender and create a new project or use an existing one.\n2. Select the \"Scripting\" workspace to open the text editor.\n3. Create a new text file and paste the script into the editor.\n4. Click the \"Run Script\" button.\n\nThis script creates a plane and animates it so that it bounces up and down like a ball. The bounce height decreases every time, giving it"
    },
    {
        "Text Input": "A torus wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a torus wiggle side to side, you would typically animate the torus along the X-axis over time. Below is a Python script that uses Blender's scripting capabilities to create such an animation.\n\nMake sure to run this script in the Scripting tab of Blender with a new or existing project.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n\n# Get the torus object\ntorus = bpy.context.active_object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Wiggle animation parameters\nfrequency = 0.1  # Wiggle frequency\namplitude = 1.0  # Distance to move side to side\n\n# Create side to side wiggle animation for the torus\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    x_location = amplitude * math.sin(frequency * frame)\n    torus.location.x = x_location\n    torus.keyframe_insert(data_path=\"location\", index=0)  # Insert keyframe for X location\n\n# Reset timeline\nbpy.context.scene.frame_set(start_frame)\n```\n\n### Explanation:\n- **Clear existing mesh objects:** This ensures that you start with a clean scene by deleting all existing mesh objects.\n- **Add torus:** A torus is added at the origin `(0,0,0)`.\n- **Get the torus object:** The current active object is the torus, stored in a variable for easy reference.\n- **Frame range:** This script sets the start and end frames for the animation.\n- **Animation parameters:** The `frequency` determines how fast the wiggle is, and `amplitude` determines how far it swings from side to side.\n- **Create animation:** The script sets the location of the torus in the X-axis at each frame based on the sine function, which creates a smooth, wavy motion. Keyframes are inserted for these changes.\n- **Reset timeline"
    },
    {
        "Text Input": "A cone flips upside down.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cone and animates it flipping upside down.\n\n```python\nimport bpy\nfrom math import radians\n\n# Delete default cube if it exists\nif 'Cube' in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a new cone\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Define the number of frames for the animation\nstart_frame = 1\nmid_frame = 50\nend_frame = 100\n\n# Set keyframes for starting position (upright)\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set keyframes for upside-down position\ncone.rotation_euler = (radians(180), 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=mid_frame)\n\n# Ensure it stays upside down until the end\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the scene to use the defined frames\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Cone flip animation script executed.\")\n```\n\nCopy and paste the script into Blender's scripting editor and run it. This script performs the following actions:\n\n1. Deletes the default cube, if present.\n2. Adds a new cone object at the origin.\n3. Sets animation keyframes to rotate the cone 180 degrees along the X-axis from the upright position to the upside-down position.\n4. Sets the frame range for the animation to let you preview it correctly. \n\nOnce you run the script, you can switch to the \"Animation\" workspace in Blender and hit play to see the cone flipping upside down. You can adjust `mid_frame` and `end_frame` to control the speed of the flip."
    },
    {
        "Text Input": "A cone scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a cone scale up and down, we'll use Blender's `bpy` module to control the animation. We'll create a cone, set up scaling keyframes to animate the scaling effect, and use interpolation to achieve the continuous scaling up and down effect. Below is a step-by-step script:\n\n```python\nimport bpy\n\n# Delete existing objects to start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.0, depth=2.0, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Add keyframes for scaling\nframe_number = 0\nscale_factor = 2.0\nnum_cycles = 5\nscaling_delay = 20  # frames between scaling up and down\n\nfor cycle in range(num_cycles):\n    # Scaling down to original size\n    cone.scale = (1.0, 1.0, 1.0)\n    cone.keyframe_insert(data_path=\"scale\", frame=frame_number)\n\n    # Scaling up to the specified factor\n    frame_number += scaling_delay\n    cone.scale = (scale_factor, scale_factor, scale_factor)\n    cone.keyframe_insert(data_path=\"scale\", frame=frame_number)\n\n    # Scaling down to original size again\n    frame_number += scaling_delay\n    cone.scale = (1.0, 1.0, 1.0)\n    cone.keyframe_insert(data_path=\"scale\", frame=frame_number)\n\n# Set interpolation type to 'LINEAR' for each keyframe to have a smooth transition\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\n# Set scene end frame to the final frame of the animation\nbpy.context.scene.frame_end = frame_number\n\n# Optionally set the frame rate\nbpy.context.scene.render.fps = 24  # Set FPS as desired\n\nprint(\"Cone scaling animation created successfully.\")\n```\n\n### Explanation:\n\n1. **Importing**: We import the `bpy` module to access Blender's functionality.\n   \n2. **Cleaning Up**: We clear existing mesh objects to start fresh.\n\n3. **Creating"
    },
    {
        "Text Input": "A monkey slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a monkey mesh (Suzanne) sliding from top to bottom, you can use the following script. This script will set up a scene, add a mesh, and animate it over a few frames.\n\n```python\nimport bpy\n\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef create_monkey():\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 3))\n    monkey = bpy.context.active_object\n    monkey.name = \"Suzanne\"\n    return monkey\n\ndef animate_monkey(monkey):\n    # Set the start and end frame for the animation\n    start_frame = 1\n    end_frame = 50\n    \n    # Ensure the timeline cursor is at the start\n    bpy.context.scene.frame_set(start_frame)\n    \n    # Set the initial keyframe for location\n    monkey.location = (0, 0, 3)\n    monkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Move the monkey to the bottom location\n    bpy.context.scene.frame_set(end_frame)\n    monkey.location = (0, 0, 0)\n    monkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n    \n    # Setting the frame range for the whole scene\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\ndef main():\n    clear_scene()\n    monkey = create_monkey()\n    animate_monkey(monkey)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### How it Works:\n1. **Clear Scene:** The script first clears the current Blender scene to remove any existing objects.\n2. **Create Monkey:** It adds a new Suzanne (monkey) mesh to the scene positioned at (0, 0, 3), which is at the top.\n3. **Animate Monkey:** The script sets up a basic animation where the monkey slides from the top `(0, 0, 3)` to the bottom `(0, 0, 0)` over 50 frames. Keyframes are inserted for the monkey's location at frame 1 and frame 50.\n4. **Frame Settings:** Sets the timeline's start and end frame so the animation is properly bounded.\n\nYou can run this script in Blender's scripting tab. After running, play the animation to see Suzanne slide down from the"
    },
    {
        "Text Input": "A sphere wiggles side to side.",
        "Blender Script": "To create a Blender Python script that animates a sphere wiggling side to side, you can use the following script. This script will create a sphere and then set up an animation for it to wiggle along the X-axis.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set animation parameters\nframe_start = 1\nframe_end = 120\nwiggle_amplitude = 2.0\nwiggle_frequency = 10  # Oscillations per wiggle cycle\n\n# Set keyframes for wiggling animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    # Calculate the wiggling effect using a sine function\n    offset = wiggle_amplitude * math.sin(2 * math.pi * wiggle_frequency * frame / frame_end)\n    sphere.location.x = offset\n    \n    # Insert keyframe for the location of the sphere\n    sphere.keyframe_insert(data_path=\"location\", index=0)\n\n# Set interpolation type to Linear for smooth motion\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Sphere wiggling animation created successfully.\")\n```\n\n### How to use this script:\n\n1. Open Blender.\n2. Go to \"Scripting\" tab.\n3. Create a new text block and paste this script into it.\n4. Run the script by clicking the \"Run Script\" button.\n\n### What the script does:\n\n- It deletes all existing objects in the scene.\n- Adds a UV sphere at the origin.\n- Configures an animation that wobbles the sphere along the X-axis like a wiggling motion.\n- Sets the start and end frames for this animation.\n- Generates keyframes for moving the sphere side to side using a sine wave function.\n- Ensures the movement is smooth by setting the keyframe interpolation to linear.\n\nYou can adjust `wiggle_amplitude`, `wiggle_frequency`, and other parameters to change how the sphere"
    },
    {
        "Text Input": "A cylinder spins while floating.",
        "Blender Script": "Below is a Blender Python script to create a spinning, floating cylinder in a Blender scene. This script will create a cylinder, set its position to give it a floating appearance, and add keyframe animation to make it spin continuously.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 3))\ncylinder = bpy.context.object\n\n# Set the cylinder's origin to its geometry, to ensure rotation happens around the center\nbpy.ops.object.origin_set(type='ORIGIN_GEOMETRY', center='BOUNDS')\n\n# Set the cylinder's initial rotation\ncylinder.rotation_euler = (0, 0, 0)\n\n# Insert a keyframe for the cylinder's rotation at frame 1\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set the cylinder's rotation at a later frame (say frame 120 for a 4-second spin at 30fps)\ncylinder.rotation_euler = (0, 0, 6.28319)  # 6.28319 radians = 360 degrees\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set the animation interpolation to linear for constant speed spinning\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Change the render settings if necessary\nbpy.context.scene.render.fps = 30\nbpy.context.scene.frame_end = 120\n\n# Optionally, adjust material to make the cylinder look better\nmat = bpy.data.materials.new(name=\"CylinderMaterial\")\nmat.use_nodes = True\nbsdf = mat.node_tree.nodes[\"Principled BSDF\"]\nbsdf.inputs['Base Color'].default_value = (0.2, 0.8, 0.8, 1)  # Cyan color\n\n# Assign material to cylinder\nif cylinder.data.materials:\n    # If there's a material slot already, replace it\n    cylinder.data.materials[0] = mat\nelse:\n    # Else add a new material slot\n    cylinder.data.materials.append(mat)\n\nprint(\"Cylinder created, spinning, and floating in the scene.\")\n```\n\n### Explanation:\n1. **Create"
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "To create a scene in Blender where a torus orbits around another object, such as a sphere, you will need to set up keyframes and possibly utilize constraints. Below is a Python script that automates this process using Blender's scripting API.\n\n```python\nimport bpy\nimport math\n\ndef create_orbiting_torus():\n    # Clear existing objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n    # Add a sphere as the central object\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, location=(0, 0, 0))\n    sphere = bpy.context.active_object\n    sphere.name = \"Central_Sphere\"\n\n    # Add a torus that will orbit the sphere\n    bpy.ops.mesh.primitive_torus_add(major_radius=2, minor_radius=0.2, location=(2, 0, 0))\n    torus = bpy.context.active_object\n    torus.name = \"Orbiting_Torus\"\n\n    # Set up animation frames\n    scene = bpy.context.scene\n    scene.frame_start = 1\n    scene.frame_end = 250\n\n    # Define the orbit path using keyframes\n    for frame in range(scene.frame_start, scene.frame_end + 1):\n        scene.frame_set(frame)\n        \n        # Calculate the angle for rotation\n        angle = (2 * math.pi) * (frame / scene.frame_end)\n        \n        # Set torus position based on angle\n        x = 2 * math.cos(angle)\n        y = 2 * math.sin(angle)\n        \n        torus.location = (x, y, 0)\n        \n        # Insert keyframe for location\n        torus.keyframe_insert(data_path=\"location\", index=-1)\n\n    # Optional: Set interpolation type to linear to ensure constant orbit speed\n    for fcurve in torus.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\n# Run the function\ncreate_orbiting_torus()\n```\n\n### Explanation:\n1. **Clear Existing Objects**: The script starts by deleting all objects in the scene to ensure a clean environment.\n2. **Create Sphere**: It adds a sphere, which will act as the central object.\n3. **Create Torus**: A torus is created and positioned at a starting point on the orbit path"
    },
    {
        "Text Input": "A cone expands and shrinks.",
        "Blender Script": "Below is a Python script for Blender that creates a simple animation where a cone expands and shrinks over time. This effect is achieved by animating the scale of the cone.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a new cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\ncone.name = \"AnimatedCone\"\n\n# Set keyframes for expanding/shrinking effect\n# Expand\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=1)\n\n# Maximum size\ncone.scale = (2, 2, 2)\ncone.keyframe_insert(data_path=\"scale\", frame=20)\n\n# Shrink back\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=40)\n\n# Set up a loop\n# Start looping after the animation\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=80)\n\n# Cycles setting\n# Make the animation loop continuously\nfcurves = cone.animation_data.action.fcurves\nfor fcurve in fcurves:\n    for modifier in fcurve.modifiers:\n        fcurve.modifiers.remove(modifier)\n    cyclic_mod = fcurve.modifiers.new(type='CYCLES')\n    cyclic_mod.mode_before = 'REPEAT'\n    cyclic_mod.mode_after = 'REPEAT'\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = 80\n\n# Optional: Set the timeline to start at frame 1\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_current = 1\n\nprint(\"Cone expansion and shrink animation has been set.\")\n```\n\n### Explanation:\n- **Cleaning Scene**: It starts by clearing any existing objects in the scene.\n- **Create Cone**: A new cone primitive is added to the scene.\n- **Keyframes**: The script sets keyframes for the cone's scale to animate it from its original size (1, 1, 1) at frame 1, to its maximum size (2, 2, 2) at frame 20. It then shrinks back to its original size at frame"
    },
    {
        "Text Input": "A cube bounces like a ball.",
        "Blender Script": "To create a Blender script where a cube bounces like a ball, you'll need to set up the scene, create a cube, and then animate it with keyframes to simulate a bouncing motion. Here is a simple Python script using Blender's `bpy` module to achieve this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing meshes in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncube = bpy.context.active_object\n\n# Add a plane for the cube to \"bounce\" on\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\n\n# Set initial animation variables\nbounce_height = 5          # Maximum height of the bounce\nfall_height = 1            # Starting height of the cube to mimic start of bounce\nnum_bounces = 5            # Number of bounces\nframes_per_bounce = 20     # Number of frames for one full bounce\nframe_number = 1           # Start frame for keyframing\n\n# Set animation keyframes for bouncing motion\nfor bounce in range(num_bounces):\n    \n    # Calculate the diminishing bounce height\n    current_bounce_height = bounce_height * (0.6 ** bounce)\n    \n    # Set the cube's location for each keyframe\n    # Upward motion\n    bpy.context.scene.frame_set(frame_number)\n    cube.location = (0, 0, fall_height)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n    \n    # Peak of the bounce\n    frame_number += frames_per_bounce // 2\n    bpy.context.scene.frame_set(frame_number)\n    cube.location = (0, 0, fall_height + current_bounce_height)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n    \n    # Return to ground\n    frame_number += frames_per_bounce // 2\n    bpy.context.scene.frame_set(frame_number)\n    cube.location = (0, 0, fall_height)\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the end frame to the final frame_number for looping the animation\nbpy.context.scene.frame_end = frame_number\n\n# Optionally set interpolation"
    },
    {
        "Text Input": "A cone moves in a spiral motion.",
        "Blender Script": "To create a script in Blender that animates a cone moving in a spiral motion, you can use the following Python script. This script will create a cone object and then animate it along a spiral path over time.\n\n```python\nimport bpy\nimport math\n\n# Function to create a cone\ndef create_cone():\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\n    cone = bpy.context.active_object\n    cone.name = \"SpiralCone\"\n    return cone\n\n# Function to animate the cone along a spiral\ndef animate_cone_along_spiral(cone, num_frames=250, spiral_turns=3, spiral_height=5, spiral_radius=3):\n    for frame in range(num_frames):\n        # Calculate theta angle for spiral based on frame\n        theta = spiral_turns * 2 * math.pi * frame / num_frames\n        \n        # Calculate x, y, z coordinates for the cone\n        x = spiral_radius * math.cos(theta)\n        y = spiral_radius * math.sin(theta)\n        z = spiral_height * frame / num_frames\n\n        # Set the location for the cone at this frame\n        cone.location = (x, y, z)\n        \n        # Insert a keyframe for location\n        cone.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create and animate the cone\ncone = create_cone()\nanimate_cone_along_spiral(cone)\n\n# Move the timeline to the beginning\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 250\nbpy.context.scene.frame_set(0)\n```\n\nThis script does the following:\n1. Deletes existing objects to start with a clean scene.\n2. Creates a cone object.\n3. Animates the cone to move along a spiral path by altering its `x`, `y`, and `z` coordinates over a series of frames.\n4. Keyframes the location of the cone at each frame, so it moves in a spiral motion when the animation is played back.\n\nTo use the script:\n- Open Blender and switch to the Scripting workspace.\n- Create a new text block, paste the script, and click the \"Run Script\" button.\n- Use the Timeline and 3D View"
    },
    {
        "Text Input": "A sphere moves in a spiral motion.",
        "Blender Script": "To create a script for a sphere moving in a spiral motion in Blender, you can use the following Python script. This script adds a UV sphere to the scene and animates it using keyframes to follow a spiral path. Make sure you have the right context for executing the script, or run this in Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Remove all existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"SpiralSphere\"\n\n# Define spiral parameters\nturns = 5\nheight = 10\nnum_frames = 250\nradius = 5\n\n# Add keyframes for spiral motion\nfor frame in range(num_frames):\n    # Compute the current angle and height\n    angle = 2 * math.pi * turns * (frame / num_frames)\n    z = (height / num_frames) * frame\n\n    # Calculate x and y position on the spiral\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    \n    # Set sphere's location\n    sphere.location = (x, y, z)\n    \n    # Insert keyframe for location\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the timeline to the start\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = num_frames\n\nprint(\"Spiral animation created.\")\n```\n\nHere's a breakdown of how it works:\n\n1. **Setup**: It begins by clearing the scene of any existing mesh objects to ensure a clean workspace.\n\n2. **Adding Sphere**: A UV sphere primitive is added to the scene and named \"SpiralSphere\".\n\n3. **Spiral Parameters**: Spiral parameters are defined, including the number of turns, the height of the spiral, number of frames, and the radial distance of the path.\n\n4. **Keyframe Animation**: For each frame, the script calculates the x and y positions based on a polar coordinate system (angle), and the z position based on linear interpolation for height. It then sets the sphere's location accordingly and inserts a keyframe.\n\n5. **Timeline Setup**: It also sets the timeline"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, you can use the following script. This script will create a simple animation where a plane moves back and forth along the X-axis. The script will generate keyframes for the animation.\n\n```python\nimport bpy\nimport math\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set the animation length (in frames)\nframe_start = 1\nframe_end = 100\nwiggle_frequency = 10  # Higher values will make the plane wiggle more times within the frame_end\n\n# Clear any previous animation data on the plane's location\nplane.animation_data_clear()\n\n# Add keyframes to make the plane wiggle side to side\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the displacement using a sine function for smooth motion\n    # The amplitude defines how far it moves from the center\n    amplitude = 1\n    x_displacement = amplitude * math.sin((frame / frame_end) * 2 * math.pi * wiggle_frequency)\n    \n    # Set the location at the current frame\n    plane.location.x = x_displacement\n    \n    # Insert keyframe for the X location\n    plane.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_start = frame_start\n\n# Optionally set the scene to automatically repeat the animation\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_current = frame_start\nbpy.context.scene.render.image_settings.file_format = 'AVI_JPEG' # Or any other format you prefer\nbpy.context.scene.render.filepath = \"//wiggle_animation\"\nbpy.context.scene.render.use_file_extension = True\nbpy.context.scene.render.use_placeholder = False\nbpy.context.scene.render.film_transparent = False\n\n# Optionally play the animation\n# bpy.ops.screen.animation_play()\n```\n\nThis script does the following:\n- It adds a plane to the scene at the origin.\n- It sets up an animation with a sine wave representing the motion from side to side.\n- It calculates the X displacement for each frame and inserts it as a keyframe.\n- It does not automatically"
    },
    {
        "Text Input": "A sphere scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a sphere scale up and down, you'll need to animate this scaling effect using Blender's scripting capabilities. The script will first create a sphere, and then apply keyframe animation to scale it over time. Here's a simple script to achieve this:\n\n```python\nimport bpy\n\n# Set the scene\nscene = bpy.context.scene\n\n# Delete default cube\nbpy.ops.object.select_all(action='DESELECT')\nif bpy.context.active_object is not None:\n    bpy.ops.object.delete()\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Specify the scaling factors and keyframes\nscaling_keyframes = [\n    (1, (1, 1, 1)),  # Frame 1, default scale\n    (20, (2, 2, 2)),  # Frame 20, scale up\n    (40, (1, 1, 1)),  # Frame 40, scale back to normal\n    (60, (0.5, 0.5, 0.5)),  # Frame 60, scale down\n    (80, (1, 1, 1))  # Frame 80, scale back to normal\n]\n\n# Apply keyframe animations for scaling\nfor frame, scale in scaling_keyframes:\n    scene.frame_set(frame)\n    sphere.scale = scale\n    sphere.keyframe_insert(data_path='scale', index=-1)\n\n# Reset to first frame\nscene.frame_set(1)\n```\n\n### Script Explanation:\n\n1. **Clear Existing Objects**: The script removes the default cube and any other existing objects to ensure a clean workspace.\n\n2. **Create a Sphere**: A UV sphere is added at the origin with default dimensions.\n\n3. **Define Scaling Keyframes**: Create a list of tuples defining which scale should be applied at which frame. This script specifies a bounce effect where the sphere scales up to double its size, returns to normal, scales down to half, and then returns to its normal size again.\n\n4. **Animate Scaling**: Using `keyframe_insert`, the script sets the scale for each specified frame, allowing Blender to interpolate between them to create smooth animation.\n\n5. **Reset Frame**: The scene is reset to frame 1"
    },
    {
        "Text Input": "A plane moves in a circular path.",
        "Blender Script": "To achieve the effect of a plane moving in a circular path using Blender, you can create an animation script in Python. Below is a simple script that will create a plane and make it follow a circular path.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a plane to the scene\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(2, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"CircularPlane\"\n\n# Set animation properties\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Define the circular path parameters\nradius = 5\ncenter = (0, 0)\nnum_frames = bpy.context.scene.frame_end\nangle_per_frame = (2 * math.pi) / num_frames\n\n# Keyframe the plane's location around a circular path\nfor frame in range(1, num_frames + 1):\n    angle = frame * angle_per_frame\n    x = center[0] + radius * math.cos(angle)\n    y = center[1] + radius * math.sin(angle)\n    z = 0  # Keep the plane on the ground level\n\n    plane.location = (x, y, z)\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the current frame to the start\nbpy.context.scene.frame_set(1)\n\nprint(\"Successfully created a circular animation for the plane.\")\n```\n\n### Explanation:\n1. **Scene Cleanup**: The script starts by deleting all existing mesh objects in the scene to ensure it starts from a clean state.\n\n2. **Add a Plane**: A new plane is added to the scene.\n\n3. **Animation Setup**: \n   - The total animation length is set to 250 frames.\n   - The circular path is defined using a specified radius.\n   - The script calculates the angle increment per frame to ensure a smooth circular motion.\n\n4. **Circular Motion Animation**:\n   - For each frame in the animation, the script calculates the new position of the plane using simple trigonometry to determine its coordinates on a circle of a specified radius.\n   - The plane's location is updated and keyframed for each frame.\n\n5. **Set"
    },
    {
        "Text Input": "A cone orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cone orbits around another object (e.g., a sphere), you can use the following script. This script will set up the scene with a sphere and a cone, and animate the cone to orbit around the sphere.\n\n```python\nimport bpy\nimport math\n\n# Clear existing meshes and objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a sphere that will remain at the center\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncenter_sphere = bpy.context.object\ncenter_sphere.name = \"CenterSphere\"\n\n# Create a cone object that will orbit around the sphere\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1, location=(3, 0, 0))\norbit_cone = bpy.context.object\norbit_cone.name = \"OrbitCone\"\n\n# Set up the empty object as the pivot point for the orbit\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\npivot_empty = bpy.context.object\npivot_empty.name = \"OrbitPivot\"\n\n# Parent the cone to the empty object\norbit_cone.parent = pivot_empty\n\n# Set the scene frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\nframe_count = bpy.context.scene.frame_end\n\n# Animate the orbit by rotating the empty object\npivot_empty.rotation_euler = (0, 0, 0)\npivot_empty.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\npivot_empty.rotation_euler = (0, 0, 2 * math.pi)\npivot_empty.keyframe_insert(data_path=\"rotation_euler\", frame=frame_count)\n\n# Set interpolation mode to linear for constant speed\nfor fcurve in pivot_empty.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set up the camera\nbpy.ops.object.camera_add(location=(0, -7, 4), rotation=(math.radians(75), 0, 0))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\n\n# Set up lighting\nbpy.ops.object.light_add(type='SUN', location=(0, 0, 10))\nlight ="
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a cone zoom in and out, you can use Blender's built-in Python API to create and animate a cone. Below is a script that accomplishes this task:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, enter_editmode=False, location=(0, 0, 0))\ncone = bpy.context.active_object\ncone.name = 'ZoomingCone'\n\n# Set the animation frame range\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Animate the cone zooming in and out\n# Keyframes: \n# - Start at frame 1 with scale 1\n# - Scale to 2 by frame 60\n# - Back to scale 1 by frame 120\n# - Out again to scale 2 by frame 180\n# - Back to scale 1 by frame 240\n\nscaling_frames = [(frame_start, 1), (60, 2), (120, 1), (180, 2), (240, 1)]\n\nfor frame, scale in scaling_frames:\n    bpy.context.scene.frame_set(frame)\n    cone.scale = (scale, scale, scale)\n    cone.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Smooth interpolation (optional)\nfor fcurve in cone.animation_data.action.fcurves:\n    for kfp in fcurve.keyframe_points:\n        kfp.interpolation = 'BEZIER'\n\n# Return to start frame\nbpy.context.scene.frame_set(frame_start)\n\nprint(\"Cone zoom in and out animation created successfully.\")\n```\n\nInstructions to run the script:\n\n1. Open Blender and go to the Scripting workspace.\n2. Copy the script into a new text block in Blender's scripting editor.\n3. Press the \"Run Script\" button.\n\nThis script creates a cone and animates its scale to make it zoom in and out cyclically over the course of 240 frames. The script inserts keyframes at specific points to define the scale transformation, creating a zooming effect.\n\nYou can adjust the `frame_end` variable and the keyframe positions in `scaling_frames`"
    },
    {
        "Text Input": "A cylinder rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a simple Blender Python script to create a cylinder and animate it rotating 360 degrees.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set up animation\n# Define the number of frames over which the cylinder will rotate\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_end = end_frame\n\n# Set initial rotation at frame 1\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set final rotation at frame 250\ncylinder.rotation_euler = (0, 0, 2 * 3.14159)  # 360 degrees in radians\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Enable auto smoothing\ncylinder.data.use_auto_smooth = True\n\n# Add rotation animation\nbpy.context.scene.render.fps = 24  # Set frames per second\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\n**Instructions to Run Script:**\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block and paste the above script into the text editor.\n3. Run the script by clicking the \"Run Script\" button.\n\nThe script will animate a cylinder rotating 360 degrees over the specified number of frames (250 in this case). You can change `end_frame` if you want to adjust how long the rotation takes. The `start_frame` is set to 1, and the `end_frame` to 250, giving it approximately 10 seconds of animation time at 24 frames per second. Adjust these settings to fit your needs."
    },
    {
        "Text Input": "A sphere moves from left to right.",
        "Blender Script": "To create a simple animation where a sphere moves from left to right in Blender using a Python script, you'll need to make use of Blender's `bpy` module to set up the scene, add a sphere, and animate its movement. Here's how you can do it:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-5, 0, 0))  # Start from the left\nsphere = bpy.context.object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert a keyframe for the sphere's initial position\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Move the sphere to the right\nsphere.location.x = 5  # End position on the right\n\n# Insert a keyframe for the sphere's final position\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up the animation playback settings\nbpy.context.scene.render.fps = 24  # Frames per second\nbpy.context.scene.frame_current = start_frame\n\n# Optionally, set up the camera and lighting for a better view\n# Add a camera\nbpy.ops.object.camera_add(location=(0, -10, 10))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\n\n# Adjust camera rotation to look at the sphere\ncamera.rotation_euler = (1.0, 0, 0.8)\n\n# Add a basic light source\nbpy.ops.object.light_add(type='POINT', location=(0, -10, 10))\n\n# Run the animation\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    bpy.context.view_layer.update()\n\nprint(\"Finished setting up the animation.\")\n```\n\n### Explanation:\n\n1. **Clear Existing Objects:** We start by clearing any default objects in the scene to have a clean start.\n\n2. **Add Sphere:** A UV sphere is added at the position `(-5, 0, 0)`, starting on the left-hand side of the scene.\n\n3. **Keyframes:** The `keyframe_insert` method is used to record the sphere's starting and ending"
    },
    {
        "Text Input": "A sphere tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a sphere tilt back and forth, you can use Blender's animation system. Below is a script that will achieve this by creating a sphere and applying keyframe animations to make it tilt along the X-axis.\n\nBefore you run this script, ensure you have an empty Blender scene open.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = 'TiltingSphere'\n\n# Start and end frame for the animation\nstart_frame = 1\nend_frame = 60\n\n# Function to create keyframes for tilting\ndef create_tilt_animation(obj, start, end):\n    obj.rotation_mode = 'XYZ'\n    \n    # Set keyframes at the start\n    obj.rotation_euler[0] = math.radians(0)  # Initial tilt\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=start)\n    \n    # Keyframe for tilting to one direction\n    middle_frame = (start + end) // 2\n    obj.rotation_euler[0] = math.radians(45)  # Tilt to 45 degrees\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=middle_frame)\n    \n    # Keyframe for tilting back\n    obj.rotation_euler[0] = math.radians(0)  # Back to initial position\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=end)\n\n# Create the animation\ncreate_tilt_animation(sphere, start_frame, end_frame)\n\n# Set the animation to repeat\nfor fc in sphere.animation_data.action.fcurves:\n    # Add a cyclic modifier to loop the animation\n    fc.modifiers.new(type='CYCLES')\n\n# Set the end frame for the playback\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Sphere tilting animation created successfully.\")\n```\n\n**Key Features of This Script:**\n\n1. **Creating a Sphere**: It uses `bpy.ops.mesh.primitive_uv_sphere_add` to create a UV sphere in the scene.\n\n2. **Animation Setup**: It animates the sphere's rotation on the X-axis to tilt it back and"
    },
    {
        "Text Input": "A monkey tilts back and forth.",
        "Blender Script": "Certainly! Below is a Python script for Blender that makes a monkey head (Suzanne) mesh tilt back and forth.\n\n```python\nimport bpy\nimport math\n\n# Delete default cube if it exists\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete() \n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the monkey object\nmonkey = bpy.context.active_object\n\n# Set up animation parameters\nframe_start = 1\nframe_end = 120\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Clear existing animation data\nmonkey.animation_data_clear()\n\n# Add keyframes for rotation\nfor i in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(i)\n    \n    # Calculate rotation based on frame number\n    tilt_angle = math.radians(15 * math.sin(math.pi * 2 * (i - frame_start) / (frame_end - frame_start)))\n    monkey.rotation_euler = (tilt_angle, 0, 0)\n    \n    # Insert keyframe\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set up the interpolations to be linear for a smooth cyclic effect\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Make the animation cyclic\naction = monkey.animation_data.action\nfor fcurve in action.fcurves:\n    modifiers = fcurve.modifiers.new(type='CYCLES')\n    modifiers.mode_before = 'REPEAT'\n    modifiers.mode_after = 'REPEAT'\n\nprint(\"Monkey tilting animation created successfully!\")\n```\n\n### Explanation:\n- **Monkey Mesh**: The script adds a Suzanne monkey mesh to the scene.\n- **Animation**: The animation cycles back and forth smoothly between an angle of \u00b115 degrees (converted to radians).\n- **Frames**: Animation starts at frame 1 and ends at frame 120 (5 seconds at 24 FPS).\n- **Keyframes**: Keyframes are created for each frame to achieve smooth tilting.\n- **Cyclic Modifier**: Ensures the motion continues smoothly without stopping or jerking.\n\n"
    },
    {
        "Text Input": "A sphere moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a sphere moves from left to right, you can use a Python script to automate the creation and animation setup. Here's a basic script to achieve that:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-5, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"MovingSphere\"\n\n# Set the start and end frames\nstart_frame = 1\nend_frame = 100\n\n# Insert the starting location keyframe\nsphere.location = (-5, 0, 0)\nsphere.keyframe_insert(data_path='location', frame=start_frame)\n\n# Insert the ending location keyframe\nsphere.location = (5, 0, 0)\nsphere.keyframe_insert(data_path='location', frame=end_frame)\n\n# Set up the timeline\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the scene to use the graph editor's easing method for smoother motion\naction = sphere.animation_data.action\nfcurves = action.fcurves\n\nfor fcurve in fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Optional: set the view to the camera so we can see the animation\nbpy.ops.object.camera_add(location=(0, -10, 0))\ncamera = bpy.context.object\ncamera.rotation_euler = (1.57, 0, 0)\nbpy.context.scene.camera = camera\n\n# Change the output settings if needed\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.filepath = \"//moving_sphere.mp4\"\n\n# Optional: render the animation\n# bpy.ops.render.render(animation=True)\n```\n\n### Instructions for Running the Script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block and paste this script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\n### Key Features of the Script:\n- **Sphere Creation:** Adds a UV sphere at the starting position.\n- **Animation Setup:** Uses keyframes to animate the sphere from `(-5, 0,"
    },
    {
        "Text Input": "A cone spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cone spin and scale up, you can use the following code. This script sets up a cone, animates its rotation, and scales it over time.\n\n```python\nimport bpy\n\n# Clear all objects in the scene\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.0, depth=2.0, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set initial frame number\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set initial scale\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Keyframe for scaling up to twice the original size by the end_frame\ncone.scale = (2, 2, 2)\ncone.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set initial rotation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Keyframe for spinning 3 full rotations by the end_frame\ncone.rotation_euler = (0, 0, 2*3.14*3)  # 3 full rotations (3 * 360 degrees)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation type to linear for smooth constant speed\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optionally, switch to the timeline window to view the animation settings\nfor area in bpy.context.screen.areas:\n    if area.type == 'TIMELINE':\n        bpy.context.area.type = 'VIEW_3D'\n        break\n\nprint(\"Animation setup complete. Play the animation to see the cone spin and scale up.\")\n```\n\nThis script performs the following actions:\n1. Clears the scene of any existing objects and adds a new cone.\n2. Sets up the animation timeline from frame 1 to frame 120.\n3. Inserts keyframes for scaling the cone from its original size to twice its size.\n4. Inserts keyframes to rotate the cone"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, we can utilize the Blender Python API to animate the plane's movement along the Z-axis to simulate a bounce. Below is a step-by-step guide with a complete script that demonstrates how to achieve this effect.\n\n### Step-by-step Guide:\n\n1. **Creating a Plane**: We will first add a plane to the Blender scene.\n2. **Animating the Bounce**: We will create keyframes that animate the plane moving up and down to simulate a bounce.\n3. **Looping the Animation**: To make the bounce continuous, we'll ensure it repeats over a period.\n\nHere's the complete script:\n\n```python\nimport bpy\n\n# Delete the default cube if it exists\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set the initial frame and timeline settings\nstart_frame = 1\nend_frame = 50\nbounce_height = 1.0\n\n# Keyframes for the bouncing effect\nframes = [start_frame, start_frame + 10, start_frame + 20]\n\n# Set the initial z-position\nplane.location.z = 0.0\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frames[0])\n\n# Middle point for the bounce (highest point)\nplane.location.z = bounce_height\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frames[1])\n\n# Return to the initial position\nplane.location.z = 0.0\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frames[2])\n\n# Set up the animation to repeat\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_start = start_frame\n\n# Add nonlinear repeating by cycling the keyframes\nfcurve = plane.animation_data.action.fcurves.find('location', index=2)\nif fcurve:\n    mod = fcurve.modifiers.new(type='CYCLES')\n```\n\n### Explanation:\n\n- **Plane Creation**: We start by adding a plane to the scene.\n- **Keyframes**: We set keyframes at certain frames to define the motion path:\n  - **Frame 1**: The plane is at the initial position (ground-level"
    },
    {
        "Text Input": "A plane moves in a circular path.",
        "Blender Script": "Creating a Blender Python script to animate a plane moving in a circular path involves setting up the scene, creating a plane, and applying an animation to move it along a circular trajectory. Here is a script to accomplish this:\n\n```python\nimport bpy\nimport math\n\n# Function to create an empty object at the center for parenting\ndef create_empty(location=(0, 0, 0), name=\"Empty\"):\n    bpy.ops.object.empty_add(type='PLAIN_AXES', location=location)\n    empty = bpy.context.active_object\n    empty.name = name\n    return empty\n\n# Function to create a plane object\ndef create_plane(location=(0, 0, 0), name=\"Plane\"):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    plane = bpy.context.active_object\n    plane.name = name\n    return plane\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create an empty object at the center to act as a pivot\npivot = create_empty(name=\"Pivot\")\n\n# Create a plane and set it at the origin\nplane = create_plane(location=(2, 0, 0), name=\"CircularPlane\") # Initial position on x-axis\n\n# Parent the plane to the pivot for rotation\nplane.parent = pivot\n\n# Set start and end frames for animation\nstart_frame = 1\nend_frame = 250\n\n# Set rotation keyframes for the pivot to move the plane in a circle\npivot.rotation_euler = (0, 0, 0)  # Starting rotation\npivot.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\npivot.rotation_euler = (0, 0, 2 * math.pi)  # Ending rotation for a full circle\npivot.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the interpolation type to linear for constant speed rotation\nfor fcurve in pivot.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Script executed successfully: Plane is set to move in a circular path.\")\n```\n\nThis script will create a plane and an empty object in the Blender scene. The empty acts as a pivot around which the plane will rotate to create a circular motion. Here's a breakdown of what it does:\n\n1. **Create an Empty Object**:"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "To create a Blender script that makes a torus expand and shrink over time, you can use the following Python script. This script will animate the scale of a torus object in Blender:\n\n```python\nimport bpy\n\n# Delete the default cube if it exists\nif 'Cube' in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set keyframes for scaling the torus over time\n# Define the frames where we want the keyframes\nframes = range(0, 101, 10)  # Frames 0 to 100, every 10 frames\n\n# Define the scale values: expand and shrink in a loop\nscale_values = [1, 1.2, 1, 0.8, 1]  # Start large, shrink, and back\n\n# Apply the scale at each frame\nfor i, frame in enumerate(frames):\n    scale = scale_values[i % len(scale_values)]\n    bpy.context.scene.frame_set(frame)\n    torus.scale = (scale, scale, scale)\n    torus.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = frames[0]\nbpy.context.scene.frame_end = frames[-1]\n\nprint(\"Animation setup complete: Torus will expand and shrink over time.\")\n```\n\n### How to use this script:\n\n1. **Open Blender**: Start Blender and make sure you are in a new or existing project where you can add objects.\n\n2. **Access the Scripting Workspace**: Switch to the Scripting workspace from the top menu. This is where you can run Python scripts.\n\n3. **Create a New Text Block**: In the scripting panel, create a new text block. This is where you will paste the Python script.\n\n4. **Paste the Script**: Copy the script provided above into the text block you created.\n\n5. **Run the Script**: Click on the \"Run Script\" button. This will execute the script, adding a torus to your scene and setting up the animation to make it expand and shrink.\n\n6. **Play the Animation**: Switch to the Timeline panel and press the play button to"
    },
    {
        "Text Input": "A torus slides from top to bottom.",
        "Blender Script": "To create a simple animation in Blender where a torus slides from the top to the bottom, you can use the following Python script. This script assumes that you have a basic understanding of Blender's Python API, and it will automate the creation and animation of the torus object.\n\n```python\nimport bpy\n\n# Delete default objects (assuming a new, default file)\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Set the frame range\nscene = bpy.context.scene\nscene.frame_start = 1\nscene.frame_end = 120  # Adjust for a longer or shorter animation\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(\n    align='WORLD', \n    location=(0, 0, 5),  # Start position above the ground\n    rotation=(0, 0, 0), \n    major_radius=1, \n    minor_radius=0.25\n)\ntorus = bpy.context.active_object\ntorus.name = \"SlidingTorus\"\n\n# Animate the torus\ntorus.location = (0, 0, 5)\ntorus.keyframe_insert(data_path=\"location\", frame=scene.frame_start)  # Keyframe for start position\n\ntorus.location = (0, 0, 0)  # End position at the ground level\ntorus.keyframe_insert(data_path=\"location\", frame=scene.frame_end)  # Keyframe for end position\n\n# Set linear interpolation for the animation to make the slide consistent.\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optional: Add a ground plane for context\nbpy.ops.mesh.primitive_plane_add(\n    align='WORLD',\n    size=10,\n    location=(0, 0, 0)\n)\nground = bpy.context.active_object\nground.name = \"GroundPlane\"\n\n# Switch to camera view and set the camera angle if needed\nbpy.ops.object.camera_add(\n    location=(7, -7, 5),\n    rotation=(1.1, 0, 0.9)\n)\ncamera = bpy.context.active_object\ncamera.name = \"Camera\"\nscene.camera = camera\n\n# Optionally set some render settings\nscene.render.resolution_x = 1920\nscene.render.resolution_y = 1080\nscene.render.film_trans"
    },
    {
        "Text Input": "A cube oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that animates a cube oscillating in a sine wave pattern, follow the steps below. This script will create a cube, then animate it to move along the X-axis in a sine wave pattern over time.\n\n```python\nimport bpy\nimport math\n\n# Remove default objects (if necessary)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Define the animation parameters\nframe_start = 1\nframe_end = 250\namplitude = 2\nfrequency = 0.1\n\n# Ensure cube starts at frame 1\nbpy.context.scene.frame_set(frame_start)\n\n# Animate the cube\nfor frame in range(frame_start, frame_end + 1):\n    # Set current frame\n    bpy.context.scene.frame_set(frame)\n\n    # Calculate new location based on sine wave\n    x = frame * frequency  # Moving along X-axis\n    z = amplitude * math.sin(x)  # Oscillating on the Z-axis\n\n    # Apply the location to the cube\n    cube.location = (x, 0, z)\n\n    # Insert keyframe\n    cube.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the scene's end frame for the animation\nbpy.context.scene.frame_end = frame_end\n```\n\nThis script does the following:\n\n1. Deletes any existing mesh objects in the scene to start with a clean slate.\n2. Adds a new cube at the origin.\n3. Sets the animation parameters: \n   - `frame_start` and `frame_end` determine the length of the animation.\n   - `amplitude` determines the height of the oscillation.\n   - `frequency` affects the wavelength of the sine wave.\n4. Generates the animation by calculating the cube's position at each frame using the sine function, updating the position, and inserting keyframes for the location property.\n5. Sets the animation's endpoint to ensure it plays through the entire sine wave cycle.\n\nYou can adjust `amplitude` and `frequency` values to change the behavior of the oscillating wave. After running this script, you can play the animation in the timeline to see the cube oscillate as specified."
    },
    {
        "Text Input": "A cylinder jumps up and lands.",
        "Blender Script": "To create a simple animation of a cylinder jumping up and landing in Blender using Python, we'll utilize Blender's scripting capabilities. The following script will create a cylinder, animate it to jump up and then land back down.\n\n```python\nimport bpy\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\n\n# Get the cylinder object\ncylinder = bpy.context.active_object\n\n# Define keyframes for the animation\n# Set the cylinder at its initial position\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the cylinder at the peak of the jump\ncylinder.location = (0, 0, 5)\ncylinder.keyframe_insert(data_path=\"location\", frame=15)\n\n# Bring the cylinder back to its initial position\ncylinder.location = (0, 0, 1)\ncylinder.keyframe_insert(data_path=\"location\", frame=30)\n\n# Adjust interpolation to make it more realistic (default is Bezier)\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the end frame of the timeline for the animation\nbpy.context.scene.frame_end = 30\n```\n\n### Instructions:\n\n1. Open Blender.\n2. Go to the scripting tab.\n3. Copy and paste the script into a new text block.\n4. Run the script by pressing the \"Run Script\" button.\n\n### What the Script Does:\n\n- **Creates a Cylinder:** A cylinder is added to the scene at the position `(0, 0, 1)`.\n- **Sets Keyframes:** The script sets the location of the cylinder for three keyframes:\n  - Frame 1: Initial position `(0, 0, 1)`.\n  - Frame 15: Peak of the jump `(0, 0, 5)`.\n  - Frame 30: Lands back `(0, 0, 1)`.\n- **Linear Interpolation:** The default Bezier interpolation is changed to linear for a consistent motion.\n- **Timeline Adjustment:** The timeline is set to end at frame 30 to match the duration of the jump animation. \n\nThis script provides a basic jumping animation. For a more realistic jump, you could refine the interpolation"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create a script in Blender that makes a torus oscillate in a sine wave motion, you can use the following Python script. This script assumes you have a basic understanding of Blender's Python API and how to run scripts.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Frequency and amplitude of the sine wave\nfrequency = 1.0\namplitude = 2.0\n\n# Keyframe the torus to follow a sine wave motion\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the z position of the torus in the sine wave\n    z_position = amplitude * math.sin(frequency * (frame / 10.0))\n    \n    # Set the location of the torus\n    torus.location.z = z_position\n    \n    # Insert keyframe for the z location\n    torus.keyframe_insert(data_path=\"location\", index=2)  # index 2 is for z-axis\n\n# Play animation automatically (optional)\nbpy.ops.screen.animation_play()\n```\n\n### Explanation:\n\n- **Clear and Setup:** This script starts by clearing existing mesh objects in the scene to ensure a clean environment. It then adds a torus at the origin.\n\n- **Animation Parameters:** The animation parameters are defined, setting the start and end frames for the animation.\n\n- **Sine Wave Calculation:** The `for` loop iterates over each frame and calculates the new `z` position of the torus using a sine function. The frequency and amplitude control the nature of this motion.\n\n- **Keyframing:** For each frame, we set the location of the torus and insert a keyframe for the `z` location using `index=2` which refers to the `z` coordinate.\n\n- **Optional Animation Playback:** At the end of the script, the animation will"
    },
    {
        "Text Input": "A cylinder moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a cylinder move diagonally upwards, you'll need to set the initial position of the cylinder and then animate its location to move in a diagonal upward direction over a specified number of frames. Here's a basic script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Define the animation parameters\nstart_frame = 1\nend_frame = 100\nstart_position = (0, 0, 0)\nend_position = (10, 10, 10)\n\n# Set the keyframe at the start position\ncylinder.location = start_position\ncylinder.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the keyframe at the end position\ncylinder.location = end_position\ncylinder.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set the scene frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally, set the action to a linear interpolation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Cylinder animated to move diagonally upwards.\")\n```\n\n### Explanation:\n\n1. **Clear Existing Objects**: We start by deselecting and deleting any existing mesh objects in the scene to ensure a clean workspace.\n\n2. **Create a Cylinder**: The script adds a new cylinder at the origin `(0, 0, 0)`.\n\n3. **Animation Parameters**: The script defines the frames for the animation (from `start_frame` to `end_frame`) and the start and end positions for the cylinder.\n\n4. **Keyframing**: We set keyframes for the cylinder's location at the start and end frames. This creates an animation where the cylinder moves from the `start_position` to the `end_position` in a linear fashion.\n\n5. **Frame Range**: Adjusts the scene's frame range to match the animation.\n\n6. **Linear Interpolation**: Ensures smooth motion by setting the keyframe interpolation to linear.\n\nTo run this"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, we can utilize the Blender API. The following script will animate a plane's location on the Z-axis to simulate a bouncing effect. This can be achieved by keyframing the Z-location of the plane over several frames:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects from the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set animation parameters\nbounce_height = 2.0\nbounce_speed = 20.0\nnum_bounces = 3\nframes_per_bounce = 24\ntotal_frames = num_bounces * frames_per_bounce\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\n\n# Calculate keyframe positions for the bouncing effect\nfor bounce in range(num_bounces):\n    for i in range(frames_per_bounce):\n        frame_num = bounce * frames_per_bounce + i\n        bounce_cycle_position = i / frames_per_bounce * math.pi\n        z_location = abs(math.sin(bounce_cycle_position) * bounce_height)\n\n        # Set the location of the plane\n        plane.location.z = z_location\n\n        # Insert keyframe for the location on the Z-axis\n        plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_num)\n\n# Set playback to end at the final frame\nbpy.context.scene.frame_end = total_frames\n\nprint(\"Bouncing animation created.\")\n```\n\n### Explanation:\n- **Blender Environment Setup**: The script begins by clearing any existing mesh objects to keep our scene tidy and adds a new plane.\n- **Animation Variables**: We define variables like `bounce_height`, `bounce_speed`, `num_bounces`, and `frames_per_bounce` to control the bounce characteristics.\n- **Frame Loop**: Nested loops are used to calculate the required location of the plane at each frame. A sine function creates a smooth bouncing motion by varying the Z-location over time.\n- **Keyframe Insertion**: The `keyframe_insert` function is used to create"
    },
    {
        "Text Input": "A torus bounces like a ball.",
        "Blender Script": "To create a script in Blender that makes a torus bounce like a ball, you'll want to animate the torus object along the Z-axis to simulate the bouncing effect. The script will set keyframes to create the bounce animation, and you can use a sine wave function to make the bouncing smoother. Here's a simple script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Function to create keyframes for a bouncing torus\ndef create_bouncing_torus_animation(obj, bounce_height, frame_start, frame_end, bounce_count):\n    for frame in range(frame_start, frame_end + 1):\n        # Calculate normalized time over one bounce period\n        bounce_period = (frame_end - frame_start) / bounce_count\n        time = (frame - frame_start) % bounce_period / bounce_period\n        \n        # Use a sine wave to model the bounce effect\n        # This value will oscillate between 0 (ground) to 1 (peak)\n        bounce_factor = abs(math.sin(math.pi * time))\n        \n        # Apply the bounce height\n        obj.location.z = bounce_factor * bounce_height\n        \n        # Insert a keyframe\n        obj.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"BouncingTorus\"\n\n# Animation parameters\nbounce_height = 2.0\nframe_start = 1\nframe_end = 100\nbounce_count = 5\n\n# Create the bouncing animation\ncreate_bouncing_torus_animation(torus, bounce_height, frame_start, frame_end, bounce_count)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frame_end\n```\n\n### Script Explanation\n\n- **Torus Creation:** The script first clears any existing mesh objects in the scene and creates a new torus using `bpy.ops.mesh.primitive_torus_add`.\n\n- **Animation Function:** The `create_bouncing_torus_animation` function calculates the bounce using a sine function to simulate the bounce effect over a specified range of frames (`frame_start` to `frame_end`). The `bounce_height` parameter controls"
    },
    {
        "Text Input": "A torus scales up and down.",
        "Blender Script": "To create a Blender Python script that scales a torus up and down, you can animate the scale of the torus using keyframes. Below is a script that does that:\n\n```python\nimport bpy\n\n# Delete all existing objects to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Define the scale animation: scale up and then scale down\nscale_up = 2.0\nscale_down = 0.5\n\n# Set the initial scale keyframe (normal size)\ntorus.scale = (1.0, 1.0, 1.0)\ntorus.keyframe_insert(data_path=\"scale\", frame=0)\n\n# Scale up at half the animation\ntorus.scale = (scale_up, scale_up, scale_up)\ntorus.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Scale back to the original size at the end of the animation\ntorus.scale = (scale_down, scale_down, scale_down)\ntorus.keyframe_insert(data_path=\"scale\", frame=100)\n\n# Optionally, set interpolation to linear for consistent scaling speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Torus scaling animation created!\")\n```\n\n### Explanation:\n\n1. **Scene Setup**: The script begins by clearing all existing objects in the scene to ensure a clean start.\n\n2. **Torus Creation**: A torus is created using `bpy.ops.mesh.primitive_torus_add()`.\n\n3. **Frame Setup**: The animation frame range is set from frame 0 to frame 100.\n\n4. **Keyframe Animation**:\n   - The torus starts at its original scale at frame 0.\n   - At frame 50, the torus scales up to 2 times its original size.\n   - At frame 100, the torus scales down to half its original size.\n\n5. **Interpolation**: The interpolation is set to linear so that the scaling happens"
    },
    {
        "Text Input": "A monkey spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a monkey mesh (Suzanne) spin and scale up, you can use the following script. This script will add a Suzanne mesh to the scene, animate it to rotate, and scale it up over a specific number of frames.\n\n```python\nimport bpy\n\n# Delete all mesh objects in the current scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Define animation frames\nstart_frame = 1\nend_frame = 250\n\n# Set the initial scale and rotation\nmonkey.scale = (1, 1, 1)\nmonkey.rotation_euler = (0, 0, 0)\n\n# Insert initial keyframes\nmonkey.keyframe_insert(data_path=\"scale\", frame=start_frame)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Final scale and rotation\nfinal_scale = (3, 3, 3)  # Scale up to 3 times the original size\nfinal_rotation = (0, 0, 6.28319)  # 360 degrees in radians\n\n# Set the final scale and rotation\nmonkey.scale = final_scale\nmonkey.rotation_euler = final_rotation\n\n# Insert final keyframes\nmonkey.keyframe_insert(data_path=\"scale\", frame=end_frame)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the scene's current frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Animation setup complete. The monkey will spin and scale up over {0} frames.\".format(end_frame))\n```\n\n### Explanation:\n- The script starts by removing existing mesh objects to ensure a clean workspace.\n- It then adds a Suzanne (monkey head) primitive mesh at the world origin.\n- Keyframes are created for two properties: scale and rotation.\n- The initial frame (frame 1) keyframes the monkey's scale and Euler rotation to the default values.\n- The final frame (frame 250) keyframes the monkey to be scaled up to three times its original size and rotated 360 degrees (2 * \u03c0 radians) around the Z-axis.\n-"
    },
    {
        "Text Input": "A cone bounces like a ball.",
        "Blender Script": "Creating a bouncing cone animation in Blender using Python involves setting up a scene, creating the cone object, and animating its movement to simulate a bouncing effect. Below, I'll provide a Python script that you can run in Blender's scripting environment to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.object\ncone.name = \"BouncingCone\"\n\n# Set up animation parameters\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Set keyframes for a bouncing motion\nbounce_height = 5\nbounce_count = 5\nframe_interval = bpy.context.scene.frame_end // bounce_count\n\nfor bounce in range(bounce_count):\n    # Calculate the frames\n    start_frame = bounce * frame_interval\n    peak_frame = start_frame + frame_interval // 2\n    end_frame = start_frame + frame_interval\n    \n    # Starting point (on the ground)\n    cone.location.z = 1\n    cone.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Peak of the bounce\n    cone.location.z = bounce_height\n    cone.keyframe_insert(data_path=\"location\", frame=peak_frame)\n    \n    # Ending point (back on the ground)\n    cone.location.z = 1\n    cone.keyframe_insert(data_path=\"location\", frame=end_frame)\n    \n    # Decrease height for next bounce to simulate damping\n    bounce_height *= 0.8\n\n# Set linear interpolation for more realistic bounce\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Adjust camera for a good view\nbpy.ops.object.camera_add(location=(10, -10, 5), rotation=(math.radians(60), 0, math.radians(45)))\nbpy.context.scene.camera = bpy.context.object\n\n# Add a light\nbpy.ops.object.light_add(type='POINT', location=(5, -5, 10))\n\nprint(\"Bouncing cone animation created.\")\n```\n\n### Explanation\n- **Cone Creation**: The"
    },
    {
        "Text Input": "A monkey moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a monkey moving in a spiral motion, we'll need to perform the following steps:\n\n1. Create a monkey mesh using Blender's built-in Suzanne model.\n2. Define a spiral path for the monkey to follow.\n3. Animate the monkey along the spiral path using keyframes.\n\nHere's a script that achieves these steps:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add the monkey (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Add keyframes for the monkey to move in a spiral motion\nframe_start = 1\nframe_end = 240  # Adjust the number of frames for a longer spiral\n\n# Parameters for the spiral\nspiral_turns = 4\nheight_per_turn = 4\nradius_step = 0.1\n\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the angle and radius for the current frame\n    t = (frame - frame_start) / (frame_end - frame_start)\n    angle = spiral_turns * 2 * math.pi * t\n    radius = radius_step * t * (frame_end - frame_start)\n    height = height_per_turn * spiral_turns * t\n\n    # Update monkey's location along the spiral path\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    monkey.location = (x, y, height)\n    \n    # Set keyframe for the location\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frame_end\n```\n\nTo use this script:\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block and paste the above script into it.\n3. Click the \"Run Script\" button.\n\nThis script will generate a monkey (Suzanne) mesh that moves along a spiraling path. Adjust the number of spiral turns, the radius step, and the height per turn to modify the spiral's characteristics.\n\nNote: Make sure your scene is empty or consists only of items you're willing to clear, as this script deletes all existing mesh"
    },
    {
        "Text Input": "A plane spins while floating.",
        "Blender Script": "To create a Blender script that makes a plane spin while appearing to float in your scene, you can use the Python API provided by Blender. First, make sure your Blender environment is set up with an appropriate plane object. Then, execute the following script in Blender's scripting editor:\n\n```python\nimport bpy\nimport math\n\ndef create_material():\n    # Create a simple material\n    mat = bpy.data.materials.new(name=\"FloatingPlaneMaterial\")\n    # Use nodes\n    mat.use_nodes = True\n    # Clear default nodes\n    mat.node_tree.nodes.clear()\n    # Create an emission shader node for a simple glowing effect\n    emission_node = mat.node_tree.nodes.new(type='ShaderNodeEmission')\n    emission_node.inputs[0].default_value = (1, 1, 1, 1)  # White color\n    emission_node.inputs[1].default_value = 1.0  # Strength\n    # Create an output node\n    output_node = mat.node_tree.nodes.new(type='ShaderNodeOutputMaterial')\n    # Connect nodes\n    mat.node_tree.links.new(emission_node.outputs[0], output_node.inputs[0])\n    return mat\n\ndef create_spinning_plane():\n    # Create a plane\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False)\n    plane = bpy.context.object\n    plane.name = \"FloatingPlane\"\n\n    # Set the material\n    mat = create_material()\n    if plane.data.materials:\n        # Assign to first material slot\n        plane.data.materials[0] = mat\n    else:\n        # No slots\n        plane.data.materials.append(mat)\n\n    # Insert keyframes to make the plane spin\n    frame_start = 1\n    frame_end = 250\n    \n    # Set initial rotation (no rotation)\n    plane.rotation_euler = (0, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n    # Set end rotation (one full rotation at the end)\n    plane.rotation_euler = (0, 0, math.radians(360))\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n    # Set floating location keyframes\n    plane.location[2] = 0.2  # Initial floating position\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_start)\n    \n    plane.location["
    },
    {
        "Text Input": "A sphere moves diagonally upwards.",
        "Blender Script": "To create a script in Blender using Python that animates a sphere moving diagonally upwards, you can follow the steps below. This script will create a sphere object, add it to the scene, and animate it to move diagonally along the X, Y, and Z axes.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Ensure we start with a clear scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set keyframes for the sphere to move diagonally\nframe_start = 1\nframe_end = 120\n\n# Initial position\nsphere.location = (0, 0, 0)\nsphere.keyframe_insert(data_path='location', frame=frame_start)\n\n# Final position\nsphere.location = (10, 10, 10)\nsphere.keyframe_insert(data_path='location', frame=frame_end)\n\n# Set interpolation type to linear for a consistent diagonal movement\nfor fcurves in sphere.animation_data.action.fcurves:\n    for keyframe_point in fcurves.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\n# Optionally, you could set the animation timeline to these frame limits\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_set(frame_start)\n\nprint(\"Sphere animated diagonally upwards successfully!\")\n```\n\n### Explanation:\n- **Initial Scene Clearing**: We start by clearing any existing mesh objects in the scene to ensure we're starting fresh.\n- **Sphere Creation**: A UV sphere is added to the scene at the origin `(0, 0, 0)`.\n- **Animation Keyframes**: Two keyframes are added:\n  - The first at `frame_start` sets the initial position of the sphere.\n  - The second at `frame_end` sets the final position of the sphere 10 units diagonally up from the origin.\n- **Interpolation**: The interpolation for the keyframes is set to `LINEAR` to ensure uniform motion between frames.\n- **Timeline Adjustment**: The animation timeline is optionally configured to match the start and end frames of the animation, though the animation will work regardless of this setting.\n\nBy"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a torus oscillate in a sine wave, you can make use of Blender's API to animate the position of the torus object. Below is a script that you can run in Blender's scripting editor to achieve this.\n\nEnsure you have Blender open with a new project, and copy the following code into the Scripting workspace. Then run the script.\n\n```python\nimport bpy\nimport math\n\n# Create a torus object\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Clean up any previous animation data\ntorus.animation_data_clear()\n\n# Define the animation parameters\nframe_start = 1\nframe_end = 250\nfrequency = 0.1  # How fast the sine wave oscillates\namplitude = 2.0  # How far the torus moves from the center\n\n# Create keyframes for the sine wave oscillation\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the new Z position based on a sine wave\n    z_position = amplitude * math.sin(frequency * frame)\n    \n    # Set the location of the torus\n    torus.location.z = z_position\n    \n    # Insert a keyframe for the location\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=frame)  # index=2 is for the Z axis\n\n# Set the timeline end frame to our animation end frame\nbpy.context.scene.frame_end = frame_end\n```\n\n### Explanation:\n\n1. **Torus Creation**: The script first adds a torus to the scene using `bpy.ops.mesh.primitive_torus_add()`. This function places the torus object at the origin `(0, 0, 0)`.\n\n2. **Animation Data Clearing**: The `animation_data_clear()` method is called to remove any existing keyframes, ensuring that the animation starts fresh.\n\n3. **Animation Parameters**: The script sets up the `frame_start` and `frame_end` to define the animation duration. The `frequency` controls how fast the sine wave oscillates, while `amplitude` controls the height of the oscillation.\n\n4. **Keyframe Creation**: A loop runs over each frame in the animation. For each frame, it"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a cube 360 degrees, you can use the following script. This script will rotate the cube around the Z-axis over a period of time using keyframes.\n\nTo execute this script, open Blender, then go to the Scripting workspace, create a new text block, paste this code into it, and run the script.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set the starting frame and ending frame\nstart_frame = 1\nend_frame = 250\n\n# Set the rotation at the starting frame\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the rotation at the ending frame (360 degrees or 2*pi radians)\ncube.rotation_euler = (0, 0, 360 * (3.14159 / 180))  # Convert 360 degrees to radians\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the end of the timeline for animation\nbpy.context.scene.frame_end = end_frame\n```\n\nThis script first clears any existing objects in the scene, adds a new cube, and sets keyframes for the cube's rotation. The rotation is set to 0 radians at the first frame and `2*pi` radians (equivalent to 360 degrees) at the last frame. The keyframes will make the cube rotate smoothly over the duration of the animation. You can adjust the `end_frame` value to change the speed of the rotation."
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "To create a script in Blender that scales a plane up and down, you can use Python scripting to animate the scale transformation over time. Below is a simple example of how you might write a script to accomplish this:\n\n```python\nimport bpy\nimport math\n\n# Create a new plane if not already present\ndef create_plane():\n    # Check if a plane already exists\n    if \"MyPlane\" not in bpy.data.objects:\n        bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n        plane = bpy.context.active_object\n        plane.name = \"MyPlane\"\n    else:\n        plane = bpy.data.objects[\"MyPlane\"]\n    return plane\n\n# Function to create keyframes for scaling animation\ndef animate_scaling(plane, start_frame, end_frame, scale_factor):\n    # Set initial scale keyframe\n    plane.scale = (1, 1, 1)\n    plane.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n    # Set intermediate scale up keyframe\n    plane.scale = (scale_factor, scale_factor, scale_factor)\n    plane.keyframe_insert(data_path=\"scale\", frame=(start_frame + end_frame) // 2)\n\n    # Set final scale back down keyframe\n    plane.scale = (1, 1, 1)\n    plane.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\ndef main():\n    start_frame = 1\n    end_frame = 100\n    scale_factor = 3\n\n    # Create or get plane object\n    plane = create_plane()\n    \n    # Delete existing animation data if there is any\n    if plane.animation_data:\n        plane.animation_data_clear()\n    \n    # Animate plane scaling up and down\n    animate_scaling(plane, start_frame, end_frame, scale_factor)\n\n    # Set the animation frame range\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\n# Execute main function\nmain()\n```\n\n### Explanation:\n- **Create a Plane**: The script first checks if a plane named \"MyPlane\" already exists; if not, it creates a new plane and names it \"MyPlane\".\n- **Animate Scaling**: The script sets up keyframes to handle the scaling:\n  - At `start_frame`, the plane is at its original scale.\n  - At the midpoint of the timeline,"
    },
    {
        "Text Input": "A sphere zooms in and out.",
        "Blender Script": "To create a script in Blender that makes a sphere zoom in and out, you can use Python scripting to animate the `scale` property of the sphere. Below is a basic example of how you might achieve this using Blender's Python API:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set the number of frames for one complete zoom in and out cycle\nframes_per_cycle = 60\n\n# Define the animation frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = frames_per_cycle * 2  # Two cycles in total\n\n# Insert keyframes for scaling the sphere\n# Start at normal size\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path='scale', frame=1)\n\n# Zoom in after half cycle\nsphere.scale = (2, 2, 2)\nsphere.keyframe_insert(data_path='scale', frame=frames_per_cycle // 2)\n\n# Return to normal size at full cycle\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path='scale', frame=frames_per_cycle)\n\n# Reuse the cycle using linear interpolation\n# Cycle should zoom out and in again\nfcurve_x = sphere.animation_data.action.fcurves.find('scale', index=0)\nfcurve_y = sphere.animation_data.action.fcurves.find('scale', index=1)\nfcurve_z = sphere.animation_data.action.fcurves.find('scale', index=2)\n\n# Use linear interpolation for smooth transition\nfor fcurve in (fcurve_x, fcurve_y, fcurve_z):\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Duplicate keyframes for the second cycle\nsphere.scale = (0.5, 0.5, 0.5)  # Minimum zoom\nsphere.keyframe_insert(data_path='scale', frame=frames_per_cycle + frames_per_cycle // 2)\n\nsphere.scale = (1, 1, 1)  # Back to normal scale\nsphere.keyframe_insert(data_path='scale',"
    },
    {
        "Text Input": "A cylinder bounces like a ball.",
        "Blender Script": "To create a Blender Python script that animates a cylinder bouncing like a ball, you'll need to use Blender's animation features and Python scripting capabilities. The following script creates a cylinder, applies basic physics-like bounce animation, and uses keyframes to animate the motion.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.object\n\n# Set animation parameters\ntotal_frames = 100\nbounce_height = 5.0\ngravity = 9.8\n\n# Function to calculate vertical bounce height using a simple physics simulation\ndef bounce_function(frame, total_frames, bounce_height, gravity):\n    # Simulate a simple up-and-down parabolic movement\n    half_frames = total_frames / 2\n    t = (frame % half_frames) / half_frames\n    if frame % total_frames < half_frames:\n        # Ascending\n        return bounce_height * (1 - 4 * (t - 0.5)**2)\n    else:\n        # Descending\n        return max(0, bounce_height * (-4 * (t - 0.5)**2))\n\n# Add keyframes for the bouncing animation\nfor frame in range(0, total_frames + 1, 5):\n    bounce_y = bounce_function(frame, total_frames, bounce_height, gravity)\n    cylinder.location.z = bounce_y\n\n    # Insert location keyframe\n    cylinder.keyframe_insert(data_path=\"location\", index=-1, frame=frame)\n\n# Set interpolation to linear and adjust timing for a better bounce effect\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Adjust camera\nbpy.ops.object.camera_add(location=(10, -10, 10))\ncamera = bpy.context.object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Set the camera as the active camera\nbpy.context.scene.camera = camera\n\n# Set end frame for the animation\nbpy.context.scene.frame_end = total_frames\n\nprint(\"Bounce animation created!\")\n``"
    },
    {
        "Text Input": "A sphere slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that demonstrates a sphere sliding from top to bottom, you can use keyframe animation to move the sphere along the Z-axis from a higher position to a lower position. Here's a simple script that achieves this:\n\n```python\nimport bpy\n\n# Ensure the script operates on a clean slate by clearing existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 5))\nsphere = bpy.context.active_object\n\n# Set the start and end frames\nstart_frame = 1\nend_frame = 50\n\n# Set sphere initial position (top)\nsphere.location.z = 5\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set sphere final position (bottom)\nsphere.location.z = 0\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set linear interpolation for smooth translation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set up the scene's animation properties\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally, add a floor plane for visualization\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\n\n# Set the camera\nbpy.ops.object.camera_add(location=(7, -7, 5), rotation=(1.1, 0, 0.9))\ncam = bpy.context.active_object\nbpy.context.scene.camera = cam\n\n# Add some light\nbpy.ops.object.light_add(type='SUN', location=(0, 0, 10))\n\n# Print a message indicating the script has completed\nprint(\"Sphere slide animation setup completed.\")\n```\n\n### Explanation:\n1. **Scene Preparation:**\n   - The script begins by clearing all current objects to ensure a clean working environment.\n   \n2. **Adding a Sphere:**\n   - A UV sphere is created with a radius of 1 and initially positioned at Z=5 units above the origin.\n\n3. **Keyframe Animation:**\n   - Keyframes are inserted at frame 1 (start frame) and frame 50 (end"
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect with a cylinder in Blender using Python, you can use the following script. This script assumes you have some basic understanding of Blender's scripting API and Blender's interface.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.object\n\n# Function to add bouncing keyframes\ndef add_bouncing_keyframes(obj, bounce_height, start_frame, end_frame, bounces):\n    frame_range = end_frame - start_frame\n    frames_per_bounce = frame_range // (2 * bounces)\n    \n    for i in range(bounces):\n        frame_up = start_frame + i * 2 * frames_per_bounce\n        frame_down = frame_up + frames_per_bounce\n        \n        # Up bounce\n        obj.location.z = bounce_height\n        obj.keyframe_insert(data_path=\"location\", index=2, frame=frame_up)\n        \n        # Down bounce\n        obj.location.z = 1  # Original resting height\n        obj.keyframe_insert(data_path=\"location\", index=2, frame=frame_down)\n    \n    # Ensure the object returns to resting height at the end\n    obj.location.z = 1\n    obj.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Parameters for the bouncing animation\nbounce_height = 3\nstart_frame = 1\nend_frame = 100\nbounces = 5\n\n# Add bouncing keyframes\nadd_bouncing_keyframes(cylinder, bounce_height, start_frame, end_frame, bounces)\n\n# Set up animation playback settings\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_current = start_frame\n\n# Optionally, set the interpolation type to make the bounce smoother\naction = cylinder.animation_data.action\nfor fcurve in action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\nprint(\"Bouncing animation set up successfully!\")\n```\n\n### Explanation of the Script\n1. **Setup and Clean-up**: Ensure any existing meshes are deleted"
    },
    {
        "Text Input": "A plane rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a Blender Python script to create a simple animation where a plane rotates 360 degrees around the Z-axis. This script assumes you have Blender open and it will create the animation in the current scene.\n\n```python\nimport bpy\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set rotation keyframes to rotate the plane 360 degrees\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 60  # Total of 60 frames\n\n# Set initial rotation (0 degrees)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set final rotation (360 degrees)\nplane.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the animation end frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"360-degree plane rotation animation created.\")\n```\n\n### Instructions:\n\n1. Open Blender and navigate to the scripting workspace.\n2. Create a new text file in the Blender text editor.\n3. Copy and paste the script above into the text editor.\n4. Run the script by clicking on the 'Run Script' button in the text editor.\n\nThis script sets up an animation that rotates a plane around the Z-axis from frame 1 to frame 60. You can adjust `end_frame` if you want a slower or faster rotation. The plane rotates a full 360 degrees (6.28319 radians, since Blender uses radians for rotation) across the specified number of frames."
    },
    {
        "Text Input": "A torus rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a torus rotate 360 degrees, you can use the following code. This script initializes a torus, sets up a simple animation to rotate it around the Z-axis, and renders the result.\n\n```python\nimport bpy\n\n# Clear existing mesh objects in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set the total number of frames for the animation\nframes = 250  # you can adjust this number to control the speed of rotation\nbpy.context.scene.frame_end = frames\n\n# Adding keyframes for rotation\ntorus.rotation_mode = 'XYZ'\n\n# Initial keyframe at frame 1\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Final keyframe at the end of the animation\ntorus.rotation_euler = (0, 0, 360 * (3.14159/180))  # 360 degrees in radians\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frames)\n\n# Set interpolation to linear to ensure constant rotation speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the rendering engine to 'BLENDER_EEVEE' or 'CYCLES' if you need realistic rendering\nbpy.context.scene.render.engine = 'BLENDER_EEVEE'\n\n# Optionally, render the animation\n# bpy.ops.render.render(animation=True)\n\nprint(\"Script completed: A torus has been added and rotates 360 degrees over {} frames.\".format(frames))\n```\n\nTo use the script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new Text block and paste the script into it.\n3. Click the \"Run Script\" button.\n\nThis script will create a torus and animate it to rotate around the Z-axis over the duration of the specified frames. The script sets the interpolation to linear to ensure a smooth and constant speed rotation."
    },
    {
        "Text Input": "A cylinder flips upside down.",
        "Blender Script": "Below is a Blender Python script that creates a cylinder and animates it to flip upside down over the course of 60 frames. To use this script, you would run it in Blender's scripting environment.\n\n```python\nimport bpy\n\n# Function to create a cylinder\ndef create_cylinder():\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\n    return bpy.context.object\n\n# Function to set up the animation\ndef animate_cylinder_flip(cylinder, start_frame, end_frame):\n    # Set the initial keyframe\n    cylinder.rotation_euler = (0, 0, 0)\n    cylinder.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n    \n    # Set the final keyframe upside down\n    cylinder.rotation_euler = (3.14159, 0, 0)  # 180 degrees in radians around the X-axis\n    cylinder.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Clear existing objects and animations\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Create a cylinder\ncylinder = create_cylinder()\n\n# Animate the cylinder to flip upside down\nanimate_cylinder_flip(cylinder, start_frame=1, end_frame=60)\n```\n\nInstructions to run the script in Blender:\n1. Open Blender.\n2. Switch to the \"Scripting\" workspace.\n3. Create a new text block and copy the script into the text editor.\n4. Click \"Run Script\" to execute the animation.\n\nThis script sets up a scene, deletes any existing objects, creates a new cylinder, and then animates the cylinder to flip 180 degrees around the X-axis from frames 1 to 60."
    },
    {
        "Text Input": "A torus slides from top to bottom.",
        "Blender Script": "To create a simple animation of a torus sliding from the top to the bottom in Blender using Python, you can use the following script. This script sets up a torus, adds keyframes to move it from a higher position to a lower position along the Z-axis, and animates this movement over time.\n\nMake sure you run this script in Blender's scripting editor:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a Torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 3))\ntorus = bpy.context.active_object\n\n# Set keyframes for animation\nframe_start = 1\nframe_end = 100\n\n# Set initial keyframe at the top\ntorus.location = (0, 0, 5)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Set final keyframe at the bottom\ntorus.location = (0, 0, -5)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set up the animation timeline\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_current = frame_start\n\n# Play the animation to confirm\nbpy.ops.screen.animation_play()\n\nprint(\"Animation setup complete: Torus slides from top to bottom.\")\n```\n\nThis script does the following:\n\n1. Clears any existing objects in the scene.\n2. Adds a new torus mesh at a high position.\n3. Sets up two keyframes for the torus location: one at the start with a high Z value and another at the end with a low Z value.\n4. Configures the animation timeline to start and end with the specified frames.\n5. Plays the animation, showing the torus sliding downward over the defined frame range.\n\nTo stop the animation in Blender, press the Spacebar (or ESC), depending on your Blender shortcuts configuration. Adjust the location values and frame numbers to suit your specific needs for the animation."
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cylinder in Blender using Python, you'll need to use the Blender API. This script will create a cylinder, animate it to move up and down like it's bouncing, and set up a simple timeline for the animation.\n\nHere's a script to achieve that:\n\n```python\nimport bpy\nimport math\n\n# Clean up the existing scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Function to add keyframes for the bouncing effect\ndef add_bounce_animation(obj, frame_start, frame_end):\n    # Calculate a mid-frame to create a bounce arc\n    mid_frame = (frame_start + frame_end) // 2\n    \n    # Initial position\n    obj.location = (0, 0, 1)\n    obj.keyframe_insert(data_path=\"location\", frame=frame_start)\n    \n    # Mid position (highest point)\n    obj.location = (0, 0, 3)  # Raised to simulate bounce\n    obj.keyframe_insert(data_path=\"location\", frame=mid_frame)\n    \n    # End position (back to ground)\n    obj.location = (0, 0, 1)\n    obj.keyframe_insert(data_path=\"location\", frame=frame_end)\n    \n    # Add a cyclic bounce effect\n    fcurves = obj.animation_data.action.fcurves\n    for fcurve in fcurves:\n        mod = fcurve.modifiers.new(type='CYCLES')\n        \n# Add bouncing animation to the cylinder\nadd_bounce_animation(cylinder, bpy.context.scene.frame_start, bpy.context.scene.frame_end)\n\n# Set the animation playback to loop\nbpy.context.scene.frame_current = bpy.context.scene.frame_start\n\nprint(\"Bouncing cylinder animation created!\")\n```\n\n### How to Run the Script:\n1. Open Blender.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text block in the text editor area.\n4. Copy and paste the script into the text editor.\n5. Click on \"Run Script\" or use the shortcut `Alt + P` with the cursor in the text editor to execute the script.\n\n"
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a cube orbit around another object, we'll use the Blender Python API (bpy). In this example, we'll set up a simple scene where a cube orbits around a central sphere. We'll add keyframes to animate the rotation of the cube around the sphere.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create the central sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_sphere = bpy.context.object\ncentral_sphere.name = 'CentralSphere'\n\n# Create the orbiting cube\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(2.5, 0, 0))\norbiting_cube = bpy.context.object\norbiting_cube.name = 'OrbitingCube'\n\n# Set origin of cube to the world origin for proper rotation around the sphere\nbpy.ops.object.origin_set(type='ORIGIN_CURSOR')\n\n# Add animation to make the cube orbit around the sphere\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the angle of rotation in radians\n    angle = (frame / frame_end) * 2 * math.pi\n    \n    # Set the location of the cube based on the angle\n    x = 2.5 * math.cos(angle)\n    y = 2.5 * math.sin(angle)\n    orbiting_cube.location = (x, y, 0)\n    \n    # Insert a keyframe for this frame\n    orbiting_cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the rotation mode to Euler for the cube to ensure correct keyframes\norbiting_cube.rotation_mode = 'XYZ'\n\n# Optionally, adjust the render settings or output settings\nbpy.context.scene.render.fps = 24\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.filepath = \"//orbit_animation.mp4\"\n\n# Uncomment the line below to render the animation\n# bpy.ops.render.render(animation=True)\n```\n\n### How to Use This Script:\n1. Open Blender and ensure you are in the scripting workspace.\n2. Create a new text"
    },
    {
        "Text Input": "A cube spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cube spin and scale up, you'll first need to ensure that Blender's scripting components are ready. This script will animate a cube from the default scene to both spin around its axis and scale up over a period of time.\n\nTo run this script, you'll need to have Blender open and access the text editor where you can input and execute Python scripts.\n\nBelow is a script that will accomplish the task:\n\n```python\nimport bpy\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 120\n\n# Ensure we are on the first frame\nbpy.context.scene.frame_set(start_frame)\n\n# Create a cube if not already present\nif \"Cube\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_cube_add()\ncube = bpy.data.objects[\"Cube\"]\n\n# Clear existing animation data\ncube.animation_data_clear()\n\n# Initial scale\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Final scale at the end of animation\ncube.scale = (3, 3, 3)  # Scaling up by a factor of 3\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Initial rotation\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Final rotation, spins 2 full rotations (720 degrees) on the Z-axis\ncube.rotation_euler = (0, 0, 2 * 3.14159 * 2)  # 2 full rotations\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the scene duration (optional)\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Animation created: Cube spins and scales up.\")\n```\n\n### Explanation:\n\n1. **Initialization**:\n   - The script first sets the start and end frames for the animation.\n   - It ensures that we're starting from the first frame with `bpy.context.scene.frame_set(start_frame)`.\n\n2. **Cube Creation**:\n   - The script checks for the existence of a cube in the scene and creates one if not present.\n\n3. **Clear Previous Animations**:\n   - Any existing animation data on the cube is cleared using `cube.animation_data_clear()`.\n\n4. **Setting"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a cube expand and shrink, we'll use keyframe animation. This involves altering the scale of the cube over time. We'll create a simple animation loop where the cube scales up and down.\n\nBelow is a Blender Python script you can run in Blender's scripting editor to achieve this effect:\n\n```python\nimport bpy\n\n# Delete default objects if present\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set keyframe parameters\nstart_frame = 1\nmid_frame = 20\nend_frame = 40\nmax_scale = 2.0\nmin_scale = 0.5\n\n# Set the animation length - expand then shrink\nbpy.context.scene.frame_end = end_frame\n\n# Set initial scale\ncube.scale = (min_scale, min_scale, min_scale)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Set scale for expansion\ncube.scale = (max_scale, max_scale, max_scale)\ncube.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Set scale back to initial for shrink\ncube.scale = (min_scale, min_scale, min_scale)\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Create infinite loop toggle\nfcu_list = [cube.animation_data.action.fcurves.find(\"scale\", index=i) for i in range(3)]\nfor fcu in fcu_list:\n    if fcu:\n        mod = fcu.modifiers.new(type='CYCLES')\n        mod.mode_before = 'REPEAT'\n        mod.mode_after = 'REPEAT'\n\n# Add a smooth transition with easing\nfor fcu in fcu_list:\n    for kp in fcu.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\n# Select a camera view for better visualization (optional)\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(5, -5, 5), rotation=(1.2, 0, 1))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\n\n# Set timeline start\nbpy.context.scene.frame_start = start_frame\nb"
    },
    {
        "Text Input": "A torus oscillates in a sine wave.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a torus and animates it so that it oscillates vertically in a sine wave pattern.\n\n```python\nimport bpy\nimport math\n\n# Function to create a torus\ndef create_torus():\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n    torus = bpy.context.active_object\n    torus.name = \"OscillatingTorus\"\n    return torus\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create torus\ntorus = create_torus()\n\n# Define sine wave parameters\namplitude = 2.0  # Amplitude of the sine wave\nfrequency = 1.0  # Frequency of the sine wave\n\n# Set animation frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Animate the torus\nfor frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    z_location = amplitude * math.sin(frequency * frame * 2 * math.pi / bpy.context.scene.frame_end)\n    torus.location.z = z_location\n    torus.keyframe_insert(data_path=\"location\", index=2)  # Index 2 corresponds to the Z-axis\n\nbpy.context.scene.frame_set(bpy.context.scene.frame_start)\n```\n\n### Explanation:\n- **Torus Creation**: The script uses `bpy.ops.mesh.primitive_torus_add` to add a torus to the scene.\n- **Animation Parameters**: Define `amplitude` and `frequency`, which control the height and speed of the oscillation, respectively.\n- **Frame Range**: The script sets the frame range from 0 to 100 for the animation sequence.\n- **Sine Wave Motion**: It calculates the Z-position of the torus using a sine function, which changes based on the current frame. The `math.sin` function ensures the torus oscillates smoothly over time.\n- **Keyframes**: The torus' Z-location is keyframed for each frame, recording the vertical position for animation.\n\nTo run this script:\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a monkey mesh (Suzanne) on the X-axis, you can use the following script. This script will add a monkey mesh to the scene, and then set keyframes to animate its rotation on the X-axis over a certain number of frames.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Remove all existing objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\ndef add_monkey():\n    # Add a monkey mesh to the scene\n    bpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\n    monkey = bpy.context.active_object\n    monkey.name = \"RotatingMonkey\"\n    return monkey\n\ndef rotate_monkey_x(monkey, start_frame, end_frame, rotation_angle):\n    # Set the initial keyframe\n    bpy.context.scene.frame_set(start_frame)\n    monkey.rotation_euler = (0, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n    # Set the final keyframe\n    bpy.context.scene.frame_set(end_frame)\n    monkey.rotation_euler = (rotation_angle, 0, 0)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\ndef run():\n    clear_scene()\n    monkey = add_monkey()\n    \n    # Parameters for the animation\n    start_frame = 1\n    end_frame = 60\n    rotation_angle = 2 * 3.14159  # One full rotation in radians (360 degrees)\n\n    # Rotate the monkey around the X-axis\n    rotate_monkey_x(monkey, start_frame, end_frame, rotation_angle)\n\n# Execute the script\nrun()\n```\n\n### Explanation:\n- **clear_scene function**: This clears the current scene by selecting all objects and deleting them.\n- **add_monkey function**: This adds a new Suzanne (monkey) mesh to the scene.\n- **rotate_monkey_x function**: This function sets up a simple animation. It inserts a keyframe at the start and end frame for the X-axis rotation. The monkey rotates one full rotation (360 degrees, which is `2 * \u03c0` radians) over the specified frame range.\n- **run function**: This is the main function that coordinates clearing the scene, adding the monkey, and setting up the animation.\n\nYou can alter the `start_frame`, `end_frame"
    },
    {
        "Text Input": "A plane oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that animates a plane oscillating in a sine wave pattern, you can use the following script. This script will create a plane and animate it to move up and down along the Z-axis in a sine wave motion.\n\n```python\nimport bpy\nimport math\nimport mathutils\n\n# Delete all objects in the scene to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set animation parameters\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_set(frame_start)\n\n# Create a function to apply a sine wave transformation\ndef apply_sine_wave(ob, frame, amplitude=2, frequency=1, speed=0.1):\n    ob.location.z = amplitude * math.sin(frequency * speed * frame)\n    ob.keyframe_insert(data_path=\"location\", index=2)\n\n# Apply the sine wave transformation across the frame range\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    apply_sine_wave(plane, frame)\n\n# Reset the frame to the starting frame\nbpy.context.scene.frame_set(frame_start)\n```\n\nHere's what the script does:\n\n1. **Delete Existing Objects**: Clears the scene to prevent interference from existing objects.\n2. **Create a Plane**: Adds a plane to the scene at the origin.\n3. **Animation Parameters**: Sets up the start and end frames for the animation.\n4. **Sine Wave Function**: A function `apply_sine_wave` is defined to calculate and apply the sine wave transformation based on frame number.\n5. **Animate the Plane**: Iterates through the frame range, setting the Z location of the plane to oscillate in a sine wave pattern, and inserts keyframes.\n6. **Reset Frame**: Resets the scene to start on the first frame.\n\nYou can adjust the `amplitude`, `frequency`, and `speed` parameters in the `apply_sine_wave` function to modify the sine wave characteristics to fit your needs."
    },
    {
        "Text Input": "A cone spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a cone spin while floating, you can use the following script. This script will create a cone, animate its spinning, and make it move up and down to simulate floating.\n\n```python\nimport bpy\nimport math\nimport mathutils\n\n# Delete default objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\n\n# Get the cone object\ncone = bpy.context.object\n\n# Spinning animation\nframe_start = 1\nframe_end = 250\n\n# Set keyframes for spinning animation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncone.rotation_euler = (0, 0, math.radians(360))\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Floating animation\nfloat_height = 2.0\nh_frames = frame_end / 2\n\n# Create a float (up-down) animation using a sine wave\nfor frame in range(frame_start, frame_end + 1):\n    z_location = float_height * math.sin(math.radians((frame - frame_start) / frame_end * 360))\n    cone.location = (0, 0, z_location)\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the interpolation type to linear to make the spinning smooth\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the animation to repeat indefinitely\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.render.fps = 30  # Set the frame rate\n\n# Enable loop playback\nbpy.context.scene.timeline_markers.clear()\nbpy.context.scene.use_preview_range = True\nbpy.context.scene.frame_preview_start = frame_start\nbpy.context.scene.frame_preview_end = frame_end\n```\n\n### Explanation:\n1. The script clears the existing mesh objects from the scene.\n2. It then adds a cone mesh object.\n3. Animations are"
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a cone rotate around the X-axis, you can use the following script. This script will add a cone to the scene and then set up an animation for it to rotate around the X-axis. You can run this script in Blender's scripting editor.\n\n```python\nimport bpy\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the frame range\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Rotate the cone on the X-axis over time\ncone.rotation_mode = 'XYZ'\n\n# Insert keyframes\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ncone.rotation_euler = (3.14159 * 2, 0, 0)  # 360 degrees in radians\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the animation playback to loop\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Cone rotation animation has been set up.\")\n```\n\nInstructions for using the script:\n\n1. Open Blender.\n2. Go to the scripting workspace.\n3. Create a new text block.\n4. Copy and paste the script into the text editor.\n5. Run the script with the \"Run Script\" button.\n\nThis will add a cone at the origin and create an animation where the cone completes a full 360-degree rotation around the X-axis over the span of 250 frames. The animation loop will make the cone continuously rotate when played in the timeline. Adjust the `end_frame` value for a faster or slower rotation speed."
    },
    {
        "Text Input": "A plane moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that moves a plane in a spiral motion, you can use the following script. This script will animate a plane object in a 3D spiral path over time. Make sure you have a plane object in your Blender file, or you can create one through the script.\n\n```python\nimport bpy\nimport math\n\n# Ensure we start with a clear scene or create a new plane\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"SpiralPlane\"\n\n# Set animation parameters\nframes = 250  # total number of frames\nradius_increase = 0.05  # how much the spiral radius increases per rotation\nheight_increase = 0.1  # how much the spiral height increases per rotation\nnum_rotations = 5  # number of full spiral rotations\n\n# Remove existing animation data\nif plane.animation_data:\n    plane.animation_data_clear()\n\n# Insert keyframes to animate the plane along a spiral trajectory\nfor frame in range(frames):\n    fraction = frame / frames  # running fraction of animation\n    angle = 2 * math.pi * num_rotations * fraction  # corresponding angle for spiral motion\n    radius = radius_increase * num_rotations * 10 * fraction  # radius increases linearly\n    height = height_increase * num_rotations * 10 * fraction  # height increases linearly\n\n    # Calculate new location in a spiral path\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    z = height\n\n    # Set the location of the plane\n    plane.location = (x, y, z)\n\n    # Insert keyframe for location\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the scene to use correct frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frames\n```\n\n### How the Script Works:\n1. **Clearing the Scene:** It deletes all existing mesh objects to ensure a clean environment.\n2. **Creating a Plane:** Adds a new plane to the scene.\n3."
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a plane scale up and down, you can use Blender's `bpy` module to animate the scaling action over time. Below is a script that demonstrates how to achieve this. Make sure you run this script in Blender's scripting editor.\n\n```python\nimport bpy\n\n# Ensure the script starts with a clean state\nbpy.ops.object.select_all(action='DESELECT')\n\n# Delete existing objects\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a plane to the scene\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set animation length\nframe_start = 1\nframe_end = 120\nbpy.context.scene.frame_end = frame_end\n\n# Define scaling keyframes\nscale_min = 1.0\nscale_max = 3.0\n\n# Insert keyframes for scaling up\nplane.scale = (scale_min, scale_min, scale_min)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_start)\n\nplane.scale = (scale_max, scale_max, scale_max)\nplane.keyframe_insert(data_path=\"scale\", frame=(frame_start + frame_end) / 2)\n\n# Insert keyframes for scaling down back to original size\nplane.scale = (scale_min, scale_min, scale_min)\nplane.keyframe_insert(data_path=\"scale\", frame=frame_end)\n\n# Set interpolation to linear for continuous scaling motion\nfor fcu in plane.animation_data.action.fcurves:\n    for kp in fcu.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Scaling animation set from frame\", frame_start, \"to\", frame_end)\n```\n\n### How to Use the Script:\n1. Open Blender and go to the \"Scripting\" workspace.\n2. Create a new text block in the text editor and paste the script into it.\n3. Click on \"Run Script\" to execute the script.\n\nUpon running the script, a plane will be created at the center of the scene, and it will animate to scale up and then back down across 120 frames. The script sets the interpolation of the scaling animation to linear to ensure that the scaling happens at a constant rate. You can adjust the `scale_max`, `frame_end`, and `frame_start` variables to change the size and speed of the animation."
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "To create a Blender Python script where a sphere moves in a circular path, we'll need to animate the sphere with keyframes along a circular path. Here's how you can achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Set the scene frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(2, 0, 0))\nsphere = bpy.context.object\n\n# Define the circular path parameters\ncenter = (0, 0, 0)     # Center of the circle\nradius = 5             # Radius of the circle\nnum_frames = 250       # Total number of frames in the animation\n\n# Insert keyframes for the sphere to move in a circular path\nfor frame in range(num_frames):\n    angle = (frame / num_frames) * 2 * math.pi  # Calculate the angle for the current frame\n    x = center[0] + radius * math.cos(angle)   # Calculate x position\n    y = center[1] + radius * math.sin(angle)   # Calculate y position\n\n    # Set the location of the sphere\n    sphere.location = (x, y, 0)\n\n    # Insert a keyframe at the current frame for location\n    sphere.keyframe_insert(data_path=\"location\", index=-1, frame=frame + 1)\n\nprint(\"Sphere moving in a circular path animation script executed successfully.\")\n```\n\nSteps to run the script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Copy and paste the above script into a new Text Editor window.\n3. Click the \"Run Script\" button to execute it.\n\nThis script will add a UV sphere to the scene, set up a frame range for animation, and keyframe the sphere's location to move it in a circular path around the origin point in the XY-plane. You can adjust the center, radius, and `num_frames` to customize the animation to your liking."
    },
    {
        "Text Input": "A monkey moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a monkey (Suzanne, the default Blender monkey mesh) moves from left to right, you can use the following Python script. This script assumes you have a basic understanding of how to run scripts in Blender. Simply open a new project, open the text editor, paste the script, and run it.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a Monkey (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(-5, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Set the initial keyframe\nmonkey.location = (-5, 0, 0)\nmonkey.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the final location and keyframe\nmonkey.location = (5, 0, 0)\nmonkey.keyframe_insert(data_path=\"location\", frame=100)\n\n# Switch to animation mode\nbpy.context.scene.frame_set(1)\n\n# Optional: Add a camera and light for better viewing\n# Add a camera\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(0, -10, 5))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\n# Add a sun light\nbpy.ops.object.light_add(type='SUN', radius=1, location=(0, -5, 5))\n\nprint(\"Monkey animation from left to right created successfully!\")\n```\n\n### Key Points:\n\n1. **Clear the Scene**: The script begins by clearing any existing objects to start fresh.\n2. **Add a Monkey**: Suzanne (the monkey mesh) is added to the scene.\n3. **Set Keyframes**: Keyframes are set for the monkey's location at the start and end of the animation.\n4. **Animation Timeline**: The animation runs from frame 1 to frame 100.\n5. **Camera and Lighting**: A camera and sun light are added for better viewing of the animation.\n\nThis script will create a simple linear motion of the monkey from left to right on the X-axis over 100 frames. You can modify the start and end positions, frame range, or add more"
    },
    {
        "Text Input": "A plane tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a plane tilt back and forth, you can use the `bpy` module to define the animation. Below is a script that sets up a simple animated plane object in Blender, making it tilt back and forth by animating its rotation along the X axis.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Define keyframes for the tilt animation\nnumber_of_frames = 40\ntilt_angle = 45  # degrees\n\n# Set initial keyframe\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set tilt forward keyframe\nplane.rotation_euler = (tilt_angle * (3.14159 / 180.0), 0, 0)  # convert degrees to radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=number_of_frames // 2)\n\n# Set return to normal keyframe\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=number_of_frames)\n\n# Optional: Set animation to loop\nscene = bpy.context.scene\nscene.frame_start = 1\nscene.frame_end = number_of_frames\nscene.render.fps = 24\n\n# Set interpolation to linear for smooth oscillation\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n        \n# Play the animation\nbpy.context.scene.frame_set(1)\nbpy.ops.screen.animation_play()\n```\n\nThis script does the following:\n1. Clears any existing objects in the scene.\n2. Adds a new plane object to the scene.\n3. Sets up keyframes for the plane's rotation such that it tilts along the X axis to 45 degrees and then back to its original position.\n4. Configures the animation to loop through setting the start and end frames.\n5. Changes the interpolation to linear to ensure the tilting motion is smooth and continuous.\n6. Initiates the animation playback.\n\n"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using a Python script, you can use the following steps. This script will animate a plane object to move up and down to create a simple bouncing effect. Make sure your scene has a plane named \"Plane\", or adjust the script accordingly to match the name of your plane object.\n\nHere's a step-by-step script:\n\n```python\nimport bpy\n\n# Function to clear existing keyframes for the plane\ndef clear_keyframes(obj):\n    if obj.animation_data:\n        obj.animation_data_clear()\n\n# Get the plane object\nplane = bpy.data.objects.get(\"Plane\")\n\n# Ensure the object exists\nif plane is None:\n    raise Exception(\"Plane object not found. Please ensure there's an object named 'Plane'.\")\n\n# Clear any previous keyframes\nclear_keyframes(plane)\n\n# Set the frame start and end for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define bouncing parameters\nbounce_height = 2.0\nbounce_count = 3\n\n# Calculate frames for each bounce\ntotal_bounces = 2 * bounce_count  # Up and down\nframes_per_bounce = (end_frame - start_frame) // total_bounces\n\n# Insert keyframes for bounce effect\nfor i in range(total_bounces + 1):\n    \n    # Calculate current frame\n    current_frame = start_frame + i * frames_per_bounce\n    \n    # Set the plane's location with a bouncing effect\n    bounce_factor = 1 if i % 2 == 0 else 0  # Up on even, down on odd\n    plane.location.z = bounce_height * bounce_factor\n    \n    # Insert location keyframe\n    plane.keyframe_insert(data_path=\"location\", frame=current_frame, index=2)\n\n# Finishing setup for smooth animation\nfor fcurves in plane.animation_data.action.fcurves:\n    for kp in fcurves.keyframe_points:\n        kp.interpolation = 'BEZIER'\n\nprint(\"Bouncing effect created for plane.\")\n```\n\n### Explanation:\n\n- **Object Retrieval**: Retrieves the plane object from the scene. Ensure that the plane's name is correctly referenced as \"Plane\".\n- **Clear Keyframes**: Clears any existing keyframes for a clean start.\n- **Animation Parameters**: Defines start and end frames for the animation, height of the"
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cone sliding from the top to the bottom, we need to set up basic steps: we will create a cone and animate its position along the z-axis or y-axis (whichever direction you prefer). Here is a simple script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 5))\ncone = bpy.context.object\n\n# Set the animation length\ntotal_frames = 100\nbpy.context.scene.frame_end = total_frames\n\n# Start at frame 1\nbpy.context.scene.frame_set(1)\n\n# Set the initial position of the cone at the top\ncone.location = (0, 0, 5)\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the final position of the cone at the bottom\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n# Select smoothing type for the animation\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Update the scene\nbpy.context.view_layer.update()\n\nprint(\"Cone animation from top to bottom setup complete.\")\n```\n\n### Explanation:\n1. **Clear Existing Objects**: We start by removing any existing objects in the scene to avoid clutter.\n   \n2. **Create a Cone**: We then add a cone object to the scene at a starting location of `(0, 0, 5)`, which is at the top.\n\n3. **Set Animation Length**: We specify the total number of frames for the animation (e.g., 100 frames).\n\n4. **Insert Keyframes**: \n   - The first keyframe at frame 1 places the cone at the top `(0, 0, 5)`.\n   - The final keyframe at the `total_frames` (100) places the cone at the bottom `(0, 0, 0)`.\n\n5. **Interpolation**: We set the interpolation of the animation to 'LINEAR' to ensure a smooth consistent slide without ease-in or ease-out.\n\n6."
    },
    {
        "Text Input": "A sphere wiggles side to side.",
        "Blender Script": "Certainly! To create a simple animation in Blender where a sphere wiggles from side to side, you can use the following Python script. This script will set up a scene with a sphere, add keyframes to animate its side-to-side motion along the X-axis, and animate smoothed transitions for the wiggle using sine functions.\n\n```python\nimport bpy\nimport math\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 120  # This makes a 4-second animation assuming 30 FPS\nwiggle_frequency = 2  # How many wiggles per second\nwiggle_amplitude = 1  # How far the sphere moves side-to-side\n\n# Set the sphere's location keyframes\nfor frame in range(start_frame, end_frame + 1):\n    # Calculate time in seconds\n    time = (frame - start_frame) / bpy.context.scene.render.fps\n\n    # Set the new X location based on sine wave\n    new_x_location = wiggle_amplitude * math.sin(2 * math.pi * wiggle_frequency * time)\n    \n    # Apply the new location\n    sphere.location.x = new_x_location\n    \n    # Insert a keyframe for location\n    sphere.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Smooth out the animation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\n# Set end frame\nbpy.context.scene.frame_end = end_frame\n\n# Just for better visual representation: set an appropriate camera view\nbpy.ops.object.camera_add(location=(0, -5, 2))\ncamera = bpy.context.object\ncamera.rotation_euler = (math.radians(75), 0, 0)\nbpy.context.scene.camera = camera\n\nprint(\"Sphere wiggle animation script complete.\")\n```\n\n### Instructions to use the script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script above into it.\n3. Click on \"Run Script\" to execute the script and"
    },
    {
        "Text Input": "A cone oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a cone oscillate in a sine wave, we'll animate the cone's movement along the Z-axis using Blender's animation system. Here's a basic script to achieve that:\n\n1. Open Blender and create a new General project.\n2. Delete the default cube.\n3. Use the script below to create and animate a cone.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set up animation parameters\nframe_start = 1\nframe_end = 250\nfrequency = 2  # Oscillations per second\namplitude = 2  # Peak displacement\n\n# Function to apply sine wave movement to the cone\ndef animate_cone():\n    for frame in range(frame_start, frame_end + 1):\n        # Calculate current time in seconds\n        time = frame / bpy.context.scene.render.fps\n        \n        # Sine wave formula for the Z-axis\n        z_location = amplitude * math.sin(2 * math.pi * frequency * time)\n\n        # Set keyframes\n        cone.location = (0, 0, z_location)\n        cone.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Clear existing keyframes\ncone.animation_data_clear()\n\n# Animate the cone\nanimate_cone()\n\n# Set the scene's frame range and start playback\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_current = frame_start\n\nprint(\"Cone oscillation animation created successfully!\")\n```\n\n### Explanation:\n- **Create a Cone**: We start by deleting existing objects and adding a new cone mesh.\n- **Animation Setup**: We configure the animation to run from frame 1 to 250. You can adjust `frequency` and `amplitude` to get different oscillation effects. The formula used here is a basic sine wave: `z_location = amplitude * sin(2 * pi * frequency * time)`.\n- **Keyframe Insertion**: For each frame, we compute the location of the cone along the Z-axis based on the"
    },
    {
        "Text Input": "A cone moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a cone moving in a spiral motion, you'll use Blender's scripting capabilities to create a cone, define a spiral path, and animate the cone along that path. Below is a script that sets up this animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\ncone.name = \"SpiralCone\"\n\n# Animation settings\nframes = 250\nradius = 5\nheight_increment = 0.1\nangle_increment = math.radians(10)  # 10-degree increment per frame\n\n# Keyframe the spiral motion\nfor frame in range(frames):\n    # Calculate the location of the cone in spiral path\n    angle = angle_increment * frame\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    z = height_increment * frame\n    \n    # Move the cone\n    cone.location = (x, y, z)\n\n    # Insert keyframes for location.\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n```\n\n### Explanation:\n\n1. **Clear Existing Objects**: This script starts by clearing any existing mesh objects to start fresh. Ensure you have the correct selection before deleting.\n\n2. **Add Cone**: A basic cone is added at the starting location of the spiral path.\n\n3. **Define Animation Parameters**:\n   - `frames`: Total number of frames for the animation. Adjust for longer or shorter animations.\n   - `radius`: The fixed radius of the spiral path.\n   - `height_increment`: The amount by which the height of the cone increases with each frame to create the spiral effect.\n   - `angle_increment`: The angle in radians for each step/frame to create the spiral motion. This defines how tight or loose the spiral is.\n\n4. **Spiral Motion**: For each frame:\n   - Calculate the position in the XY plane using polar coordinates and convert to Cartesian (`x` and `y` using cosine and sine functions).\n   - Increment the `z` position to achieve the spiral rise.\n   - Set the cone's location and insert a key"
    },
    {
        "Text Input": "A cylinder moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that makes a cylinder move in a spiral motion, we'll need to animate the cylinder's position over time. This involves creating an animation curve for the location of the cylinder in Blender. Below is a sample script that accomplishes this in Blender:\n\n```python\nimport bpy\nimport math\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set animation parameters\nnum_frames = 250\nspiral_radius = 5\nspiral_height = 10\nspiral_turns = 3\nspiral_center = [0, 0, 0]\n\n# Prepare the animation\ncylinder.animation_data_clear()  # Clear any existing animation data\n\n# Animate the cylinder in a spiral motion\nfor frame in range(num_frames):\n    # Calculate the angle for the current frame\n    angle = 2 * math.pi * frame * (spiral_turns / num_frames)\n    \n    # Calculate the position at this frame\n    x = spiral_center[0] + spiral_radius * math.cos(angle)\n    y = spiral_center[1] + spiral_radius * math.sin(angle)\n    z = spiral_center[2] + (spiral_height * frame / num_frames)\n    \n    # Set the location for the frame\n    cylinder.location = (x, y, z)\n    \n    # Insert keyframe for location\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = num_frames\n\n# Set the animation playback speed\nbpy.context.scene.render.fps = 24\n\n# Optional: Choose a view angle for the camera\nif \"Camera\" in bpy.data.objects:\n    camera = bpy.data.objects[\"Camera\"]\n    camera.location = (10, -10, 10)\n    camera.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Update the scene\nbpy.context.scene.update()\n\nprint(\"Spiral motion animation created.\")\n```\n\n### Explanation:\n- **Cylinder Creation**: The script first creates a cylinder using `bpy.ops.mesh.primitive_cylinder_add()`.\n- **Animation Setup**: We define the total number of frames for the animation, the spiral's radius, height, and the number of turns"
    },
    {
        "Text Input": "A plane rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a plane by 360 degrees, you'll first need to ensure you have a plane added to your Blender scene. The script below will rotate the plane around the Z-axis. This script can be run in Blender's scripting editor.\n\n```python\nimport bpy\n\n# Ensure you have the right object selected; let's assume it's named 'Plane'\nplane_name = \"Plane\"\nplane = bpy.data.objects.get(plane_name)\n\n# Check if the plane exists in the scene\nif plane is not None:\n    # Set the plane as the active object\n    bpy.context.view_layer.objects.active = plane\n    bpy.context.active_object.select_set(True)\n\n    # Insert a keyframe for the initial rotation\n    plane.rotation_euler = (0, 0, 0)\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n    # Rotate the plane 360 degrees (2*pi radians) around the Z-axis\n    plane.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n    print(\"Rotation keyframes for plane have been set from 0 to 360 degrees.\")\nelse:\n    print(f\"The object '{plane_name}' was not found in the scene. Please add a plane and ensure it is named correctly.\")\n```\n\n### Explanation:\n- This script checks for the existence of an object named \"Plane\" in the Blender scene.\n- It sets this plane as the active object and ensures it is selected.\n- It inserts a keyframe for the plane at frame 1 with no rotation (starting point).\n- Then, it rotates the plane to 360 degrees around the Z-axis (which translates to 2\u03c0 radians) and inserts another keyframe at frame 100.\n- Make sure the timeline is set to view frames 1 to 100 for better animation sequence visualization.\n\nBefore running the script, ensure the names and object types match your scene setup. Adjust the frame numbers if you want the animation to span a different duration."
    },
    {
        "Text Input": "A sphere bounces like a ball.",
        "Blender Script": "To create a simple animation of a sphere bouncing like a ball in Blender using Python scripting, we can use the Blender Python API to animate the location of a sphere along the z-axis (vertical axis). Here's a script that does this:\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Clear the current scene\nclear_scene()\n\n# Add a new UV Sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbpy.context.object.name = \"BouncingBall\"\nsphere = bpy.context.object\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 60\nbounce_height = 3\ngravity = 9.8\n\n# Insert keyframes for bouncing animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nframes_per_bounce = 20  # Total frames for one up and down bounce\n\nfor i in range(start_frame, end_frame, frames_per_bounce):\n    # Calculate the keyframe for the peak of the bounce\n    peak_frame = i + frames_per_bounce // 2\n    \n    # Set the location at start and peak of bounce\n    sphere.location.z = 1\n    sphere.keyframe_insert(data_path=\"location\", frame=i)\n    \n    sphere.location.z = bounce_height\n    sphere.keyframe_insert(data_path=\"location\", frame=peak_frame)\n    \n    # Simulate the effect of gravity going back to rest position\n    sphere.location.z = 1\n    sphere.keyframe_insert(data_path=\"location\", frame=i + frames_per_bounce)\n\n# Optionally, add some easing by setting keyframe interpolation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n        keyframe.easing = 'EASE_OUT'\n\nprint(\"Bouncing ball animation created successfully.\")\n```\n\n### Instructions to use the script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the script editor and paste the code above.\n3. Run the script by clicking on the \"Run Script\" button.\n\nThis script will add a UV sphere to the scene, then create keyframes to"
    },
    {
        "Text Input": "A sphere zooms in and out.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a simple animation of a sphere zooming in and out. This is accomplished by animating the scale of the sphere.\n\n```python\nimport bpy\n\ndef create_sphere():\n    bpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=1, location=(0, 0, 0))\n    return bpy.context.object\n\ndef create_zoom_animation(obj, start_frame, end_frame, min_scale, max_scale, loop_count):\n    frame_count = end_frame - start_frame\n    half_frame_count = frame_count // 2\n\n    # Calculate the total frames for looping\n    total_frames = frame_count * loop_count\n\n    for loop in range(loop_count):\n        loop_start = start_frame + loop * frame_count\n        loop_mid = loop_start + half_frame_count\n        loop_end = loop_start + frame_count\n\n        # Set keyframes for min and max scale\n        obj.scale = (min_scale, min_scale, min_scale)\n        obj.keyframe_insert(data_path=\"scale\", frame=loop_start)\n\n        obj.scale = (max_scale, max_scale, max_scale)\n        obj.keyframe_insert(data_path=\"scale\", frame=loop_mid)\n\n        obj.scale = (min_scale, min_scale, min_scale)\n        obj.keyframe_insert(data_path=\"scale\", frame=loop_end)\n\ndef main():\n    bpy.ops.object.select_all(action='DESELECT')  # Deselect all objects\n\n    # Create a sphere\n    sphere = create_sphere()\n\n    # Define animation parameters\n    start_frame = 1\n    end_frame = 60\n    min_scale = 0.5\n    max_scale = 2.0\n    loop_count = 5\n\n    # Create animation\n    create_zoom_animation(sphere, start_frame, end_frame, min_scale, max_scale, loop_count)\n\n    # Set end frame for the animation\n    bpy.context.scene.frame_end = end_frame * loop_count\n\nmain()\n```\n\n### Instructions to use the script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block, paste the script above, and click `Run Script`.\n3. This will add a UV Sphere to your scene and create an animation where the sphere scales from `min_scale` to `max_scale` and back to `min_scale` over `end_frame - start_frame` frames.\n"
    },
    {
        "Text Input": "A cylinder oscillates in a sine wave.",
        "Blender Script": "To create an oscillating cylinder in Blender using a sine wave, you can use the following Python script. This script animates a cylinder to move up and down based on a sine wave function.\n\n```python\nimport bpy\nimport math\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set cylinder's initial position\ncylinder.location = (0, 0, 0)\n\n# Set up the animation frame range\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the frequency and amplitude of the sine wave\nfrequency = 0.1\namplitude = 2.0\n\n# Animate the cylinder with a sine wave\nfor frame in range(start_frame, end_frame + 1):\n    # Current time in the animation\n    time = (frame - start_frame) / bpy.context.scene.render.fps\n    \n    # Calculate the sine wave value\n    z_position = amplitude * math.sin(2 * math.pi * frequency * time)\n    \n    # Move the cylinder\n    cylinder.location.z = z_position\n    \n    # Insert keyframe for the 'location'\n    cylinder.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Set the interpolation to make the motion smooth (optional)\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\nprint(\"Oscillating cylinder animation setup complete.\")\n```\n\n### How to use this script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text file and paste the above script into it.\n3. Run the script using the \"Run Script\" button.\n\n### Explanation:\n- **Object creation:** The script begins by deleting existing objects and creating a new cylinder at the origin.\n- **Animation setup:** The number of frames for the animation is specified, with a start and end frame.\n- **Sine wave calculation:** The cylinder's vertical position (`z` coordinate) is determined by a sine wave function, controlled by adjustable frequency and amplitude values.\n- **Key"
    },
    {
        "Text Input": "A cylinder jumps up and lands.",
        "Blender Script": "To create an animation in Blender where a cylinder jumps up and lands, you'll need to write a Python script using Blender's `bpy` library. This script will automate the creation of the cylinder, its animation, and basic keyframing.\n\nHere's a simple script to achieve that:\n\n```python\nimport bpy\n\n# Delete default cube\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects[\"Cube\"].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.object\ncylinder.name = \"JumpingCylinder\"\n\n# Set up the animation duration\nstart_frame = 1\njump_frame = 20\nend_frame = 40\n\n# Set the start keyframe (grounded position)\ncylinder.location.z = 1\ncylinder.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the jump keyframe (peak position)\ncylinder.location.z = 5\ncylinder.keyframe_insert(data_path=\"location\", frame=jump_frame)\n\n# Set the end keyframe (back to grounded position)\ncylinder.location.z = 1\ncylinder.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to make jump smoother\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Set up a basic timeline range and play settings\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Cylinder jump animation created successfully.\")\n```\n\nHere's a breakdown of what this script does:\n\n1. **Remove the Default Cube**: The script first checks for and deletes the default cube present in a new Blender scene.\n\n2. **Add a Cylinder**: It creates a cylinder with a defined radius and depth at a specific location.\n\n3. **Set Keyframes**:\n    - The initial position (on the ground) is set at frame 1.\n    - The cylinder \"jumps\" by changing its z-location and setting a new keyframe at frame 20.\n    - The cylinder lands back at its initial position at frame 40.\n\n4. **Smooth Animation**: Using Bezier interpolation for keyframes to create a natural jump motion.\n\n5. **Define Timeline**:"
    },
    {
        "Text Input": "A monkey oscillates in a sine wave.",
        "Blender Script": "To make a monkey (Suzanne, the built-in monkey mesh in Blender) oscillate in a sine wave motion, we can use a Blender Python script to animate the movement. Here's a script that creates Suzanne, sets up an animation where she moves in a sine wave pattern on the Z-axis over time, and plays back the animation.\n\n```python\nimport bpy\nimport math\n\n# Create a new monkey\nbpy.ops.object.select_all(action='DESELECT')  # Deselect all objects\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0.0, 0.0, 0.0))\nsuzanne = bpy.context.object\nsuzanne.name = \"OscillatingMonkey\"\n\n# Set the frame range\nframe_start = 0\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set up sine wave animation for Z location\nfrequency = 2  # Number of complete oscillations in the duration\namplitude = 2  # The height of the wave\n\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the Z position using a sine wave\n    z_position = amplitude * math.sin(2 * math.pi * frequency * (frame / frame_end))\n    suzanne.location.z = z_position\n\n    # Set keyframe for Z location\n    suzanne.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Make sure all frames are selected for the animation\nbpy.ops.screen.frame_jump(end=False)\n\n# Set the scene to loop the animation playback\nbpy.context.scene.render.fps = 24  # Frames per second\n\n# Ensure the timeline is on the start frame\nbpy.context.scene.frame_current = frame_start\n\nprint(\"Sine wave animation script completed.\")\n```\n\n### How to use the script:\n\n1. **Open Blender.**\n2. **Switch to the Scripting workspace** (top of the screen).\n3. **Create a new text block** and paste the provided code into it.\n4. **Click \"Run Script\"** to execute the script.\n5. **Switch to the \"Layout\" workspace** to see the animation in action.\n6. You can press the 'Play' button on the timeline to watch Suzanne oscillate in a sine wave motion.\n\n### Explanation:\n\n- **Suzanne's movement**"
    },
    {
        "Text Input": "A sphere rotates 360 degrees.",
        "Blender Script": "Below is a simple Blender Python script that creates a sphere and animates it to rotate 360 degrees around the Z-axis:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the current active object (the sphere)\nsphere = bpy.context.active_object\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 120  # You can adjust this for different speeds of rotation\n\n# Set the initial keyframe\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the final keyframe (360 degrees rotation on the Z-axis)\nsphere.rotation_euler = (0, 0, 2 * 3.14159265)  # 2 * pi radian = 360 degrees\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set up the animation playback parameters\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Sphere animation setup complete.\")\n```\n\n### Instructions:\n\n1. **Run the Script in Blender**: Open Blender and switch to the \"Scripting\" workspace. Create a new text block and paste this script into it.\n\n2. **Execute the Script**: Run the script using the \"Run Script\" button or press `Alt + P` while in the text editor.\n\n3. **Review the Animation**: Switch to the \"Layout\" workspace and play the animation using `Spacebar` or by clicking the play button in the timeline.\n\nThis script first clears the scene of any existing objects, adds a new sphere, and sets it to rotate around the Z-axis from 0 to 360 degrees over 120 frames (you can adjust this as needed for speed)."
    },
    {
        "Text Input": "A cylinder rotates 360 degrees.",
        "Blender Script": "Here is a simple Blender Python script that animates a cylinder rotating 360 degrees around the Z-axis over 100 frames. This script assumes you are using Blender's scripting environment:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2)\ncylinder = bpy.context.object\n\n# Set the initial rotation keyframe\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set the final rotation keyframe (360 degrees = 2 * pi radians)\ncylinder.rotation_euler = (0, 0, 2 * 3.14159)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set the playback range to see the full animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\nprint(\"Cylinder rotation setup complete!\")\n```\n\n### Explanation:\n- The script first deletes any existing mesh objects in the scene to start with a clean slate.\n- A new cylinder mesh is created using `bpy.ops.mesh.primitive_cylinder_add()`.\n- Keyframes are inserted at frame 1 and frame 100 to animate the cylinder rotating 360 degrees (converted to radians as `2 * pi`) along the Z-axis.\n- The playback frame range is set from 1 to 100 frames so you can see the animation from start to finish when you press Play.\n\nYou can adjust the number of frames or the axis of rotation if you need a different setup."
    },
    {
        "Text Input": "A cone orbits around another object.",
        "Blender Script": "To create a scene in Blender where a cone orbits around another object, let's assume the other object is a sphere, you can use the following Python script. This will leverage Blender's scripting capabilities to automate the creation and animation process.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a sphere at the center\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_object = bpy.context.active_object\ncentral_object.name = \"Central Sphere\"\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1.5, location=(2, 0, 0))\norbiting_cone = bpy.context.active_object\norbiting_cone.name = \"Orbiting Cone\"\n\n# Create an empty object at the center to serve as pivot point for the cone's orbit\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\npivot = bpy.context.active_object\npivot.name = \"Pivot Point\"\n\n# Parent the cone to the pivot\norbiting_cone.parent = pivot\n\n# Set animation duration and frame rate\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Animate the rotation of the pivot object to make the cone orbit around the sphere\npivot.rotation_euler = (0, 0, 0)\npivot.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\npivot.rotation_euler = (0, 0, 2 * math.pi)\npivot.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation to linear for smooth continuous rotation\nfor fcurve in pivot.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Add material to central sphere for visibility\nmaterial_sphere = bpy.data.materials.new(name=\"SphereMaterial\")\nmaterial_sphere.diffuse_color = (0.0, 1.0, 0.0, 1.0)  # Green\ncentral_object.data.materials.append(material_sphere)\n\n# Add material to"
    },
    {
        "Text Input": "A sphere moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that moves a sphere in a spiral motion, we can animate the sphere using keyframes and a mathematical function to define a spiral path. Here's a basic script using Blender's API:\n\n```python\nimport bpy\nimport math\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set the total number of frames for the animation\ntotal_frames = 250\n\n# Define the parameters of the spiral\na = 0.1  # Spiral coefficient (controls the distance between loops)\nb = 0.15  # Height increment per loop\nturns = 4  # Number of spiral turns\n\n# Clear existing keyframes\nsphere.animation_data_clear()\n\n# Animate sphere in a spiral path\nfor frame in range(total_frames + 1):\n    # Calculate angle in radians\n    angle = 2 * math.pi * turns * (frame / total_frames)\n    \n    # Calculate the position using a spiral equation\n    x = a * angle * math.cos(angle)\n    y = a * angle * math.sin(angle)\n    z = b * angle\n    \n    # Set the location of the sphere\n    sphere.location = (x, y, z)\n    \n    # Insert keyframe for the current frame\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the frames per second to make movement smooth\nbpy.context.scene.render.fps = 24\n\n# Adjust the timeline end frame\nbpy.context.scene.frame_end = total_frames\n\nprint(\"Spiral animation created for the sphere.\")\n```\n\n### Explanation\n\n- **Sphere Creation**: We use `bpy.ops.mesh.primitive_uv_sphere_add` to create a UV sphere at the origin.\n\n- **Parameters**:\n  - `a`: This controls the spacing between spiral loops. You can adjust it to make the spiral tighter or looser.\n  - `b`: This controls the rise of the spiral along the Z-axis. Increase it for more vertical movement per turn.\n  - `turns`: Set the number of complete turns in the spiral.\n\n- **Animation Loop**: We loop through each frame and calculate the spiral position using parametric equations for a spiral (`x = a * angle * cos(angle)`, `y = a * angle * sin(angle"
    },
    {
        "Text Input": "A torus jumps up and lands.",
        "Blender Script": "To create an animation of a torus \"jumping\" up and landing in Blender using Python scripting, you can use the Blender API. Here's a basic script to achieve this effect:\n\n```python\nimport bpy\nfrom math import radians\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Set up the animation parameters\nframe_start = 1\nframe_middle = 20\nframe_end = 40\njump_height = 3\n\n# Set initial keyframe (resting on the ground)\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Set middle keyframe (jumping up)\ntorus.location = (0, 0, jump_height)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_middle)\n\n# Set final keyframe (landing back on the ground)\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Optional: Add some rotation during the jump\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ntorus.rotation_euler = (radians(360), 0, 0)  # Rotate 360 degrees around X axis\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_middle)\n\ntorus.rotation_euler = (radians(720), 0, 0)  # Rotate 360 degrees again to make a full loop\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set playback range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set the scene to frame_start\nbpy.context.scene.frame_set(frame_start)\n\n```\n\nThis script performs the following operations:\n- Deletes all existing objects in the scene to start fresh.\n- Creates a new torus at the origin.\n- Sets three keyframes for the jumping animation:\n  - Frame 1: The torus starts on the ground (z"
    },
    {
        "Text Input": "A sphere jumps up and lands.",
        "Blender Script": "Certainly! To create an animation of a sphere jumping up and landing in Blender using Python scripting, you can use the following script. This script assumes you're using Blender with its Python API (bpy). Before running the script, make sure you have a basic understanding of Blender's interface and how to execute scripts within its Text Editor.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set the total frame count\ntotal_frames = 60\nbpy.context.scene.frame_end = total_frames\n\n# Define keyframes for the jumping animation\n# Start on the ground\nsphere.location = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=1)\n\n# Jump peak\nsphere.location = (0, 0, 5)\nsphere.keyframe_insert(data_path=\"location\", frame=total_frames / 2)\n\n# Back to the ground\nsphere.location = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=total_frames)\n\n# Add some rotation for a more realistic effect\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\nsphere.rotation_euler = (0, 0, math.pi)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames / 2)\n\nsphere.rotation_euler = (0, 0, 2 * math.pi)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\n# Set interpolation to linear for a smoother jump\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optionally, add a shadow catcher plane\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Run the animation\nbpy.context.scene.frame_set(1)\n```\n\n### Instructions to Use the Script:\n\n1. Open Blender and ensure you are in the \"Default\" workspace,"
    },
    {
        "Text Input": "A torus zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a torus zoom in and out, you can animate the scale of the torus object. Below is a script that adds a torus to the scene and applies a looping animation to it using keyframes.\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), major_segments=48, minor_segments=12)\ntorus = bpy.context.object\n\n# Set the total number of frames for the animation\ntotal_frames = 100\nbpy.context.scene.frame_end = total_frames\n\n# Keyframe settings\nzoom_in_scale = (1, 1, 1)\nzoom_out_scale = (2, 2, 2)\n\n# Insert keyframes for the torus scale\ntorus.scale = zoom_in_scale\ntorus.keyframe_insert(data_path=\"scale\", frame=1)\n\ntorus.scale = zoom_out_scale\ntorus.keyframe_insert(data_path=\"scale\", frame=total_frames / 2)\n\ntorus.scale = zoom_in_scale\ntorus.keyframe_insert(data_path=\"scale\", frame=total_frames)\n\n# Set interpolation to 'Linear' for smooth scaling\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Ensure repeatable animation\ntorus.animation_data.action.fcurves[0].modifiers.new(type='CYCLES')\ntorus.animation_data.action.fcurves[1].modifiers.new(type='CYCLES')\ntorus.animation_data.action.fcurves[2].modifiers.new(type='CYCLES')\n```\n\n### Explanation\n\n1. **Clear Scene:** The script starts by clearing any existing objects in the scene to ensure a clean workspace.\n\n2. **Add Torus:** A torus is added at the origin of the world (`location=(0, 0, 0)`) to be our animated object.\n\n3. **Animation Settings:** We define a total of 100 frames for a complete cycle (zoom in and zoom out).\n\n4. **Keyframing:**\n   - The torus starts at a normal size `(1, 1, 1)` at frame 1.\n   -"
    },
    {
        "Text Input": "A sphere flips upside down.",
        "Blender Script": "To create an animation in Blender where a sphere flips upside down, you can use the following Python script. This script will create a sphere, set up the animation for a 180-degree rotation, and allow you to run the script inside Blender to see the result.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = 'FlippingSphere'\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 30\n\n# Initial rotation at frame 1\nbpy.context.scene.frame_set(1)\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Final rotation at frame 30 (flip upside down)\nbpy.context.scene.frame_set(30)\nsphere.rotation_euler = (3.14159, 0, 0)  # Rotate 180 degrees around the x-axis\nsphere.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set interpolation to linear for consistent flipping motion\nfor fc in sphere.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Sphere animation setup complete.\")\n```\n\n### Instructions:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script above into it.\n3. Run the script by clicking on the \"Run Script\" button in the Blender text editor.\n4. Play the animation using the animation controls to see the sphere flip upside down.\n\nThis script initializes a UV sphere at the center of the scene, sets up a keyframe animation spanning 30 frames, and rotates the sphere 180 degrees on the x-axis. The interpolation is set to linear to ensure the motion appears smooth and consistent."
    },
    {
        "Text Input": "A sphere jumps up and lands.",
        "Blender Script": "To create a simple animation of a sphere jumping up and landing in Blender using Python, you will need to use Blender's scripting capabilities. Here's a script that achieves this:\n\n```python\nimport bpy\n\ndef create_sphere():\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\n    sphere = bpy.context.active_object\n    return sphere\n\ndef configure_scene():\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 50\n    bpy.context.scene.render.fps = 24\n\ndef animate_sphere(sphere):\n    # Set initial keyframe at frame 1\n    sphere.location = (0, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Jump up to frame 15\n    sphere.location = (0, 0, 5)\n    sphere.keyframe_insert(data_path=\"location\", frame=15)\n\n    # Land at frame 30\n    sphere.location = (0, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=30)\n\n    # Add a small bounce at frame 40\n    sphere.location = (0, 0, 2)\n    sphere.keyframe_insert(data_path=\"location\", frame=40)\n\n    # Return to ground at frame 50\n    sphere.location = (0, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=50)\n\ndef main():\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Delete all existing objects\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    configure_scene()\n    sphere = create_sphere()\n    animate_sphere(sphere)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n\n1. **Open Blender**: Make sure you're using a version that supports the Python API used in this script (Blender 2.8 or later).\n2. **Scripting Tab**: Go to the Scripting tab in Blender.\n3. **New Script**: Copy and paste the script above into the text editor within Blender.\n4. **Run Script**: Click on \"Run Script\" to execute the script.\n5. **Play Animation**: Switch to the Animation tab or Timeline and press `Spacebar` to play the animation.\n\n### Explanation:\n\n- **create_s"
    },
    {
        "Text Input": "A sphere slides from top to bottom.",
        "Blender Script": "Here's a basic Blender Python script to create an animation where a sphere slides from the top to bottom of a plane. This script sets up the scene, creates a sphere and a plane, and animates the sphere sliding down over a specified duration.\n\n```python\nimport bpy\n\ndef create_scene():\n    # Delete default objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n    # Add a plane\n    bpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, 0))\n    plane = bpy.context.object\n    plane.name = \"GroundPlane\"\n\n    # Add a sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 3))\n    sphere = bpy.context.object\n    sphere.name = \"SlidingSphere\"\n\n    # Set up animation for the sphere\n    start_frame = 1\n    end_frame = 100\n    slide_distance = -4  # Sphere slides down in the Z-axis\n\n    # Set location keyframes\n    sphere.location = (0, 0, 3)\n    sphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n    sphere.location = (0, 0, slide_distance)\n    sphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n    # Add gravity for more realistic slide (optional)\n    bpy.context.scene.rigidbody_world.enabled = True\n    bpy.context.scene.rigidbody_world.point_cache.frame_start = start_frame\n    bpy.context.scene.rigidbody_world.point_cache.frame_end = end_frame\n\n    # Set rigid body to objects\n    bpy.ops.rigidbody.object_add()\n    sphere.rigid_body.type = 'ACTIVE'\n    sphere.rigid_body.mass = 1\n    sphere.rigid_body.friction = 0.5\n\n    # Set plane as passive object\n    bpy.ops.object.select_all(action='DESELECT')\n    plane.select_set(True)\n    bpy.context.view_layer.objects.active = plane\n    bpy.ops.rigidbody.object_add()\n    plane.rigid_body.type = 'PASSIVE'\n    plane.rigid_body.friction = 0.5\n\nif __name__ == \"__main__\":\n    create_scene()\n```\n\n### How to Use the Script:\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text file in the text editor area.\n3. Copy the script above into the text editor.\n4. Click `"
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cube orbits around another object, we'll simulate an orbital motion by rotating the cube around a central object (e.g., a sphere) using keyframes for animation. Below is a script that sets up this scenario:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a central sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_sphere = bpy.context.active_object\ncentral_sphere.name = \"CentralSphere\"\n\n# Create a cube\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(2, 0, 0))\norbit_cube = bpy.context.active_object\norbit_cube.name = \"OrbitCube\"\n\n# Set up the orbital animation using keyframes\n\n# Define the number of frames for one full orbit\nframes_per_orbit = 120\nbpy.context.scene.frame_end = frames_per_orbit\n\nfor frame in range(frames_per_orbit + 1):\n    # Calculate the angle for this frame\n    angle = (2 * math.pi * frame) / frames_per_orbit\n    \n    # Position the cube in orbit around the central object\n    x = 2 * math.cos(angle)\n    y = 2 * math.sin(angle)\n    z = 0  # Keep it in the XY plane\n\n    # Set the cube's location\n    orbit_cube.location = (x, y, z)\n    \n    # Insert keyframe for the location\n    orbit_cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Optionally, you may want to adjust the scene to see the animation better\n# Set the viewport shading to rendered mode\nbpy.context.space_data.shading.type = 'MATERIAL'\n\n# Add a camera and position it\nbpy.ops.object.camera_add(location=(5, -5, 5))\ncamera = bpy.context.active_object\ncamera.name = \"Camera\"\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n\n# Add a light source\nbpy.ops.object.light_add(type='POINT', location=(5, 5, 5))\nlight = bpy.context.active_object\nlight.name = \"LightSource\"\n\nprint(\"Script execution completed. The"
    },
    {
        "Text Input": "A cube oscillates in a sine wave.",
        "Blender Script": "To create a script in Blender where a cube oscillates in a sine wave motion, you'll need to use Python scripting to animate its movement over time. Here's how you can achieve that:\n\n1. Create a cube in your Blender scene.\n2. Write a script that uses Blender's animation system to adjust the location of the cube over time following a sine wave pattern.\n\nBelow is a sample script that demonstrates these steps:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 250\nframe_rate = 24  # Assuming a frame rate of 24 frames per second\n\n# Define amplitude and frequency of the sine wave\namplitude = 2\nfrequency = 1\n\n# Insert keyframes for the cube to oscillate in a sine wave\nfor frame in range(total_frames):\n    # Calculate the sine wave position\n    time = frame / frame_rate\n    x_position = amplitude * math.sin(2 * math.pi * frequency * time)\n    \n    # Set the cube's location at this frame\n    cube.location.x = x_position\n    \n    # Insert a keyframe for the cube's location on this frame\n    cube.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Make sure to set the correct frame range for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\nprint(\"Animation created with a cube oscillating in a sine wave.\")\n\n```\n\n### Explanation:\n- **Delete Existing Objects**: Clears the scene to start fresh by removing all existing objects.\n- **Add Cube**: A cube is added to the scene.\n- **Define Animation Parameters**: You can adjust the `total_frames`, `frame_rate`, `amplitude`, and `frequency` to change the length and speed of the sine wave.\n- **Animate Cube**: For each frame, calculate the position of the cube using the sine function and insert keyframes to record this position. The x-location of the cube follows `amplitude * sin(2 * pi * frequency * time)`.\n- **Set Frame Range**: Adjust the scene's frame range"
    },
    {
        "Text Input": "A plane moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a plane moving in a circular path, you'll want to use Blender's Python API to define the animation. Here's a simple script that sets up such an animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a plane\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set the number of frames and the radius of the circle\nframes = 100\nradius = 5\n\n# Set the animation duration\nbpy.context.scene.frame_end = frames\n\n# Animate the plane to move in a circle\nfor frame in range(frames):\n    # Calculate angle in radians\n    angle = (2 * math.pi * frame) / frames\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    \n    # Set the plane location\n    plane.location = (x, y, 0)\n    \n    # Insert a keyframe for the location\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the current frame to the start\nbpy.context.scene.frame_set(0)\n\nprint(\"Animation setup complete.\")\n```\n\nTo use this script in Blender:\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text file.\n3. Copy and paste the script into the text editor.\n4. Click the \"Run Script\" button.\n\nThis script creates a plane and animates it to move in a circular path with a specified radius. The animation lasts for a defined number of frames. The plane's position is updated on each frame to follow a circular trajectory using trigonometric functions."
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "To create a Blender Python script where a sphere orbits around another object, follow these steps. In this script, we'll create both objects in the scene and animate the sphere to orbit around a central object, such as a cube.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create central object (Cube)\nbpy.ops.mesh.primitive_cube_add()\ncentral_object = bpy.context.active_object\ncentral_object.name = 'CentralCube'\n\n# Create orbiting sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(3, 0, 0))\norbiting_sphere = bpy.context.active_object\norbiting_sphere.name = 'OrbitingSphere'\n\n# Add animation to make the sphere orbit around the central cube\nframe_start = 1\nframe_end = 250\n\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nfor i in range(frame_start, frame_end + 1):\n    # Calculate the angle for each frame\n    angle = 2 * math.pi * (i - frame_start) / (frame_end - frame_start)\n\n    # Update the location based on the angle\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    \n    # Set the location of the sphere\n    orbiting_sphere.location = (x, y, 0)\n\n    # Insert keyframe\n    orbiting_sphere.keyframe_insert(data_path=\"location\", frame=i)\n\nprint(\"Sphere orbit animation created successfully.\")\n```\n\n### Explanation\n- **Scene Preparation**: Clears all objects from the scene to start fresh.\n- **Create Central Object**: A cube is added as the central object around which the sphere will orbit.\n- **Create Sphere**: A sphere is added at a specified distance from the cube.\n- **Animation**: The sphere is animated to move in a circular orbit around the cube. For this, a full orbit is calculated using trigonometric functions to position the sphere at new coordinates for each frame.\n- **Keyframe Insertion**: The location of the sphere is keyframed at each iteration to animate its movement over specified frames.\n\nYou can run this script in Blender's scripting editor to see the sphere orbit around the cube. Adjust the configuration such as radius, frame range,"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "To create an animation in Blender where a torus expands and shrinks, you can use the following Python script. This script uses Blender's built-in functionalities to create a torus mesh and animate its scale over time.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\n\n# Get reference to the torus object\ntorus = bpy.context.active_object\n\n# Set total number of frames\ntotal_frames = 120\n\n# Set frame rate (optional, to make sure the playback speed is correct)\nbpy.context.scene.render.fps = 24\n\n# Set scaling keyframes\nfor i in range(0, total_frames, 10):\n    bpy.context.scene.frame_set(i)\n    scale_factor = 1 + 0.5 * (i % 20) / 10.0 if (i // 10 % 2) == 0 else 1.5 - 0.5 * (i % 20) / 10.0\n    torus.scale = (scale_factor, scale_factor, scale_factor)\n    torus.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Add interpolation type\nfor fcu in torus.animation_data.action.fcurves:\n    for keyframe in fcu.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\n# Set the timeline range to our animation length\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\nprint(\"Torus expanding and shrinking animation created.\")\n```\n\n### Instructions for Use\n\n1. **Open Blender**: Make sure you have Blender installed. Open the Blender application.\n\n2. **Script Editor**: Switch to the Scripting workspace or open a new script editor.\n\n3. **Paste Script**: Paste the provided Python script into the script editor.\n\n4. **Run the Script**: Click on the \"Run Script\" button to execute the code. This will create and animate a torus within the Blender scene.\n\n5. **Play Animation**: The script sets the animation to play automatically, but you can also use the \"Play\""
    },
    {
        "Text Input": "A monkey scales up and down.",
        "Blender Script": "To create a Blender Python script where a monkey (Suzanne, the Blender monkey mesh) scales up and down, you can use Blender's bpy module to animate the scaling of the monkey object. This script will add the monkey mesh to the scene and create a keyframe animation that smoothly scales the monkey up and down over time.\n\nHere's a step-by-step script to achieve this in Blender:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=1.0, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Define scale keyframes\nscaling_keyframes = {\n    1: (1.0, 1.0, 1.0),   # Start at normal scale\n    15: (2.0, 2.0, 2.0),  # Scale up by frame 15\n    30: (1.0, 1.0, 1.0),  # Return to normal scale by frame 30\n    45: (0.5, 0.5, 0.5),  # Scale down by frame 45\n    60: (1.0, 1.0, 1.0)   # Return to normal scale at the end\n}\n\n# Insert keyframes for scaling\nfor frame, scale in scaling_keyframes.items():\n    bpy.context.scene.frame_set(frame)\n    monkey.scale = scale\n    monkey.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the current frame back to the start\nbpy.context.scene.frame_set(1)\n\n# Optional: Set animation playback to repeat\nbpy.context.scene.render.fps = 24\nbpy.context.scene.render.fps_base = 1.0\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\nbpy.context.scene.render.ffmpeg.codec = 'H264'\nbpy.context.scene.render.ffmpeg.constant_rate_factor = 'HIGH'\n\n# Play the animation\nbpy"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a script in Blender that rotates a monkey mesh (Suzanne) on the X-axis, follow these steps. The script will add the monkey mesh to the scene and then apply a rotation animation to it.\n\nHere's the complete Blender Python script:\n\n```python\nimport bpy\n\n# Remove all objects from the current scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey mesh (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set initial keyframe for rotation on X-axis\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\n# Rotate the monkey 360 degrees on the X-axis over 120 frames\nmonkey.rotation_euler = (2 * 3.14159, 0, 0)  # 360 degrees in radians\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=120, index=0)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = 120\n\n# Set interpolation to linear for constant rotation\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n```\n\nInstructions for running the script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block and paste the above script.\n3. Click on the \"Run Script\" button to execute the script.\n\nThis script performs the following actions:\n- Clears the existing scene.\n- Adds a monkey mesh (Suzanne) to the scene.\n- Sets keyframes for the monkey to rotate 360 degrees around the X-axis over 120 frames.\n- Adjusts the animation to use linear interpolation to ensure a smooth and constant rotation speed.\n\nAfter running the script, the monkey should rotate smoothly around the X-axis in the 3D viewport animation timeline. Adjust the `frame=120` to modify the duration of the animation if needed."
    },
    {
        "Text Input": "A cube moves in a circular path.",
        "Blender Script": "Below is a Blender Python script that animates a cube moving in a circular path. This script assumes you have Blender installed and ready to run Python scripts. To execute this script, open Blender, switch to the \"Scripting\" workspace, and copy-paste this script into a new text block, then click \"Run Script\".\n\n```python\nimport bpy\nimport math\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(location=(1.0, 0.0, 0.0))\ncube = bpy.context.active_object\n\n# Set up the scene\nscene = bpy.context.scene\n\n# Set the total number of frames\nscene.frame_end = 250  # Adjust this for a longer/shorter animation\n\n# Parameters for the circular motion\nradius = 3\ncenter_x = 0\ncenter_y = 0\ncenter_z = 0\n\n# Animate the cube to move in a circular path\nfor frame in range(scene.frame_start, scene.frame_end + 1):\n    # Calculate angle for the current frame\n    angle = (frame / scene.frame_end) * 2 * math.pi  # Full circle\n\n    # Calculate new position in the circular path\n    x = center_x + radius * math.cos(angle)\n    y = center_y + radius * math.sin(angle)\n    z = center_z\n    \n    # Set new location\n    cube.location = (x, y, z)\n\n    # Insert keyframe for the cube's location\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Let's make the movement smoother\n# Go to the graph editor and change all keyframes to 'linear' interpolation\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Circular path animation created.\")\n```\n\n### Explanation:\n\n1. **Clear Existing Objects**: The script begins by deleting any existing objects in the scene to start with a clean slate.\n   \n2. **Create a Cube**: A new cube object is added to the scene.\n\n3. **Set Animation Parameters**:\n   - The total animation length is set to 250 frames, which you can adjust to suit your needs.\n   - Parameters like `radius` determine the size of the circular"
    },
    {
        "Text Input": "A cube spins and scales up.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cube, and animates it to spin and scale up over time.\n\n```python\nimport bpy\n\n# Delete the default cube\nbpy.ops.object.select_all(action='DESELECT')\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects[\"Cube\"].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the initial frame\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Animate Rotation\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=0)\n\ncube.rotation_euler = (0, 0, 3.14159 * 2)  # 360 degrees rotation in radians\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Animate Scale\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=0)\n\ncube.scale = (2, 2, 2)  # Scales up by a factor of 2\ncube.keyframe_insert(data_path=\"scale\", frame=100)\n\n# Set interpolation to linear to keep the spinning and scaling constant\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete. The cube will spin and scale up.\")\n```\n\n### Instructions:\n\n1. Open Blender.\n2. Switch to \"Scripting\" workspace or open the text editor in an existing workspace.\n3. Create a new text file and paste the script into the text editor.\n4. Click the \"Run Script\" button to execute the script.\n\n### Explanation:\n\n- The script starts by deleting the default cube, then creates a new cube at the center of the scene.\n- It sets the animation frames from 0 to 100.\n- It animates the cube\u2019s rotation from 0 to 360 degrees (in radians) over 100 frames.\n- The cube's scale is animated from 1 to 2 over the same frame range.\n- Interpolation for the animation is set to linear, ensuring smooth motion.\n\nYou can adjust the `frame_end"
    },
    {
        "Text Input": "A sphere oscillates in a sine wave.",
        "Blender Script": "To create an animation in Blender where a sphere oscillates in a sine wave, you can use Python scripting to automate the creation of keyframes that follow a sine function. Below is a script that achieves this in Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"SineWaveSphere\"\n\n# Define parameters for the sine wave\nnum_frames = 250\namplitude = 2\nfrequency = 0.1\n\n# Set frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = num_frames\n\n# Animate the sphere using a sine function for the z-axis\nfor frame in range(1, num_frames + 1):\n    t = frame / num_frames * (2 * math.pi)  # Normalize time\n    # Set new location (we'll oscillate it on the Z-axis)\n    z_location = amplitude * math.sin(frequency * t)\n\n    # Apply the new location\n    sphere.location = (0, 0, z_location)\n\n    # Insert a keyframe for the location\n    sphere.keyframe_insert(data_path=\"location\", index=-1, frame=frame)\n\n# Play the animation\nbpy.context.scene.frame_set(bpy.context.scene.frame_start)\nbpy.ops.screen.animation_play()\n```\n\n### How to Use This Script:\n1. Open Blender and switch to the Scripting tab.\n2. Create a new text block and paste the script above.\n3. Run the script by clicking the \"Run Script\" button.\n\n### What This Script Does:\n- First, it clears the scene of any existing mesh objects to ensure a clean slate.\n- It then creates a new UV sphere at the origin.\n- It defines parameters for the sine wave such as amplitude and frequency.\n- The script iterates over a number of frames, calculates the position of the sphere on the z-axis using the sine function, and inserts keyframes at each frame.\n- Finally, it sets the animation to play over the specified frame range.\n\nYou can modify the `amplitude`, `frequency`, and `num_frames` variables to"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that creates an animation of a cube expanding and shrinking.\n\n```python\nimport bpy\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set the total frame range for the animation\ntotal_frames = 100\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\n# Define scale keyframes\n# Start small\ncube.scale = (0.5, 0.5, 0.5)\ncube.keyframe_insert(data_path=\"scale\", frame=0)\n\n# Expand\ncube.scale = (2.0, 2.0, 2.0)\ncube.keyframe_insert(data_path=\"scale\", frame=25)\n\n# Shrink back\ncube.scale = (1.0, 1.0, 1.0)\ncube.keyframe_insert(data_path=\"scale\", frame=50)\n\n# Expand again\ncube.scale = (2.0, 2.0, 2.0)\ncube.keyframe_insert(data_path=\"scale\", frame=75)\n\n# Back to original small\ncube.scale = (0.5, 0.5, 0.5)\ncube.keyframe_insert(data_path=\"scale\", frame=total_frames)\n\n# Set the playback to loop\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\nbpy.context.scene.render.fps = 24  # Optional: you can set the frames per second for the animation\n\n# Ensure the view is set to the first frame\nbpy.context.scene.frame_set(0)\n```\n\n### Instructions\n\n1. **Open Blender** and switch to the Scripting layout.\n2. Create a new text block in the text editor, copy the above script, and paste it.\n3. Press `Run Script` to execute the script.\n4. Play the animation in the timeline to see the cube expanding and shrinking.\n\n### Explanation\n\n- A cube is created in the scene.\n- The script sets keyframes at specific intervals: the cube starts small, expands, shrinks, expands again, and then returns to its starting size.\n- The total animation runs over 100 frames, and keyframes for scale changes are set at frames 0, 25, 50, 75, and 100 to create"
    },
    {
        "Text Input": "A plane moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a plane moving in a spiral motion, we'll follow these steps:\n\n1. Create a new plane object.\n2. Set up a spiral path using mathematical equations.\n3. Animate the plane to follow the spiral path.\n\nHere's a script to accomplish that:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"SpiralPlane\"\n\n# Define a number of frames for the animation\nframe_count = 250\n\n# Start and end frames for the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frame_count\n\n# Animation data\nradius_increment = 0.1  # How much the radius increases per turn\nheight_increment = 0.02  # How much the height increases per turn\nturns = 3  # Number of turns in the spiral\n\n# Keyframe the plane's motion\nfor frame in range(frame_count):\n    # Calculate theta for the current frame\n    theta = (2 * math.pi * turns) * (frame / frame_count)\n\n    # Calculate the current position in the spiral\n    radius = radius_increment * theta\n    x = radius * math.cos(theta)\n    y = radius * math.sin(theta)\n    z = height_increment * theta\n\n    # Set the plane's location\n    plane.location = (x, y, z)\n\n    # Insert a keyframe for the current frame\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n    # Optionally, you can add a rotation to the plane to make it face the direction of motion\n    # Note: For more correct facing, we would calculate the derivative, but this is simplified.\n    plane.rotation_euler[2] = theta\n    plane.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n\n# Adjust the view to see the animation\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(8, -8, 8))\ncamera = bpy.context.active_object\ncamera.select_set(True)\nbpy.context.view_layer.objects.active = camera\n\nbpy.ops"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "Below is a Blender Python script that creates a torus and animates it to expand and shrink over time using shape keys. This script is designed to be executed in Blender.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Add a shape key for the basis (default shape)\ntorus.shape_key_add(name=\"Basis\")\n\n# Add an expansion shape key\nexpand_key = torus.shape_key_add(name=\"Expand\")\nbpy.context.object.data.shape_keys.key_blocks[\"Expand\"].value = 1.0\n\n# Enter edit mode to modify the vertices for the \"Expand\" shape key\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.5, 1.5, 1.5))  # Adjust this value to expand more or less\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Access the shape key block\nexpand_key_block = torus.data.shape_keys.key_blocks[\"Expand\"]\n\n# Insert keyframes for animation at frame 1 (small) and frame 50 (expanded)\nexpand_key_block.value = 0.0\nexpand_key_block.keyframe_insert(data_path=\"value\", frame=1)\n\nexpand_key_block.value = 1.0\nexpand_key_block.keyframe_insert(data_path=\"value\", frame=50)\n\n# Then shrink back at frame 100\nexpand_key_block.value = 0.0\nexpand_key_block.keyframe_insert(data_path=\"value\", frame=100)\n\n# Set the end frame of the animation for looping\nbpy.context.scene.frame_end = 100\n\n# Select the graph editor and adjust the interpolation to make the animation smoother\nfor fcurve in torus.data.shape_keys.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\nprint(\"Torus expansion and shrinking animation created.\")\n```\n\n### Instructions:\n1. Open Blender, switch to the scripting workspace.\n2. Paste this script into the text editor and run it.\n3. You will see a torus object at the origin.\n4. Press `Spacebar` or click `Play` in the"
    },
    {
        "Text Input": "A sphere flips upside down.",
        "Blender Script": "To create an animation in Blender where a sphere flips upside down, you can use the following Python script. This script will set up a scene with a sphere, and then animate it to flip over 180 degrees around the X-axis.\n\nHere's a step-by-step script:\n\n```python\nimport bpy\nimport math\n\ndef clear_scene():\n    # Deselect all objects\n    bpy.ops.object.select_all(action='DESELECT')\n\n    # Select and delete all mesh objects\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\ndef create_sphere():\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    sphere = bpy.context.active_object\n    return sphere\n\ndef animate_flip(sphere, frame_start, frame_end):\n    # Set initial keyframe for rotation\n    sphere.rotation_euler = (0, 0, 0)\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n    # Set end keyframe for flip rotation (180 degrees, in radians)\n    sphere.rotation_euler = (math.pi, 0, 0)\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\ndef main():\n    clear_scene()\n    \n    # Create a UV sphere\n    sphere = create_sphere()\n    \n    # Set the frame range for the animation\n    frame_start = 1\n    frame_end = 40\n    \n    # Animate the sphere to flip\n    animate_flip(sphere, frame_start, frame_end)\n\n    # Set the scene's frame range\n    bpy.context.scene.frame_start = frame_start\n    bpy.context.scene.frame_end = frame_end\n\n# Execute the script\nmain()\n```\n\n### Instructions:\n\n1. **Open Blender** and go to the \"Scripting\" workspace.\n2. **Create a New Script** and paste the code above.\n3. **Run the Script** by clicking the \"Run Script\" button.\n\nThis script will:\n\n- Clear the scene of any existing mesh objects.\n- Add a UV sphere to the center of the scene.\n- Set up keyframes to animate the sphere flipping 180 degrees around the X-axis from the start frame (1) to the end frame (40).\n- Adjust the scene settings to reflect the new frame range.\n\nYou can adjust `frame_start` and `frame_end` to control the speed of the flip. The `"
    },
    {
        "Text Input": "A cube rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a cube rotate on the X-axis, you can use the following code. This script sets up a basic scene where a cube is created and then animated to rotate around the X-axis.\n\n```python\nimport bpy\n\n# Delete default objects - Start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set animation duration\nframe_start = 1\nframe_end = 250\n\n# Set rotation keyframes on the X-axis\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncube.rotation_euler = (6.28319, 0, 0)  # 360 degrees in radians\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set up the timeline\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# For smooth animation, set interpolation to linear (or another choice)\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Rotation animation for the cube has been set up.\")\n```\n\nTo run the script in Blender:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block and paste the script into it.\n3. Click on \"Run Script\" to execute.\n\nThis script will create a cube, animate it to rotate 360 degrees on the X-axis over 250 frames, and set the interpolation of the animation to linear. This gives you a smooth continuous rotation.\n\nYou can adjust the `frame_start`, `frame_end`, and rotation values to suit your specific needs, such as faster or slower rotation or a different duration for the animation."
    },
    {
        "Text Input": "A cone spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a cone spin while floating, you can use the following script. This script sets up a scene with a cone and applies animation to make it rotate and move up and down to simulate floating.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set keyframes for spinning\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\ncone.rotation_euler = (0, 0, math.radians(360))\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set keyframes for floating up and down\ncone.location.z = 0\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\ncone.location.z = 2\ncone.keyframe_insert(data_path=\"location\", frame=60)\n\ncone.location.z = 0\ncone.keyframe_insert(data_path=\"location\", frame=120)\n\n# Set interpolation to linear for rotation\nfor fcurve in cone.animation_data.action.fcurves:\n    if fcurve.data_path == \"rotation_euler\":\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\n# Set interpolation to bezier (default) for floating\nfor fcurve in cone.animation_data.action.fcurves:\n    if fcurve.data_path == \"location\":\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'BEZIER'\n\n# Set end of animation\nbpy.context.scene.frame_end = 120\n\nprint(\"The spinning and floating cone animation has been set up.\")\n```\n\nThis script will:\n\n1. Clear the scene to start fresh.\n2. Add a new cone to the scene.\n3. Keyframe the cone's rotation to make it spin 360 degrees over 120 frames.\n4. Keyframe the cone's z-location to make it move up to z=2 at frame 60 and back to z=0 at frame 120 to simulate floating.\n5. Set the rotation interpolation to linear to ensure a consistent spin.\n6. Set the location interpolation to"
    },
    {
        "Text Input": "A cylinder scales up and down.",
        "Blender Script": "Certainly! To create a script in Blender that scales a cylinder up and down repeatedly, you can use the following Python script. This script creates a cylinder, and then animates its scale using keyframes to achieve a scaling effect.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=2.0, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Define keyframe data\nscale_up_frame = 20\nscale_down_frame = 40\n\n# Initially set to frame 0 and scale it down to 0.5\nbpy.context.scene.frame_set(0)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Scale up\nbpy.context.scene.frame_set(scale_up_frame)\ncylinder.scale = (2, 2, 2)\ncylinder.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Scale down\nbpy.context.scene.frame_set(scale_down_frame)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Loop the animation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for modifier in fcurve.modifiers:\n        fcurve.modifiers.remove(modifier)\n    mod = fcurve.modifiers.new(type='CYCLES')\n\n# Optional: Set the playback range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = scale_down_frame\n\nprint(\"Cylinder animation created.\")\n```\n\n### Explanation\n\n1. **Clear Existing Objects**: The script starts by removing all existing mesh objects to ensure a clean workspace.\n\n2. **Create Cylinder**: It then adds a new primitive cylinder at the origin.\n\n3. **Setup Keyframes**: It sets keyframes for the scale property of the cylinder:\n   - Frame 0: Initial scale of (1, 1, 1).\n   - Frame 20: Scaled up to (2, 2, 2).\n   - Frame 40: Scaled back to (1, 1, 1).\n\n4. **Loop Animation**:"
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "This script will create a simple animation of a sphere orbiting around another object, such as a cube, in Blender. The sphere will follow a circular path around the cube.\n\n```python\nimport bpy\nimport math\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube at the origin\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncentral_object = bpy.context.active_object\n\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(3, 0, 0))\norbiting_sphere = bpy.context.active_object\n\n# Set up a circular path using a circle curve\nbpy.ops.curve.primitive_bezier_circle_add(radius=3, location=(0, 0, 0))\npath = bpy.context.active_object\n\n# Make the sphere follow the path\nconstraint = orbiting_sphere.constraints.new(type='FOLLOW_PATH')\nconstraint.target = path\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 250\n\n# Set keyframes for path animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set animation speed\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = path\nbpy.ops.object.select_pattern(pattern=path.name)\nbpy.ops.object.parent_set(type='FOLLOW')\n\npath.data.use_path = True\npath.data.path_duration = end_frame\n\n# Insert keyframe for the animation start\nbpy.context.scene.frame_set(start_frame)\nconstraint.offset_factor = 0.0\npath.data.eval_time = start_frame\npath.keyframe_insert(data_path=\"eval_time\", frame=start_frame)\n\n# Insert keyframe for the animation end\nbpy.context.scene.frame_set(end_frame)\nconstraint.offset_factor = 1.0\npath.data.eval_time = end_frame\npath.keyframe_insert(data_path=\"eval_time\", frame=end_frame)\n\n# Optionally, set a camera view and lighting for better visualization\nbpy.ops.object.camera_add(location=(10, -10, 8), rotation=(math.radians(60), 0, math.radians(45)))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\nbpy.ops.object.light_add(type='SUN', location"
    },
    {
        "Text Input": "A torus tilts back and forth.",
        "Blender Script": "To create a Blender Python script that makes a torus tilt back and forth, you'll need to set up a basic animation cycle for the torus. Below is a script that does just that:\n\n```python\nimport bpy\nimport math\n\n# Function to clean up previous torus and animations\ndef cleanup_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    bpy.ops.object.select_by_type(type='LIGHT')\n    bpy.ops.object.delete()\n\n    bpy.ops.object.select_by_type(type='CAMERA')\n    bpy.ops.object.delete()\n\n# Clean up existing objects in the scene\ncleanup_scene()\n\n# Add a camera\nbpy.ops.object.camera_add(location=(5, -5, 5), rotation=(math.radians(60), 0, math.radians(45)))\n\n# Add a light\nbpy.ops.object.light_add(type='POINT', location=(5, -5, 5))\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the animation duration and keyframes\nframe_start = 1\nframe_end = 60\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Define the tilt angle\ntilt_angle = math.radians(30)  # 30 degrees in radians\n\n# Insert keyframe at start\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Insert keyframe for tilting forward\ntorus.rotation_euler = (0, tilt_angle, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start + (frame_end - frame_start) / 2)\n\n# Insert keyframe for tilting backward (reset to initial)\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation to linear for a smooth back and forth motion\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n        \nprint(\"Torus animation created: Tilts back and forth\")\n```\n\nThis script"
    },
    {
        "Text Input": "A sphere rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a sphere rotate 360 degrees, you'll first need to ensure the sphere is present in your scene. This script will take care of creating a sphere if it doesn't exist, and then apply a rotation animation to it.\n\nHere is a basic script that does just that:\n\n```python\nimport bpy\n\n# Set the context to the active scene\nscene = bpy.context.scene\n\n# Clear all objects except for lights and cameras\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"RotatingSphere\"\n\n# Set the total number of frames for the animation\ntotal_frames = 120  # Adjust as needed for speed\n\n# Set start and end frames for the animation\nscene.frame_start = 1\nscene.frame_end = total_frames\n\n# Insert the initial rotation keyframe\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Insert the final rotation keyframe at 360 degrees on the Z-axis\nsphere.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\n# Set interpolation to linear for constant rotation speed\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Print a message when done\nprint(\"360-degree rotation animation created for the sphere.\")\n```\n\nHere's a breakdown of what this script does:\n\n1. **Clears the Scene of Existing Mesh Objects**: It deletes all mesh objects to start with a clean scene but leaves lights and cameras.\n\n2. **Adds a UV Sphere**: A new UV sphere is created at the origin of the workspace.\n\n3. **Sets Up the Animation**:\n    - Sets the total duration for the animation (120 frames in this script).\n    - Inserts a keyframe at the beginning with no rotation.\n    - Inserts a keyframe at the end with a 360-degree rotation (2\u03c0"
    },
    {
        "Text Input": "A cylinder moves from left to right.",
        "Blender Script": "Certainly! Below is a Blender Python script that will create a cylinder and animate it moving from left to right.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(-5, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set the frame range\nframe_start = 1\nframe_end = 60\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Insert initial keyframe at the starting position\ncylinder.location = (-5, 0, 0)\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Insert final keyframe at the ending position\ncylinder.location = (5, 0, 0)\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set the interpolation to linear for a constant speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Optionally, set the camera view for better visualization\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(0, -10, 5), rotation=(1.1, 0, 1.57))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\nprint(\"Cylinder animation setup complete.\")\n```\n\n### Explanation\n1. **Clear Existing Objects:** This script starts by deleting all existing objects in the scene to create a blank canvas.\n   \n2. **Create Cylinder:** A new cylinder is added to the scene with a starting position at `(-5, 0, 0)`.\n\n3. **Set Frame Range:** The frame range for the animation is set to 60 frames.\n\n4. **Insert Keyframes:** Two keyframes are inserted to create the animation: \n    - At frame 1, the cylinder is at `(-5, 0, 0)`.\n    - At frame 60, the cylinder moves to `(5, 0, 0)`.\n\n5. **Linear Interpolation:** The interpolation for the movement is set to 'LINEAR' so the cylinder moves at a constant speed.\n\n6. **Camera Setup:**"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "Below is a Blender Python script that animates a cube to expand and shrink over time. The cube will scale up and down along all three axes, creating a pulsating effect:\n\n```python\nimport bpy\n\ndef create_pulsating_cube():\n    # Delete default objects if they exist\n    bpy.ops.object.select_all(action='DESELECT')\n    if 'Cube' in bpy.data.objects:\n        bpy.data.objects['Cube'].select_set(True)\n        bpy.ops.object.delete()\n    \n    # Create a new cube\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\n    pulsating_cube = bpy.context.object\n    pulsating_cube.name = \"PulsatingCube\"\n\n    # Set the keyframe points in time and scale\n    keyframes = [0, 20, 40, 60, 80, 100]  # Frame numbers\n    scales = [1, 2, 1, 2, 1, 2]  # Scale at each keyframe\n\n    for i, frame in enumerate(keyframes):\n        # Set the current frame\n        bpy.context.scene.frame_set(frame)\n\n        # Set the scale\n        pulsating_cube.scale = (scales[i], scales[i], scales[i])\n\n        # Insert a keyframe for scaling\n        pulsating_cube.keyframe_insert(data_path=\"scale\")\n\n    # Set the animation end frame\n    bpy.context.scene.frame_end = keyframes[-1]\n\ncreate_pulsating_cube()\n```\n\n### Explanation:\n- **Setup and Cleanup**: The script first checks and deletes an existing default cube to start fresh. Then it creates a new cube at the origin.\n- **Keyframe Animation**: The animation sequence is defined by alternating between scale values of `1` and `2`. These correspond to the cube's default size and an expanded size. The animation is configured to run for 100 frames with the cube pulsating every 20 frames.\n- **Keyframe Insertion**: `keyframe_insert` is used to keyframe the cube\u2019s scale transformations at designated frames.\n- **Animation End Frame**: It sets the total duration of the animation using `frame_end`.\n\nOnce this script is run in Blender, the cube will expand and shrink continuously from frame 0 to 100. You can fine-tune the number of keyframes and scale values to adjust the speed or extent of the pulsation. Adjust the"
    },
    {
        "Text Input": "A torus slides from top to bottom.",
        "Blender Script": "Below is a Blender Python script to animate a torus sliding from the top to the bottom of the scene. Make sure to run this script in Blender's scripting environment.\n\n```python\nimport bpy\n\n# Delete default cube\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Cube'].select_set(True)\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 5))\ntorus = bpy.context.object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 50\n\n# Initial keyframe\ntorus.location = (0, 0, 5)\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Final keyframe (slide to bottom)\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Add a plane as a ground for reference\nbpy.ops.mesh.primitive_plane_add(size=10, align='WORLD', location=(0, 0, 0))\n\n# Set animation playback settings\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Script executed: A torus sliding from top to bottom.\")\n```\n\nInstructions to use the script:\n\n1. Open Blender and go to the \"Scripting\" workspace.\n2. Create a new text block and paste the script above.\n3. Execute the script by clicking the \"Run Script\" button.\n4. View the animation in the Timeline editor or press the `Spacebar` to play.\n\nMake sure you're in Object Mode when running the script. The script animates a torus from a height of 5 units above the ground down to the ground level in 50 frames. You can adjust the animation's length and the starting/ending locations by modifying the respective variables and parameters in the script."
    },
    {
        "Text Input": "A plane slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that simulates a plane sliding from top to bottom, you can follow these steps to animate it using keyframes. This script will create a plane and animate its location along the Z-axis.\n\n```python\nimport bpy\n\ndef create_plane():\n    # Create a new plane\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 5))\n    plane = bpy.context.active_object\n    plane.name = 'SlidingPlane'\n    return plane\n\ndef animate_plane(plane):\n    # Ensure the plane is selected\n    bpy.context.view_layer.objects.active = plane\n    plane.select_set(True)\n    \n    # Set the starting location keyframe\n    plane.location = (0, 0, 5)  # Located at the top\n    plane.keyframe_insert(data_path='location', frame=1)\n    \n    # Set the ending location keyframe\n    plane.location = (0, 0, 0)  # Slide to the bottom\n    plane.keyframe_insert(data_path='location', frame=50)  # Adjust frame for animation speed\n\ndef main():\n    # Delete all objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n    \n    # Create and animate the plane\n    plane = create_plane()\n    animate_plane(plane)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n\n1. **Script Execution**: Copy the above script into a text editor within Blender's scripting workspace.\n2. **Run the Script**: In Blender, press `Run Script` to execute the script.\n3. **Animation**: The script will create a plane that begins at a Z-axis location of 5 and slides down to 0 over 50 frames. You can adjust the frame numbers for a faster or slower slide.\n\nThis simple animation uses keyframes to move the plane. The script deletes existing objects to ensure a clean start, and it creates a new plane object, places it at an initial height, and then animates it to move down to a lower height. Adjusting `location` or `frame` values can modify the plane's path and animation speed."
    },
    {
        "Text Input": "A monkey rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a monkey mesh (Suzanne) rotate 360 degrees, you can follow the steps below to animate it. This script will add a Suzanne mesh to the scene, and create an animation where it rotates 360 degrees over 120 frames.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add()\nmonkey = bpy.context.active_object\n\n# Set the render and animation properties\nbpy.context.scene.render.fps = 24  # Set frames per second\nframe_start = 1\nframe_end = 120\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set the initial rotation keyframe\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path='rotation_euler', frame=frame_start)\n\n# Set the final rotation keyframe\nmonkey.rotation_euler = (0, 0, 2 * 3.14159265)  # 360 degrees in radians\nmonkey.keyframe_insert(data_path='rotation_euler', frame=frame_end)\n\n# Set interpolation type to linear for a smooth rotation\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation created: Suzanne rotates 360 degrees over 120 frames.\")\n```\n\n### Explanation:\n- **Clearing the Scene:** The script first clears existing mesh objects to avoid clutter in the scene.\n- **Adding Suzanne:** The Monkey mesh, known as Suzanne, is added to the scene using `bpy.ops.mesh.primitive_monkey_add()`.\n- **Setting Animation Frames:** We define the animation to start at frame 1 and end at frame 120.\n- **Keyframes:** `monkey.rotation_euler` defines the rotation in Euler angles (in radians); we put keyframes at the start and end for a full 360-degree turn (2 * PI radians).\n- **Linear Interpolation:** By setting the interpolation to 'LINEAR', we ensure the monkey will rotate smoothly without easing in or out.\n\nThis script is a basic setup and can be adjusted"
    },
    {
        "Text Input": "A plane moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a plane moves from left to right, you can use the Blender Python API (bpy). Here's a script to set up this animation:\n\n```python\nimport bpy\n\n# Delete the default cube if it exists\nbpy.ops.object.select_all(action='DESELECT')\nif 'Cube' in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(-3, 0, 0))\nplane = bpy.context.active_object\n\n# Set the render engine to 'CYCLES' for better rendering quality\nbpy.context.scene.render.engine = 'CYCLES'\n\n# Add a keyframe on frame 1 for starting position\nbpy.context.scene.frame_set(1)\nplane.location = (-3, 0, 0)\nplane.keyframe_insert(data_path='location', index=-1)\n\n# Add a keyframe on frame 50 for ending position\nbpy.context.scene.frame_set(50)\nplane.location = (3, 0, 0)\nplane.keyframe_insert(data_path='location', index=-1)\n\n# Set the start and end frame of the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\n\n# Set up the animation playback\nbpy.context.scene.render.fps = 24\n\nprint(\"Animation setup is complete.\")\n```\n\nThis script performs the following actions:\n\n1. Deletes the default cube if it exists.\n2. Adds a new plane to the scene at a starting position (-3, 0, 0).\n3. Changes the render engine to Cycles for better visuals (optional).\n4. Sets keyframes for the plane's location at frame 1 and frame 50, moving it from left to right.\n5. Sets the animation to play from frame 1 to frame 50.\n6. Configures the scene to playback at 24 frames per second (FPS).\n\nTo run this script, you can open a new Blender project, then open a text editor within Blender, copy and paste this script into it, and click on \"Run Script\". This will create the animation directly in your Blender scene. You can then press 'Spacebar' or click the play button in the Timeline to see the plane move from left to right."
    },
    {
        "Text Input": "A cube zooms in and out.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a cube to smoothly zoom in and out along the camera's view direction. This script will create a simple animation that moves the cube closer to and further from the camera over a set period.\n\nMake sure you have your default cube selected, and run the script in Blender's scripting editor.\n\n```python\nimport bpy\nimport math\nfrom mathutils import Vector\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Get the cube and camera objects\ncube = bpy.data.objects.get(\"Cube\")\ncamera = bpy.data.objects.get(\"Camera\")\n\n# Ensure we have both objects\nif not cube or not camera:\n    raise Exception(\"Cube or Camera not found in the scene\")\n\n# Calculate the direction of the zoom\ndir_vector = (cube.location - camera.location).normalized()\n\n# Animation properties\nzoom_distance = 2.0     # distance for zoom in and out\nhalf_cycle = (end_frame - start_frame) // 2\n\n# Function to set keyframes for zoom\ndef set_zoom_keyframes(obj, start_frame, half_cycle, direction, distance):\n    # Start position keyframe (default position)\n    obj.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Zoom in position keyframe\n    zoom_in_position = obj.location + direction * distance\n    for i in range(3):\n        obj.location[i] = zoom_in_position[i]\n    obj.keyframe_insert(data_path=\"location\", frame=start_frame + half_cycle)\n    \n    # Zoom out position keyframe (back to start position)\n    obj.location -= direction * distance\n    obj.keyframe_insert(data_path=\"location\", frame=start_frame + 2 * half_cycle)\n\n# Clear existing keyframes\ncube.animation_data_clear()\n\n# Set keyframes for zooming\nset_zoom_keyframes(cube, start_frame, half_cycle, dir_vector, zoom_distance)\n\n# Make animation seamless by enabling linear interpolation\nfor fcurve in cube.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete\")\n```\n\nThis script does the following:\n1. Sets the animation frame range.\n2. Retrieves the existing cube and camera from the scene.\n3. Computes the direction vector for the zoom effect"
    },
    {
        "Text Input": "A cone rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that animates a cone rotating 360 degrees, you can use the Blender Python API. Below is an example script that accomplishes this task:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the animation frame start and end\nstart_frame = 1\nend_frame = 120  # You can adjust the number of frames for desired rotation speed\n\n# Set the initial rotation keyframe at the start\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the final rotation keyframe, rotating 360 degrees (2 * pi radians)\ncone.rotation_euler = (0, 0, 2 * 3.141592653589793)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the scene's frame end to the end of the animation\nbpy.context.scene.frame_end = end_frame\n```\n\n### Explanation\n\n1. **Clear Existing Mesh Objects:** The script starts by deleting all existing mesh objects to ensure a clean workspace.\n\n2. **Create a Cone:** It creates a new cone object using `bpy.ops.mesh.primitive_cone_add()`. You can modify the parameters such as `vertices`, `radius1`, and `depth` to change the appearance of the cone.\n\n3. **Set Animation Frames:** The script defines `start_frame` and `end_frame` to control when the rotation animation begins and ends. You may adjust `end_frame` to alter the speed of the rotation.\n\n4. **Insert Keyframes:**\n   - It sets the initial rotation of the cone at `start_frame` to `(0, 0, 0)` and inserts a keyframe.\n   - Then, it sets the final rotation to `(0, 0, 2 * pi)` at `end_frame`, which corresponds to a full 360-degree rotation.\n\n5. **Adjust Scene Frame End:** Finally, it sets the scene's frame end to match the `end_frame` to ensure"
    },
    {
        "Text Input": "A torus spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a torus spin and scale up, you'll need to set up a simple animation. Here's a script that does just that:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a torus object to the scene\nbpy.ops.mesh.primitive_torus_add()\ntorus = bpy.context.object\n\n# Set the frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Initialize the scale and rotation\ninitial_scale = (1.0, 1.0, 1.0)\ninitial_rotation = (0.0, 0.0, 0.0)\n\n# Final scale and rotation for the animation\nfinal_scale = (3.0, 3.0, 3.0)  # Scales up 3 times its size\nfinal_rotation = (0.0, 0.0, 6.28319)  # Rotate 360 degrees around the Z-axis\n\n# Set initial scale and rotation at the start frame\ntorus.scale = initial_scale\ntorus.rotation_euler = initial_rotation\ntorus.keyframe_insert(data_path=\"scale\", frame=start_frame)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set final scale and rotation at the end frame\ntorus.scale = final_scale\ntorus.rotation_euler = final_rotation\ntorus.keyframe_insert(data_path=\"scale\", frame=end_frame)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the scene's frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set interpolation to linear for a constant rate of change\nfor fc in torus.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Optionally, play the animation\n# bpy.ops.screen.animation_play()\n```\n\nHow to use this script:\n1. Open Blender and go to the scripting tab.\n2. Create a new text block and paste the above script.\n3. Click the \"Run Script\" button.\n\nThis script deletes all existing objects in the scene, adds a torus, and animates it to scale up to three times its original size while simultaneously rotating 360 degrees around"
    },
    {
        "Text Input": "A cone rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that rotates a cone 360 degrees, you can use the following script. This script will create a cone, add it to the scene, and animate it to rotate around its local axis. Make sure you have Blender open and you run this script in the Blender Text Editor.\n\n```python\nimport bpy\nimport math\n\n# Function to create a cone\ndef create_cone():\n    bpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 0))\n    return bpy.context.active_object\n\n# Function to add rotation animation to the cone\ndef add_rotation_animation(obj):\n    obj.animation_data_clear()  # Clear existing animation data\n\n    # Set the frame for the start and end of the animation\n    start_frame = 1\n    end_frame = 120  # 120 frames for a 360 degree rotation (can be adjusted as needed)\n\n    # Set the rotation mode to Euler\n    obj.rotation_mode = 'XYZ'\n\n    # Set initial rotation at start frame\n    obj.rotation_euler = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n    # Set final rotation at end frame (360 degrees converted to radians)\n    obj.rotation_euler = (0, 0, math.radians(360))\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n    # Set the interpolation type to linear for a constant speed rotation\n    for fcurve in obj.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\n# Create the cone and add the animation\ncone = create_cone()\nadd_rotation_animation(cone)\n\n# Set the current frame to the start of the animation\nbpy.context.scene.frame_set(1)\n\n# Set the render end frame to match the end of the animation\nbpy.context.scene.frame_end = 120\n```\n\nInstructions for use:\n1. Open Blender and switch to a new or existing project.\n2. Open a new text editor window within Blender and paste the script above.\n3. Run the script by clicking `Run Script` in the text editor.\n4. The script will add a cone object to the scene and animate its rotation from frame 1 to 120, rotating 360 degrees around the Z-axis.\n5. Press the play"
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a torus move diagonally upwards, you will first need to set up your scene. Here's a simple script that creates a torus and animates it moving diagonally upwards over a set number of frames.\n\n```python\nimport bpy\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = \"MovingTorus\"\n\n# Define the start and end frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Set keyframes for the torus at the start and end of the animation\ntorus.location = (0.0, 0.0, 0.0)\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the ending position - moving diagonally upwards\n# Adjust this vector to change the direction and distance of movement\nend_position = (10.0, 10.0, 10.0)\ntorus.location = end_position\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optionally, set a frame range for the entire animation to play in Blender timeline\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the interpolation mode for smoother movement (optional)\nfor fcurve in torus.animation_data.action.fcurves:\n    for kfp in fcurve.keyframe_points:\n        kfp.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete. The torus will move diagonally upwards.\")\n```\n\nInstructions to set up your environment:\n1. Open Blender and create a new general file.\n2. Open a new text editor window with `Shift + F11` or by selecting it from the Layout dropdown.\n3. Copy and paste the script into the text editor.\n4. Click the \"Run Script\" button in the text editor to execute the script.\n\nThis script will animate the torus from `(0, 0, 0)` to `(10, 10, 10)` over 100 frames. You can adjust the `end_position` variable to change how far up and in what direction the torus will move. You can also change `start_frame` and `end_frame` if you need"
    },
    {
        "Text Input": "A plane orbits around another object.",
        "Blender Script": "To create a Blender Python script that makes a plane orbit around another object, like a sphere, you can use the following steps. This script will animate the plane in orbit around the sphere using keyframes.\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing objects in the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Create a function to add a sphere\ndef create_sphere(location=(0, 0, 0)):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=location)\n    return bpy.context.object\n\n# Create a function to add a plane\ndef create_plane(location=(2, 0, 0)):\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=location)\n    return bpy.context.object\n\n# Main function to set up the scene\ndef setup_scene():\n\n    # Clear existing objects\n    clear_scene()\n\n    # Create a sphere as the central object\n    sphere = create_sphere()\n\n    # Create a plane that will orbit around the sphere\n    plane = create_plane()\n\n    # Set animation parameters\n    num_frames = 250\n    radius = 2\n    bpy.context.scene.frame_end = num_frames\n\n    # Animate the plane rotation around the sphere\n    for frame in range(num_frames):\n        angle = (frame / num_frames) * (2 * math.pi)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n\n        # Move the plane to the new position\n        plane.location = (x, y, 0)\n\n        # Insert keyframe for the location\n        plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n    return sphere, plane\n\n# Run the setup to initialize the scene\nsetup_scene()\n```\n\n### Explanation:\n\n- **clear_scene**: This function clears all the existing objects in the scene.\n- **create_sphere & create_plane**: These functions add a UV sphere and a plane to the scene.\n- **setup_scene**: This orchestrates the creation of objects and the animation process.\n- **Animation Loop**: The loop iterates through the number of frames (`num_frames`), calculates the position of the plane using trigonometric functions to create a circular orbit, and inserts a keyframe for each position.\n\nTo use this script, just run it in Blender's scripting tab. The plane"
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "Below is a Blender Python script that creates a simple animation where a cone object zooms in and out. This script will add a cone to the scene, and keyframe its scale to simulate the zooming effect.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects in the scene\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Define scale keyframes (zoom in and out)\nscales = [\n    (1.0, 1.0, 1.0),  # Normal size at start\n    (2.0, 2.0, 2.0),  # Zoom in\n    (1.0, 1.0, 1.0),  # Back to normal\n    (0.5, 0.5, 0.5),  # Zoom out\n    (1.0, 1.0, 1.0)   # Back to normal\n]\n\n# Calculate keyframe intervals\nkeyframe_interval = (end_frame - start_frame) // (len(scales) - 1)\n\n# Insert keyframes for scaling\nfor i, scale in enumerate(scales):\n    frame = start_frame + i * keyframe_interval\n    cone.scale = scale\n    cone.keyframe_insert(data_path=\"scale\", frame=frame)\n    \n# Ensure frames are set to linear interpolation for smooth scaling\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'LINEAR'\n\n# Set the current frame to start\nbpy.context.scene.frame_set(start_frame)\n\n# Play the animation (optional)\nbpy.ops.screen.animation_play()\n```\n\n### Instructions for Use:\n1. Open Blender.\n2. Open the Scripting workspace.\n3. Create a new Text block, copy-paste the script into it.\n4. Run the script by clicking the \"Run Script\" button.\n\n### How it Works:\n- The script clears the current"
    },
    {
        "Text Input": "A cube jumps up and lands.",
        "Blender Script": "To achieve the effect of a cube jumping up and then landing in Blender using Python, we can animate the cube's position along the Z-axis to simulate the jump. Here's a script to do just that. The script will create a cube, set keyframes to animate it upwards and back down to simulate a jump, and then animate it back to its original position.\n\n```python\nimport bpy\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set keyframes for the jump animation\n# Starting position\ncube.location = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=1)\n\n# Jump up\ncube.location = (0, 0, 2)  # Adjust this value for higher jumps\ncube.keyframe_insert(data_path=\"location\", frame=10)\n\n# Land back down\ncube.location = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=20)\n\n# Set interpolation to linear for a more uniform jump and land\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Optional: Adjust frame range for the timeline\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 30\n```\n\n**Explanation:**\n\n1. **Clear Existing Meshes**: We start by deleting all existing mesh objects to have a clean scene.\n\n2. **Create a Cube**: A new cube is created at the origin.\n\n3. **Set Keyframes**:\n   - At frame 1, the cube is at its starting position `(0, 0, 0)`.\n   - At frame 10, the cube moves up along the Z-axis, simulating a jump (`(0, 0, 2)`).\n   - At frame 20, the cube returns to its original position to simulate landing.\n\n4. **Linear Interpolation**: The keyframes are set to use linear interpolation, providing a consistent speed for the jump and the landing.\n\n5. **Adjust Frame Range**: Optionally, the frame start and end are set"
    },
    {
        "Text Input": "A cylinder scales up and down.",
        "Blender Script": "Certainly! To achieve a scaling animation of a cylinder in Blender using a Python script, we can use the Blender's Python API (bpy). Below is a script that creates a cylinder and then adds an animation where the cylinder scales up and down over time.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set keyframe parameters\nscale_up_frame = 20\nscale_down_frame = 40\n\n# Set initial scale (no scale)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path='scale', frame=0)\n\n# Scale up keyframe (scaling up)\ncylinder.scale = (2, 2, 2)\ncylinder.keyframe_insert(data_path='scale', frame=scale_up_frame)\n\n# Scale down keyframe (return to original scale)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path='scale', frame=scale_down_frame)\n\n# Set up a cyclic animation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    cycles_modifier = fcurve.modifiers.new(type='CYCLES')\n\nprint(\"Cylinder scaling animation script executed.\")\n```\n\n**Explanation of the Script:**\n\n1. **Clear Existing Objects:** We start by selecting and deleting all existing objects in the scene to work from a clean slate.\n\n2. **Create Cylinder:** We add a cylinder at the origin with a default radius and depth.\n\n3. **Set Keyframes:**\n   - At frame 0, the cylinder has its original size.\n   - At `scale_up_frame` (frame 20 in this example), the cylinder is scaled up to size `(2, 2, 2)`.\n   - At `scale_down_frame` (frame 40), the cylinder returns to its original scale `(1, 1, 1)`.\n\n4. **Cyclic Animation:** A cyclic modifier is added to the f-curves of the cylinder's scale, making the animation loop indefinitely.\n\n**Usage:**\n\n- Run the script in Blender's Scripting workspace.\n- Ensure your timeline starts at frame 0 and adjust the end frame as needed to observe"
    },
    {
        "Text Input": "A plane rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that animates a plane rotating around the X-axis, you can use the following code. This script assumes you have Blender installed and are using its scripting interface. Before running this script, make sure Blender's scripting editor is open.\n\nHere's a basic script that accomplishes the task:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the plane object\nplane = bpy.context.active_object\n\n# Set the rotation mode to Euler XYZ\nplane.rotation_mode = 'XYZ'\n\n# Set initial rotation keyframe\nplane.rotation_euler[0] = 0  # Start rotation at 0 radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\n# Set final rotation keyframe\nplane.rotation_euler[0] = 3.14159 * 2  # Rotate 360 degrees (2\u03c0 radians)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=240, index=0)  # End animation at frame 240\n\n# Set playback range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 240\n\n# Optional: Set the render engine to 'CYCLES', can be changed to 'BLENDER_EEVEE' or others\nbpy.context.scene.render.engine = 'CYCLES'\n\nprint(\"Animation setup complete: Plane will rotate around the X-axis over 240 frames.\")\n```\n\nExplanation of the script:\n- First, it deletes all existing objects in the scene to start with a clean slate.\n- Then it adds a plane at the origin of the scene.\n- The script sets the rotation mode of the plane to 'XYZ' so that we can specify Euler rotations directly.\n- Two keyframes are inserted: the first frame with no rotation and another at frame 240, where the plane has completed a 360-degree rotation.\n- The script sets the frame range for playback from 1 to 240, configuring it for a simple looping animation over 10 seconds at 24 frames per second.\n- Finally, the code configures the render engine. This isn't necessary for the rotation itself but ensures you're set up for"
    },
    {
        "Text Input": "A plane moves in a circular path.",
        "Blender Script": "To create a Blender Python script that makes a plane object move in a circular path, you can use the following script. This script creates a plane and sets up keyframes to animate it along a circular path using a simple curve modifier technique.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Create a circle path\nbpy.ops.curve.primitive_bezier_circle_add(radius=5, location=(0, 0, 0))\ncircle = bpy.context.object\n\n# Set the plane to follow the circle path\nmodifier = plane.modifiers.new(name='Curve', type='CURVE')\nmodifier.object = circle\nmodifier.deform_axis = 'POS_X'\n\n# Animate the plane around the circle\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\n\nfor frame in range(1, 251):\n    # Calculate the percentage of the path completed\n    percentage = (frame - 1) / 249\n    # Calculate the position (offset) along the path\n    offset = percentage * 2 * math.pi\n\n    plane.location = (0, 0, 0)\n    plane.rotation_euler = (0, 0, 0)\n    plane.keyframe_insert(data_path='location', frame=frame)\n    plane.keyframe_insert(data_path='rotation_euler', frame=frame)\n\n    # Offset value to animate (cycle through 0 to the path length)\n    plane.location.x = 5 * math.cos(offset)\n    plane.location.y = 5 * math.sin(offset)\n    plane.keyframe_insert(data_path='location', frame=frame)\n\nbpy.context.scene.render.fps = 24\n\n# Set the camera for a better view\nbpy.ops.object.camera_add(align='VIEW', location=(10, -10, 10), rotation=(math.pi / 4, 0, math.pi / 4))\nbpy.context.scene.camera = bpy.context.object\n```\n\n### Explanation:\n\n1. **Setup and Clean-Up**:\n    - The script begins by deleting all objects in the current scene to start with a clean slate.\n\n2. **"
    },
    {
        "Text Input": "A monkey wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a monkey wiggle side to side, we need to add a monkey (Suzanne) to the scene, create an animation for it, and then use keyframes to make it wiggle side to side. Here's a step-by-step script to achieve that:\n\n```python\nimport bpy\n\n# Delete all objects in the current scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey head (Suzanne)\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.active_object\nmonkey.name = 'WigglingMonkey'\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Define the keyframe positions\nframes = [1, 15, 30, 45, 60]\nangles = [-15, 15, -15, 15, -15]  # Degrees of rotation in Z axis\n\n# Apply the rotation keyframes to the monkey object\nfor frame, angle in zip(frames, angles):\n    bpy.context.scene.frame_set(frame)\n    monkey.rotation_euler[2] = angle * (3.14159 / 180.0)  # Convert degrees to radians\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=2)\n\n# Set the interpolation type to make the wiggle smooth and cyclic\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Enable cyclic modifier for continuous looping\nfor fcurve in monkey.animation_data.action.fcurves:\n    mod = fcurve.modifiers.new(type='CYCLES')\n\n# Optional: Play the animation in the timeline\nbpy.ops.screen.animation_play()\n\n```\n\nExplanation:\n- The script starts by clearing any existing mesh objects in the scene.\n- A new Suzanne (Blender's monkey head) is added to the center of the scene.\n- The frame range is set from 1 to 60.\n- Keyframes are added at frames 1, 15, 30, 45, and 60 to rotate the monkey back and forth along the Z-axis.\n- The `LINEAR` interpolation makes the"
    },
    {
        "Text Input": "A cylinder moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that moves a cylinder diagonally upwards, we need to perform the following steps:\n\n1. Create a cylinder in the scene.\n2. Animate the cylinder to move diagonally upwards.\n\nHere's a Blender Python script that accomplishes this:\n\n```python\nimport bpy\nimport mathutils\n\n# Clear existing objects (Optional: Be cautious, this will delete all objects in the scene)\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set animation frame data\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set cylinder's initial location\ncylinder.location = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Define diagonal movement direction (e.g., along x and z axes)\ndiagonal_vector = mathutils.Vector((1, 0, 1))\ndiagonal_vector.normalize()  # Ensure it's a unit vector\n\n# Set final target location\ndistance = 10  # Desired distance to cover diagonally\ntarget_location = cylinder.location + diagonal_vector * distance\n\n# Set keyframe for the final position\ncylinder.location = target_location\ncylinder.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Enable smooth interpolation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete. Press space to play the animation.\")\n```\n\n### Explanation:\n\n1. **Delete Existing Objects:** The script starts by deleting all existing objects in the scene to ensure a clean environment. Be careful with this step as it will remove all objects.\n\n2. **Create Cylinder:** A cylinder is created at the origin `(0, 0, 0)`.\n\n3. **Animation Setup:** The animation starts at frame 1 and ends at frame 100. You can adjust these values according to your needs.\n\n4. **Initial Keyframe:** The cylinder's initial position is set at `(0, 0, 0)` and a keyframe is inserted at the start frame.\n\n5. **"
    },
    {
        "Text Input": "A cone rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that animates a cone rotating 360 degrees, you can use the following script. This script will create a cone object in a new Blender scene and animate its rotation around the Z-axis over 250 frames (which corresponds to 10 seconds at a default frame rate of 24 fps).\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\n\n# Get reference to the newly created cone\ncone = bpy.context.active_object\n\n# Set the starting and ending frame for the animation\nstart_frame = 1\nend_frame = 250\n\n# Set rotation keyframes\n# Start - initial rotation\ncone.rotation_euler[2] = 0  # rotation around Z-axis\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# End - full rotation (360 degrees = 2 * pi radians)\ncone.rotation_euler[2] = 2 * 3.14159265\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation to linear for constant speed rotation\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the scene's end frame so that the animation loops correctly\nbpy.context.scene.frame_end = end_frame\n\n# Optional: set the render engine and output settings\nbpy.context.scene.render.engine = 'BLENDER_EEVEE'\nbpy.context.scene.render.filepath = \"//cone_rotation_animation\"\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\nbpy.context.scene.render.ffmpeg.codec = 'H264'\nbpy.context.scene.render.ffmpeg.constant_rate_factor = 'MEDIUM'\nbpy.context.scene.render.ffmpeg.ffmpeg_preset = 'GOOD'\n\n# Render the animation\n# bpy.ops.render.render(animation=True)\n```\n\nInstructions:\n1. Open Blender.\n2. Open a new text editor window.\n3. Copy and paste the above script into the text editor.\n4. Click \"Run Script\" to execute the script"
    },
    {
        "Text Input": "A torus rotates 360 degrees.",
        "Blender Script": "To create a script in Blender that adds a torus and animates it to rotate 360 degrees, you can use the following Python script. This script will create a torus in the scene, set up a rotation animation, and render the rotation:\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n\n# Grab the torus object\ntorus = bpy.context.active_object\n\n# Set keyframe for initial rotation\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set keyframe for final rotation 360 degrees (2 * pi radians)\ntorus.rotation_euler = (0, 0, 2 * 3.14159)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set the end frame for the animation timeline\nbpy.context.scene.frame_end = 100\n\n# Optionally, set the scene to play with nice interpolation\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Render animation (optional)\n# Uncomment the lines below to render the animation\n# bpy.context.scene.render.image_settings.file_format = 'FFMPEG'\n# bpy.context.scene.render.filepath = '/tmp/torus_rotation.mp4'\n# bpy.ops.render.render(animation=True)\n\nprint(\"Torus rotation animation created!\")\n```\n\n### Explanation\n- The script starts by clearing any existing mesh objects for a clean workspace.\n- It then adds a torus mesh to the scene.\n- Two rotation keyframes are set: The first at frame 1 with no rotation, and the second at frame 100 with a 360-degree rotation along the Z-axis (in radians).\n- The interpolation between these keyframes is set to 'LINEAR' to ensure a smooth constant-speed rotation, though you can adjust it depending on your preference.\n- An optional section is provided to render the animation as an FFMPEG video if desired, but it's commented out. You can uncomment and specify the desired file path for"
    },
    {
        "Text Input": "A cube rotates on the X-axis.",
        "Blender Script": "Below is a simple Blender Python script that creates a rotating cube around the X-axis. The script uses the Blender API to set up a basic animation that rotates a cube over a specified number of frames.\n\n```python\nimport bpy\n\n# Define the number of frames for the animation\nframe_start = 1\nframe_end = 120  # 120 frames, you can adjust this for longer/shorter animations\nrotation_degrees = 360  # One full rotation\n\n# Clear existing objects in the scene for a fresh start\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set cube's animation keyframes\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    angle = (rotation_degrees / (frame_end - frame_start)) * (frame - frame_start)\n    cube.rotation_euler = (angle * (3.14159 / 180), 0, 0)  # Convert degrees to radians\n    cube.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n# Set the timeline to start at frame 1 and end at frame_end\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nprint(f\"Created a rotating cube animation from frame {frame_start} to {frame_end}.\")\n```\n\n### How to Use This Script:\n\n1. Open Blender.\n2. Go to the Scripting workspace.\n3. Create a new text block and paste the script into it.\n4. Run the script by clicking the \"Run Script\" button.\n\n### Explanation:\n\n- The script deletes any existing objects in the scene to start fresh.\n- A cube is added to the scene at the origin (0, 0, 0).\n- The script sets up keyframes for rotating the cube around the X-axis over 120 frames.\n- The cube performs a full 360-degree rotation over the entire range of frames specified.\n- The conversion from degrees to radians is done using the formula radians = degrees * (\u03c0 / 180).\n\nYou can customize the script further by adjusting the number of frames, the rotation amount, or by adding additional transformations."
    },
    {
        "Text Input": "A sphere wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a sphere wiggle side to side, we can use the Blender Python API. This script will create a sphere and then animate its location to produce a wiggling effect. \n\nHere's a simple script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and objects to start fresh\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a mesh sphere\nbpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=1, location=(0, 0, 1))\nsphere = bpy.context.active_object\n\n# Adding a new material to the sphere\nmaterial = bpy.data.materials.new(name=\"SphereMaterial\")\nmaterial.diffuse_color = (0.8, 0.2, 0.3, 1)  # Set the material color to a pinkish tone\nsphere.data.materials.append(material)\n\n# Define the wiggling parameters\nframes = 100  # Total number of frames\nfrequency = 4  # Wiggling frequency\namplitude = 1  # Amplitude of the wiggling motion\n\n# Generate keyframe data for wiggling animation\nfor frame in range(frames):\n    # Calculate the x location using a sine wave for side-to-side motion\n    x = amplitude * math.sin(frequency * 2 * math.pi * frame / frames)\n    \n    # Set the location and insert a keyframe\n    sphere.location = (x, 0, 1)\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the current frame to the start\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frames\nbpy.context.scene.frame_set(0)\n\n# Configure render settings\nbpy.context.scene.render.engine = 'CYCLES'\nbpy.context.scene.render.filepath = \"//wiggle_animation\"\nbpy.context.scene.render.image_settings.file_format = 'PNG'\n\n# Save the Blender file\nbpy.ops.wm.save_as_mainfile(filepath=\"wiggle_sphere.blend\")\n```\n\nInstructions for using this script:\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block in the Text Editor.\n3. Copy and paste the script into the text block.\n4. Run the script using the \"Run Script\" button.\n\nThis script will create a sphere at"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a sphere expand and shrink, you can use Blender's `bpy` library to animate the scale of the sphere over time. This script will create a simple animation where the sphere expands and then shrinks in size. Here's a basic script that accomplishes this:\n\n```python\nimport bpy\n\n# Ensure the scene is clear first\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Function to set keyframes for expanding and shrinking\ndef animate_sphere(sphere, start_frame, end_frame, max_scale):\n    # Set the sphere to start scaling animation\n    sphere.scale = (1, 1, 1)\n    sphere.keyframe_insert(data_path=\"scale\", frame=start_frame)\n    \n    # Expand sphere to max_scale\n    sphere.scale = (max_scale, max_scale, max_scale)\n    mid_frame = start_frame + (end_frame - start_frame) // 2\n    sphere.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n    \n    # Shrink sphere back to original size\n    sphere.scale = (1, 1, 1)\n    sphere.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Animate the sphere\nanimate_sphere(sphere, start_frame=1, end_frame=60, max_scale=2)\n\n# Set the interpolation to linear for smoother scaling\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set output settings (Optional)\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.filepath = \"//sphere_expand_shrink.mp4\"\n\n# If you want to render the animation, enable these lines\n# bpy.context.scene.render.image_settings.file_format = 'FFMPEG'\n# bpy.ops.render.render(animation=True)\n```\n\n### Explanation:\n- **Clear the Scene**: Initially, it"
    },
    {
        "Text Input": "A sphere moves in a spiral motion.",
        "Blender Script": "To create a Blender script that animates a sphere moving in a spiral motion, you can use Blender's Python API to automate the process. Below is a script that will achieve this by creating a sphere and animating its location along a spiral path.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and objects (Optional)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Define animation parameters\nframes = 250\nspiral_turns = 3  # Number of turns in the spiral\nheight = 5       # Height differential from top to bottom\n\n# Calculate the total length of spiral in terms of radians\ntotal_spiral_length = 2 * math.pi * spiral_turns\n\n# Set keyframes for spiral motion\nfor frame in range(frames):\n    # Calculate progress along the spiral\n    t = frame / frames  # between 0 and 1\n    theta = total_spiral_length * t  # Angle of rotation\n    radius = t * 5  # Spiral's radius increases linearly\n\n    # Calculate the new position using polar coordinates (r, theta) converted to Cartesian (x, y)\n    x = radius * math.cos(theta)\n    y = radius * math.sin(theta)\n    z = height * t\n    \n    # Set the sphere's location\n    sphere.location = (x, y, z)\n    \n    # Insert keyframe\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set interpolation type to linear (Optional)\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Spiral animation created successfully.\")\n```\n\nInstructions to use the script:\n1. Open Blender and create a new project.\n2. Switch to the Scripting workspace.\n3. Create a new text block in the text editor, and then paste the script into this block.\n4. Run the script by clicking on the \"Run Script\" button.\n\nThis script creates a UV sphere and then animates its location along a spiral path, gradually moving upwards over the specified number of frames. The final animation will"
    },
    {
        "Text Input": "A sphere spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a sphere spin while appearing to float, you'll need to set up a simple animation and use the Blender API to control the sphere's rotation:\n\n```python\nimport bpy\n\n# Remove the default objects from the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 1))\n\n# Get the reference to the newly added sphere\nsphere = bpy.context.active_object\n\n# Set up its material (optional for visual clarity)\nmaterial = bpy.data.materials.new(name=\"SphereMaterial\")\nmaterial.diffuse_color = (0.1, 0.5, 0.8, 1)  # Example color (blue-ish)\nsphere.data.materials.append(material)\n\n# Set the initial rotation for the sphere (optional, set to 0 anyway)\nsphere.rotation_euler = (0, 0, 0)\n\n# Set up animation frames\nframe_start = 1\nframe_end = 250  # Total number of frames for the animation\n\n# Set the current frame to the start\nbpy.context.scene.frame_set(frame_start)\n\n# Insert a keyframe for the initial rotation\nsphere.keyframe_insert(data_path='rotation_euler', frame=frame_start)\n\n# Define the rotation per frame (e.g., rotating around the Z-axis)\n# This example assumes a full rotation (2*pi radians) over the entire frame range\nimport math\ntotal_rotation = 2 * math.pi\nrotation_per_frame = total_rotation / frame_end\n\n# At the end of the animation, the sphere will have completed a single full rotation\nsphere.rotation_euler = (0, 0, total_rotation)\nsphere.keyframe_insert(data_path='rotation_euler', frame=frame_end)\n\n# Set animation playback range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set the render settings\nbpy.context.scene.render.fps = 24  # Set frames per second\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = '//spin_sphere/'\n\n# Run the animation (optional in a script, will play automatically in Blender)\nbpy.ops.screen.animation_play()\n\n# Save the animation to file (optional)\n# bpy.ops.render.render(animation=True)  #"
    },
    {
        "Text Input": "A monkey spins and scales up.",
        "Blender Script": "To create a Blender Python script that animates a monkey spinning and scaling up, we can use the Blender Python API (`bpy`). The script will add a monkey mesh, set up the initial scale, insert keyframes for the scale and rotation, and apply animation.\n\nHere is a simple script that performs these tasks:\n\n```python\nimport bpy\n\n# Ensure the script is executed in Object mode\nif bpy.context.active_object and bpy.context.active_object.mode != 'OBJECT':\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Remove all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add monkey mesh\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.active_object\nmonkey.name = 'SpinningMonkey'\n\n# Set initial scale\nmonkey.scale = (1, 1, 1)\n\n# Set frame range\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert initial scale keyframe\nmonkey.keyframe_insert(data_path='scale', frame=start_frame)\nmonkey.keyframe_insert(data_path='rotation_euler', frame=start_frame)\n\n# Set final scale\nmonkey.scale = (3, 3, 3)\n\n# Set final rotation (spin 5 times around Z-axis)\nmonkey.rotation_euler = (0, 0, 2 * 3.14159 * 5)  # 5 full spins\n\n# Insert final keyframes\nmonkey.keyframe_insert(data_path='scale', frame=end_frame)\nmonkey.keyframe_insert(data_path='rotation_euler', frame=end_frame)\n\n# Set interpolation to linear for smoother spinning\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kfp in fcurve.keyframe_points:\n        kfp.interpolation = 'LINEAR'\n\n# Set the timeline to the first frame to see the initial state\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Monkey spinning and scaling animation created.\")\n```\n\nThis script does the following:\n- Deletes any existing objects to start with a clean scene.\n- Adds a monkey (Suzanne) mesh at the origin.\n- Sets the initial scale to (1, 1, 1).\n- Defines an animation over 120 frames.\n- Sets keyframes for the initial and"
    },
    {
        "Text Input": "A cylinder flips upside down.",
        "Blender Script": "To flip a cylinder upside down in Blender using Python, you can create a script that first adds a cylinder to the scene, and then applies a rotation transformation to it. Here's a simple script to achieve this:\n\n```python\nimport bpy\nfrom math import radians\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a cylinder to the scene\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\n\n# Get the reference to the newly created cylinder\ncylinder = bpy.context.active_object\n\n# Rotate the cylinder 180 degrees around the X axis to flip it upside down\ncylinder.rotation_euler = (radians(180), 0, 0)\n\n# Update the scene\nbpy.context.view_layer.update()\n\n```\n\nHere's a step-by-step explanation of the script:\n\n1. **Clear Existing Objects**: The script begins by clearing all existing objects from the scene to start fresh. This is done using `bpy.ops.wm.read_factory_settings(use_empty=True)`.\n\n2. **Add a Cylinder**: The script uses `bpy.ops.mesh.primitive_cylinder_add` to add a new cylinder with a specified radius and depth. The cylinder is placed at the origin `(0, 0, 0)`.\n\n3. **Access the Cylinder Object**: The `bpy.context.active_object` provides access to the newly created cylinder, which is then stored in the `cylinder` variable.\n\n4. **Rotate the Cylinder**: To flip the cylinder upside down, it is rotated 180 degrees around the X-axis. The `radians` function converts degrees to radians since Blender\u2019s rotation uses radians.\n\n5. **Update the Scene**: Finally, the script updates the scene to reflect the changes made to the cylinder's orientation. This ensures that the rotation is applied properly.\n\nYou can run this script in Blender's scripting environment to see the effect."
    },
    {
        "Text Input": "A cube rotates on the X-axis.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that will create a cube and animate it to rotate around the X-axis. You can execute this script within Blender's scripting editor.\n\n```python\nimport bpy\n\n# Clear existing meshes\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set keyframes for rotation\ncube.animation_data_create()  # Ensure the cube has an animation data block\ncube.rotation_mode = 'XYZ'  # Use Euler XYZ rotation mode\n\n# Clear any existing keyframes\ncube.animation_data_clear()\n\n# Insert keyframe at frame 1\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Insert keyframe at frame 50 with 90-degree rotation on X-axis\ncube.rotation_euler = (3.14159 / 2, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\n# Insert keyframe at frame 100 with 180-degree rotation on X-axis\ncube.rotation_euler = (3.14159, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n```\n\nHow to use:\n1. Open Blender.\n2. Go to the Scripting workspace.\n3. Create a new text block and paste the script above.\n4. Run the script by clicking the \"Run Script\" button.\n\nThis script will create a cube and animate it rotating 180 degrees about the X-axis over 100 frames. You can of course adjust the rotation angles or the frames to suit your needs."
    },
    {
        "Text Input": "A cube wiggles side to side.",
        "Blender Script": "To create a script in Blender that makes a cube wiggle side to side, you can use the following Python script. This script animates the cube's location along the X-axis to create a wiggling effect.\n\n```python\nimport bpy\nimport math\n\n# Ensure there's a cube in the scene, otherwise add one\nif \"Cube\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the cube object\ncube = bpy.data.objects[\"Cube\"]\n\n# Set the frame range for the animation\nframe_start = 1\nframe_end = 100\n\n# Set the wiggle parameters\nwiggle_amplitude = 1.0\nwiggle_frequency = 0.1\n\n# Clear existing animation data\ncube.animation_data_clear()\n\n# Insert keyframes to create wiggle effect\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the new X position using a sine wave for smooth wiggle\n    new_x = wiggle_amplitude * math.sin(wiggle_frequency * frame)\n    \n    # Set the cube's new X location\n    cube.location.x = new_x\n    \n    # Insert a keyframe for the location on the X-axis\n    cube.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Set the timeline end so it matches the animation\nbpy.context.scene.frame_end = frame_end\n```\n\n### Explanation:\n\n- **Cube Setup**: The script first checks if there's already a cube in the scene. If not, it adds a new cube.\n\n- **Animation Parameters**: We define the start and end frames for the animation. The `wiggle_amplitude` determines how far the cube moves side to side, while `wiggle_frequency` affects the speed of the wiggling.\n\n- **Animation Loop**: The script iterates over each frame and calculates the cube's X position using a sine function that gives a smooth oscillating effect. \n\n- **Keyframe Insertion**: For each frame, we set the new X location and insert a keyframe, ensuring the location is animated over time.\n\n- **Timeline Adjustment**: The script sets the scene's frame end to match the end of the animation, so that the playback stops at the appropriate time.\n\nTo use this script, simply open Blender, open a new text"
    },
    {
        "Text Input": "A sphere jumps up and lands.",
        "Blender Script": "Below is a Blender Python script to animate a simple jumping sphere:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and add a new sphere\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nsphere = bpy.context.active_object\n\n# Set the total frame length\nframe_start = 1\nframe_peak = 20\nframe_end = 40\n\n# Set the initial keyframe for the sphere\nsphere.location.z = 1  # The sphere starts at z = 1\nsphere.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Move to the peak of the jump\nsphere.location.z = 5  # The sphere jumps to z = 5\nsphere.keyframe_insert(data_path=\"location\", frame=frame_peak)\n\n# Move back to the ground\nsphere.location.z = 1  # Land back at starting height\nsphere.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Add some easing to make the jump smoother\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        x = keyframe.co.x\n        if x == frame_peak:\n            keyframe.interpolation = 'EASE_IN_OUT'\n        else:\n            keyframe.interpolation = 'LINEAR'\n\n# Optional: set camera and lighting for better visualization\nbpy.ops.object.camera_add(location=(10, -10, 10), rotation=(math.radians(60), 0, math.radians(45)))\nbpy.context.scene.camera = bpy.context.object\n\nbpy.ops.object.light_add(type='SUN', location=(10, -10, 10))\n\n# Set playback range and play the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.ops.screen.animation_play()\n```\n\nThis script performs the following tasks:\n\n1. Deletes all existing mesh objects in the scene.\n2. Adds a UV sphere at a starting height of `z=1`.\n3. Sets keyframes to animate a jump where the sphere reaches a peak height of `z=5` and then returns to `z=1`.\n4. Sets interpolation for the keyframes to create smooth"
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cube orbits around another object, we first need to set up the scene with two objects: the central object and the cube that will orbit around it. We can use the built-in animation features in Blender to achieve the orbiting effect.\n\nHere's a script to accomplish this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create the central object (e.g., a sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncentral_obj = bpy.context.active_object\ncentral_obj.name = \"CentralObject\"\n\n# Create the orbiting object (a cube)\nbpy.ops.mesh.primitive_cube_add(size=0.5, enter_editmode=False, align='WORLD', location=(2, 0, 0))\norbiting_cube = bpy.context.active_object\norbiting_cube.name = \"OrbitingCube\"\n\n# Define animation parameters\nframe_start = 1\nframe_end = 250\norbit_radius = 2\norbit_speed = 0.1 # radians per frame\n\n# Set the animation frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Function to set the position of the cube in its orbit\ndef update_cube_location(frame_num, cube, center, radius, speed):\n    angle = speed * frame_num\n    new_x = center.location.x + math.cos(angle) * radius\n    new_y = center.location.y + math.sin(angle) * radius\n    cube.location = (new_x, new_y, cube.location.z)\n    cube.keyframe_insert(data_path=\"location\", frame=frame_num)\n\n# Insert keyframes for each frame in the animation\nfor frame in range(frame_start, frame_end + 1):\n    update_cube_location(frame, orbiting_cube, central_obj, orbit_radius, orbit_speed)\n\n# Optionally, add some light for better visualization and a camera\nbpy.ops.object.light_add(type='SUN', location=(10, 10, 10))\nsun = bpy.context.active_object\nsun.name = \"SunLight\"\n\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(7, -"
    },
    {
        "Text Input": "A torus slides from top to bottom.",
        "Blender Script": "Certainly! Below is a simple Blender Python script using Blender's `bpy` module to animate a torus sliding from the top to the bottom along the Z-axis.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 10))\ntorus = bpy.context.active_object\n\n# Set keyframes for animation\n# Start at frame 1, position at the top\nbpy.context.scene.frame_start = 1\ntorus.location = (0, 0, 10)\ntorus.keyframe_insert(data_path=\"location\", index=-1)\n\n# Define the end frame and position at the bottom\nbpy.context.scene.frame_end = 100\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set interpolation to linear to ensure constant speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optional: Set the playback range\nbpy.context.scene.frame_set(1)\n```\n\n### How to Use the Script\n\n1. Open Blender.\n2. Navigate to the Scripting workspace.\n3. Create a new text block or open an existing one.\n4. Copy and paste the script into the text editor.\n5. Click the \"Run Script\" button to execute.\n\n### Explanation\n\n- **Scene Setup:** The script begins by clearing the existing scene to ensure a fresh start.\n- **Torus Creation:** It adds a torus to the scene and sets its initial position at the coordinates `(0, 0, 10)`, which is above the origin along the Z-axis.\n- **Animation:** Keyframes are inserted at frame 1, starting with the torus at the top. By frame 100, the torus moves to the `(0, 0, 0)` position.\n- **Linear Interpolation:** This ensures the torus slides down at a constant speed.\n- **Frames:** The script sets the start and end frames of the animation, and optionally makes sure the scene playback starts at the first frame.\n\nBy running this script, the torus will slide uniformly from the top to the bottom of the Z-axis over the course of 100 frames. Feel"
    },
    {
        "Text Input": "A monkey moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a monkey (Suzanne) moving diagonally upwards, we will first need to set up the monkey model in our Blender scene. Then, we can use Blender's animation system within Python to animate it. Here is a complete script that does this:\n\n```python\nimport bpy\n\n# Clear existing meshes and objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create the monkey (Suzanne) mesh\nbpy.ops.mesh.primitive_monkey_add(size=1.0, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set start and end frames\nstart_frame = 1\nend_frame = 50\n\n# Set the initial location for the monkey\ninitial_location = (0, 0, 0)\nfinal_location = (5, 5, 5)  # Move diagonally upwards\n\n# Set the initial location keyframe\nmonkey.location = initial_location\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the final location keyframe\nmonkey.location = final_location\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to linear for smooth diagonal movement\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Optionally, you can add rotation or scale keyframes for the animation\n# Uncomment the lines below to add rotation\n# for frame in range(start_frame, end_frame + 1):\n#     monkey.rotation_euler = (0, 0, 0.1 * frame)\n#     monkey.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n\nprint(\"Monkey diagonal animation setup complete!\")\n```\n\n### Explanation:\n1. **Scene Clearing**: The script begins by selecting and deleting any existing objects in the scene to start with a clean slate.\n\n2. **Add Suzanne**: Create a new Suzanne mesh at the origin `(0, 0, 0)`.\n\n3. **Define Keyframes**: The animation runs from `start_frame` to `end_frame`. Keyframes are set at the beginning and at the end to specify the initial and final positions respectively.\n\n4. **Movement**: `initial_location` is `(0"
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "To create a Blender Python script where a torus orbits around another object, we can use Blender's bpy module to script this behavior. Here's a script that sets up a scene with a torus orbiting around a UV sphere.\n\n```python\nimport bpy\nimport math\n\ndef create_scene():\n    bpy.ops.wm.read_factory_settings(use_empty=True)\n    \n    # Create a UV Sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=1, location=(0, 0, 0))\n    sphere = bpy.context.object\n    sphere.name = \"Center_Sphere\"\n\n    # Create a Torus\n    bpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.3, location=(3, 0, 0))\n    torus = bpy.context.object\n    torus.name = \"Orbiting_Torus\"\n    \n    # Create an empty object to use as the pivot for rotation\n    bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\n    empty = bpy.context.object\n    empty.name = \"Rotation_Center\"\n\n    # Parent the torus to the empty object\n    torus.parent = empty\n\n    # Setup animation for the empty to make the torus orbit around the sphere\n    bpy.context.scene.frame_start = 0\n    bpy.context.scene.frame_end = 250\n    \n    # Set initial keyframe\n    empty.rotation_euler = (0, 0, 0)\n    empty.keyframe_insert(data_path='rotation_euler', frame=0)\n    \n    # Set keyframe at end of animation\n    empty.rotation_euler = (0, 0, 2 * math.pi)\n    empty.keyframe_insert(data_path='rotation_euler', frame=250)\n    \n    # Set interpolation type\n    for fcurve in empty.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\ncreate_scene()\n```\n\nHere's what the script does:\n\n1. **Reset the Scene**: It begins by resetting the scene to its factory settings, ensuring an empty scene to work with.\n\n2. **Add Objects**: A UV sphere and a torus are added to the scene. The UV sphere serves as the object around which the torus orbits.\n\n3. **Create"
    },
    {
        "Text Input": "A torus tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a torus tilting back and forth, follow these steps:\n\n1. First, ensure Blender's `bpy` module is imported, and that you are working within Blender's scripting environment.\n\n2. You will create a torus object, and then animate its rotation to achieve a tilting effect.\n\nHere's a simple script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n\n# Get the torus object\ntorus = bpy.context.object\n\n# Set up animation parameters\nstart_frame = 1\nend_frame = 120\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\ntilt_angle = math.radians(45)  # Tilt angle in radians\n\n# Animation keyframes setup\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Tilt to 45 degrees at the quarter of the animation\ntorus.rotation_euler = (tilt_angle, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=(start_frame + end_frame) / 4)\n\n# Tilt back to center at the halfway point\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=(start_frame + end_frame) / 2)\n\n# Tilt in the opposite direction at three quarters of the animation\ntorus.rotation_euler = (-tilt_angle, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=(3 * start_frame + end_frame) / 4)\n\n# Return to the original position at the end of the animation\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Optional: Set interpolation type to make it smoother\nfor fc in torus.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'SINE"
    },
    {
        "Text Input": "A plane spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a plane spin and scale up, you'll need to use Blender's Python API to define an animation that adjusts the rotation and scale of the plane. Below is an example script that accomplishes this. Make sure you have Blender open while running this script, and ensure that your scripting environment is set up correctly in Blender.\n\n```python\nimport bpy\n\n# Ensure default environment\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a plane to the scene\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set the timeline\nstart_frame = 1\nend_frame = 100\n\n# Keyframe for rotation (start)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Keyframe for rotation (end) - Rotate 360 degrees around the Z-axis\nplane.rotation_euler = (0, 0, 6.28319) # 360 degrees in radians\nplane.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Keyframe for scale (start)\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Keyframe for scale (end) - Scale up uniformly by a factor of 3\nplane.scale = (3, 3, 3)\nplane.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation type to linear for both rotation and scaling\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete. The plane will spin and scale up from frame {} to {}.\".format(start_frame, end_frame))\n```\n\nThis script performs the following actions:\n\n1. **Clears the Scene**: Sets up a new, empty scene by resetting Blender's environment.\n2. **Adds a Plane**: A plane is created at the origin of the scene.\n3. **Defines Start and End Frames**: Specifies the range of the animation from frame 1 to frame 100.\n4. **Animates Rotation**: The plane is set to rotate 360 degrees around the Z-axis across the specified frames.\n5. **Animates Scaling**: The"
    },
    {
        "Text Input": "A cube oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a cube oscillate in a sine wave, you'll need to use Blender's Python API to manipulate object transformations over frames. The following script sets up such an animation:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects first\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Amplitude and frequency for the sine wave\namplitude = 2.0\nfrequency = 1.0\n\n# Animate the cube's movement along the z-axis in a sine wave pattern\nfor frame in range(start_frame, end_frame + 1):\n    # Calculate the sine wave value\n    z = amplitude * math.sin(frequency * (frame * math.pi / 25))\n    \n    # Set the cube's location for the current frame\n    cube.location = (0, 0, z)\n    \n    # Insert a keyframe for the cube's location\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Optionally, play with other transformations, such as rotation for additional effect\n# Reset to the starting frame\nbpy.context.scene.frame_set(start_frame)\n```\n\n### Instructions for Using the Script:\n\n1. **Open Blender**: Launch Blender on your machine.\n\n2. **Open a Text Editor**: In Blender, switch to the 'Scripting' workspace to access the Text Editor.\n\n3. **Paste the Script**: Clear any existing text in the editor and paste the script above.\n\n4. **Run the Script**: Click the 'Run Script' button. The script will add a cube and animate its movement in a sine wave along the z-axis over 250 frames.\n\n5. **Playback the Animation**: Switch to the 'Layout' workspace and use the timeline to see the cube oscillate over time.\n\nThis script removes any existing objects, creates a new cube, and animates its vertical position with a sine wave function using specified amplitude and frequency parameters. You can adjust these parameters as desired to alter the wave's characteristics."
    },
    {
        "Text Input": "A monkey tilts back and forth.",
        "Blender Script": "To create a Blender script that causes a monkey (Suzanne) to tilt back and forth, you'll typically want to animate the monkey head using keyframes. Below is a Python script that will add a monkey head to the scene and animate it to rotate back and forth around the X-axis.\n\n```python\nimport bpy\n\n# Clean up existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey (Suzanne) to the scene\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the start and end frames for the animation\nframe_start = 1\nframe_end = 24\n\n# Set the tilting amplitude in degrees\ntilt_amplitude = 30  # degrees\n\n# Function to convert degrees to radians\ndef deg_to_rad(degrees):\n    from math import radians\n    return radians(degrees)\n\n# Insert keyframes for the tilting animation\nbpy.context.scene.frame_set(frame_start)\nmonkey.rotation_euler.x = deg_to_rad(tilt_amplitude)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\nbpy.context.scene.frame_set(frame_start + (frame_end - frame_start) // 2)\nmonkey.rotation_euler.x = deg_to_rad(-tilt_amplitude)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\nbpy.context.scene.frame_set(frame_end)\nmonkey.rotation_euler.x = deg_to_rad(tilt_amplitude)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n# Set the end frame of the animation timeline\nbpy.context.scene.frame_end = frame_end\n\n# Set interpolation for smoother motion\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\nprint(\"Animation created: Monkey tilting back and forth.\")\n```\n\n### Instructions to Use the Script:\n\n1. Open Blender.\n2. Go to the \"Scripting\" workspace or open a new Text Editor window.\n3. Create a new text data block and paste the script into it.\n4. Ensure you're in Object Mode.\n5. Run the script by clicking the \"Run Script\" button.\n\n### Explanation"
    },
    {
        "Text Input": "A sphere rotates on the X-axis.",
        "Blender Script": "To create a simple Blender Python script that animates a sphere rotating around the X-axis, you can use the following code:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object  # the newly created sphere\n\n# Set the number of frames for the rotation\ntotal_frames = 250\n\n# Set the start frame and initial rotation\nstart_frame = 1\nbpy.context.scene.frame_start = start_frame\n\n# Set the end frame for the animation\nend_frame = total_frames\nbpy.context.scene.frame_end = end_frame\n\n# Keyframe the initial rotation (0 degrees)\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Keyframe the final rotation (360 degrees)\n# Full rotation around the X-axis\nsphere.rotation_euler = (6.28319, 0, 0)  # 360 degrees in radians\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation mode to linear for constant speed\n# Without this, the default is bezier, which causes slow in/out\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete: Sphere rotating around the X-axis.\")\n```\n\nHere's what the above script does:\n\n1. **Clears Existing Objects**: It removes any existing objects in the scene to start fresh.\n\n2. **Adds a Sphere**: It creates a new UV sphere at the origin (0, 0, 0).\n\n3. **Sets Up Animation Frames**: The script specifies the start and end frames for the animation.\n\n4. **Adds Initial and Final Keyframes**: It keys the initial and final rotation positions of the sphere to rotate around the X-axis by 360 degrees (full rotation).\n\n5. **Sets Linear Interpolation**: To ensure the sphere rotates at a constant speed, it changes the keyframe interpolation to linear.\n\nTo run this script:\n\n1. Open Blender.\n2. Switch to the Scripting workspace.\n3. Create a new text block"
    },
    {
        "Text Input": "A cube jumps up and lands.",
        "Blender Script": "To create an animation in Blender where a cube jumps up and then lands, you can use the Blender Python API to script the creation of this animation. Here's a basic script that will set up a jumping cube animation:\n\n```python\nimport bpy\n\n# Ensure the default cube is selected\ncube = bpy.data.objects.get(\"Cube\")\nif cube is None:\n    # If there's no default cube, add a new one\n    bpy.ops.mesh.primitive_cube_add()\n    cube = bpy.context.active_object\n\n# Set the cube to the origin\ncube.location = (0, 0, 0)\n\n# Set initial keyframe\ncube.keyframe_insert(data_path=\"location\", frame=1)\n\n# Set the cube to jump up at frame 20\ncube.location = (0, 0, 2)\ncube.keyframe_insert(data_path=\"location\", frame=20)\n\n# Set the cube back to the ground at frame 40\ncube.location = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=40)\n\n# Make the jump animation smoother with interpolation\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Optionally, change the end frame to be just after the animation\nbpy.context.scene.frame_end = 50\n\n# Play the animation automatically (optional)\nbpy.ops.screen.animation_play()\n\n```\n\nTo use this script, you can open Blender, go to the Scripting tab, create a new script, paste the code, and run it. This will create a simple jumping animation for the default cube object.\n\nHere's a quick breakdown of what this script does:\n- It checks for the default cube object, and if it doesn't exist, it creates a new one.\n- It sets keyframes for the cube's location: starting at frame 1 at the origin, jumping to a height of 2 units at frame 20, and landing back at the ground at frame 40.\n- It smooths the animation using B\u00e9zier interpolation for a more natural motion.\n- It sets the end of the animation timeline to frame 50 for a quick review.\n- It plays the animation to see the result immediately.\n\nFeel free to adjust the frames and height as you see fit for your specific needs!"
    },
    {
        "Text Input": "A torus moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a torus in a spiral motion, follow these steps. This script sets up a torus and applies a spiral animation by manipulating its location over time.\n\nHere's a script you can use in Blender's scripting editor:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Define animation parameters\nframe_count = 250\nspiral_radius = 0.1\nz_increment = 0.05\nspirals = 5\n\n# Add keyframes to animate the torus in a spiral motion\nfor frame in range(frame_count):\n    # Calculate the angle based on the current frame and total spirals\n    angle = 2 * math.pi * spirals * (frame / frame_count)\n\n    # Calculate the position of the torus\n    x = spiral_radius * frame * math.cos(angle)\n    y = spiral_radius * frame * math.sin(angle)\n    z = z_increment * frame\n\n    # Set the torus location\n    torus.location = (x, y, z)\n    \n    # Insert keyframes for location\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = frame_count\n\n# Set the playback range to match the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frame_count\n```\n\n### Instructions\n1. Open Blender and navigate to the Scripting workspace.\n2. Create a new script and copy the code above into the text editor.\n3. Run the script by clicking the 'Run Script' button.\n\n### Explanation\n- **Clearing Existing Objects**: The script begins by removing all objects in the scene to provide a clean slate for the animation.\n- **Creating a Torus**: A torus is added to the scene using `bpy.ops.mesh.primitive_torus_add()`.\n- **Defining Animation Parameters**: Parameters control the number of frames, the spiral radius, and the vertical increment for each frame of the motion.\n- **Animation Loop**: The script calculates the position of the torus for each frame using"
    },
    {
        "Text Input": "A sphere moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a sphere moves from left to right, you can use the following Python script. This script sets up the scene, adds a sphere, and animates its movement across the screen.\n\n```python\nimport bpy\n\n# Clear existing mesh objects in the scene (if any)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere at the starting position\nbpy.ops.mesh.primitive_uv_sphere_add(location=(-5, 0, 0))\nsphere = bpy.context.object\n\n# Set the sphere's name for clarity\nsphere.name = \"MovingSphere\"\n\n# Define the total number of frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Set the start and end frames for the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set initial keyframe for the sphere's location\nsphere.location.x = -5\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set final keyframe for the sphere's location to move it to the right\nsphere.location.x = 5\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optional: Set the frame rate (e.g., 24 frames per second)\nbpy.context.scene.render.fps = 24\n\n# Optionally, set the render dimensions\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.resolution_percentage = 100\n\n# Print message when done\nprint(\"Setup complete: The sphere will move from left to right over 100 frames.\")\n```\n\nInstructions for using the script:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text file in the text editor panel and paste the script.\n3. Press \"Run Script\" to execute.\n\nThis script will create a UV sphere and animate it linearly from the x-coordinate -5 to 5 over 100 frames. You can adjust `start_frame`, `end_frame`, and other parameters like location to suit your needs. The animation will render at 24 frames per second with a resolution of 1920x1080, which you can also change."
    },
    {
        "Text Input": "A sphere slides from top to bottom.",
        "Blender Script": "Certainly! To simulate a sphere sliding from the top to the bottom, you'll need to create a simple animation script using Blender's Python API (bpy). The script will create a sphere and animate it along a downward path. The path can be defined either by using keyframe animation or using a physics simulation.\n\nHere's a basic script to set up this animation using keyframes:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 10))\nsphere = bpy.context.object\nsphere.name = \"SlidingSphere\"\n\n# Set the number of frames for the animation\nstart_frame = 1\nend_frame = 60\nbpy.context.scene.frame_end = end_frame\n\n# Define the starting and ending positions\nstart_location = (0, 0, 10)\nend_location = (0, 0, 0)\n\n# Move to the starting frame\nbpy.context.scene.frame_set(start_frame)\n\n# Set the starting position keyframe\nsphere.location = start_location\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Move to the ending frame\nbpy.context.scene.frame_set(end_frame)\n\n# Set the ending position keyframe\nsphere.location = end_location\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up basic linear interpolation for the animation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation of a sliding sphere is set up.\")\n```\n\n### Instructions for Using the Script\n1. **Open Blender**.\n2. **Change to the Scripting Layout** - This gives you a Text Editor and access to the Python console.\n3. **Create a New Text Block** in the Text Editor and paste the script above.\n4. **Run the Script** by clicking the 'Run Script' button. This will create a new sphere and animate it from `z=10` to `z=0` over 60 frames.\n\n### Notes\n- The script initializes by clearing the current scene to ensure only the animation we create appears.\n- It creates a sphere and positions it at `z=10`.\n- The animation consists of keyframes set"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that creates a monkey mesh (Suzanne) and sets it to continuously rotate around the X-axis:\n\n```python\nimport bpy\n\n# Delete default objects for a clean start\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey (Suzanne) mesh\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120  # 120 frames for a full rotation over 5 seconds at 24 fps\n\n# Clear existing keyframes\nmonkey.animation_data_clear()\n\n# Insert keyframes for rotating the monkey on the X-axis\nmonkey.rotation_euler = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=0)\n\nmonkey.rotation_euler = (6.28319, 0, 0)  # 6.28319 radians is equivalent to 360 degrees\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=120, index=0)\n\n# Set animation interpolation to linear for constant speed rotation\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the playback range and start playback\nbpy.context.scene.frame_current = 1\nbpy.ops.screen.animation_play()\n```\n\n### Instructions:\n- Open Blender and go to the scripting tab.\n- Create a new text block and paste the script above.\n- Run the script.\n\nThe script will:\n1. Clear the scene of any default objects.\n2. Add a monkey mesh at the origin.\n3. Set a 5-second animation (120 frames at 24 fps) that rotates the monkey 360 degrees around the X-axis.\n4. Sets keyframes for the rotation at the beginning and end of the animation.\n5. Adjusts the animation to use linear interpolation to ensure constant rotation speed.\n6. Starts the animation playback in the Blender viewport.\n\nThe monkey should continuously rotate around the X-axis when you play the animation. Adjust the frame range or speed as needed."
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a cone zoom in and out, you can animate its scale property. The following script accomplishes this by creating a cone, then adding a scaling animation that makes it zoom in and out repeatedly.\n\nHere's a step-by-step script:\n\n```python\nimport bpy\nimport math\n\n# Define the number of frames for a full zoom in and out cycle\nfull_cycle_frames = 60\n\n# Remove default objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.0, radius2=0.0, depth=2.0, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Define a function to perform the scaling animation\ndef set_scale_keyframes(obj, start_frame, full_cycle_frames):\n    bpy.context.scene.frame_end = start_frame + full_cycle_frames * 2\n\n    for i in range(0, full_cycle_frames * 2, full_cycle_frames):\n        # Set scale to 1 (original size) at start and end of full cycle\n        scale = 1.0 if i % (full_cycle_frames * 2) == 0 else 2.0\n        \n        obj.scale = (scale, scale, scale)\n        obj.keyframe_insert(data_path=\"scale\", frame=start_frame + i)\n    \n    # Create the necessary keyframes for scaling\n    obj.scale = (1.0, 1.0, 1.0)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n    obj.scale = (2.0, 2.0, 2.0)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame + full_cycle_frames//2)\n\n    obj.scale = (1.0, 1.0, 1.0)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame + full_cycle_frames)\n\n# Generate the animation\nset_scale_keyframes(cone, start_frame=1, full_cycle_frames=full_cycle_frames)\n\n# Set interpolation to linear for the animation\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Finished creating zoom animation"
    },
    {
        "Text Input": "A cone moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a cone moving diagonally upwards, you will need to use Blender's Python API to create a scene, add a cone object, and then animate its position over time. Here is an example script:\n\n```python\nimport bpy\n\n# Ensure a new scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set up animation keyframes for diagonal upward movement\n# Define start and end frames\nstart_frame = 1\nend_frame = 50\n\n# Start Position (at start_frame)\nstart_position = (0, 0, 0)\n\n# End Position (at end_frame), moving diagonally up\nend_position = (5, 5, 5)\n\n# Set keyframes on the cone's location\ncone.location = start_position\ncone.keyframe_insert(data_path=\"location\", frame=start_frame)\n\ncone.location = end_position\ncone.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation type for smoother motion (optional)\n# Access the animation curves\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'  # Options: 'CONSTANT', 'LINEAR', 'BEZIER'\n\n# Set scene to use the newly added cone and camera, adjust render settings if needed\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optional: Adjust camera and lighting for better visualization\nbpy.ops.object.camera_add(location=(10, -10, 10))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\ncamera.rotation_euler = (1.1, 0, 0.8)\n\n# Optional: Add a light source\nbpy.ops.object.light_add(type='SUN', location=(10, 10, 10))\n\n# Render settings (optional)\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"//render\"\n\n# Save the blend file, if required\n# bpy.ops.wm.save_as_mainfile(filepath=\"animation_of_cone.blend\")\n\nprint(\"Animation script complete. Play animation in the"
    },
    {
        "Text Input": "A monkey wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne, the default monkey mesh in Blender) wiggle side to side, you'll want to animate the rotation of the monkey around the Z-axis. This can be done by setting keyframes for the rotation properties. Here's a script that achieves that:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh and object data\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=2, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the initial frame\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60  # 2-second loop at 30 FPS\n\n# Define the wiggle animation parameters\nframes_per_wiggle = 10  # Number of frames per wiggle (half cycle)\nwiggle_angle = math.radians(15)  # Wiggle angle in radians (15 degrees)\n\n# Set keyframes for a wiggle animation\nfor i in range(0, bpy.context.scene.frame_end + 1, frames_per_wiggle):\n    # Calculate the toggle angle based on even or odd cycle\n    angle = wiggle_angle if (i // frames_per_wiggle) % 2 == 0 else -wiggle_angle\n\n    # Rotate the monkey and set keyframe\n    monkey.rotation_euler = (0, 0, angle)\n    monkey.keyframe_insert(data_path=\"rotation_euler\", index=2, frame=i)  # Index 2 refers to Z-axis\n\n# Set interpolation type to linear for consistent speed\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Wiggle animation is set up.\")\n```\n\n### Explanation:\n- The script first clears existing mesh data and adds a new Suzanne (monkey) mesh to the scene.\n- The animation is spread across 60 frames (which equates to a 2-second animation loop at 30 FPS).\n- A wiggle is achieved by rotating Suzanne's Z-axis every 10 frames to alternate between a positive and negative angle, creating the wiggle effect.\n- The keyframes are inserted using `key"
    },
    {
        "Text Input": "A monkey moves in a spiral motion.",
        "Blender Script": "To create a script in Blender where a monkey (Suzanne mesh) moves in a spiral motion, we can achieve this by animating the position of the monkey along a mathematically defined spiral path. We can use the `bpy` module in Blender to script this animation. Below is a detailed script that creates a spiral motion for the monkey:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey (Suzanne) mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set the total frames for the animation\ntotal_frames = 250\nbpy.context.scene.frame_end = total_frames\n\n# Set spiral parameters\nnum_turns = 3  # Number of spiral turns\nheight = 5     # Total height gain\nradius_expansion = 1.5  # Spiral expansion factor\n\n# Animate the monkey in a spiral path\nfor frame in range(total_frames):\n    # Calculate angle and radius\n    angle = 2 * math.pi * num_turns * frame / total_frames\n    radius = radius_expansion * frame / total_frames\n    \n    # Determine the X, Y, and Z coordinates\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    z = height * frame / total_frames\n    \n    # Set the monkey's location\n    monkey.location = (x, y, z)\n    \n    # Insert a keyframe for the location\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the playback range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\n\n# Optionally, you might want to change the animation playback settings\nbpy.context.scene.render.fps = 30\n\n# Save the animation as a video (optional)\n# bpy.context.scene.render.image_settings.file_format = 'FFMPEG'\n# bpy.context.scene.render.filepath = \"//spiral_monkey.mp4\"\n# bpy.ops.render.render(animation=True)\n\nprint(\"Spiral animation of the monkey is set up.\")\n```\n\n### How the Script Works:\n- **Importing Modules**: We import the essential `bpy` and `math` modules"
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a plane scale up and down, you can use Blender's Python API to manipulate the plane's properties. Below is a script that will create a plane and animate its scale using keyframes:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set up the scaling animation\n# Number of frames for the whole animation\ntotal_frames = 100\nscaling_factor = 1.5  # Scale up to this factor\n\n# Scale up\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path='scale', frame=1)\n\nplane.scale = (scaling_factor, scaling_factor, 1)\nplane.keyframe_insert(data_path='scale', frame=total_frames / 2)\n\n# Scale down\nplane.scale = (1, 1, 1)\nplane.keyframe_insert(data_path='scale', frame=total_frames)\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\n\n# Set the animation to loop (if desired)\n# Uncomment the lines below to make the animation loop indefinitely\n# bpy.context.scene.frame_start = 1\n# bpy.context.scene.frame_end = total_frames\n# for fcurve in plane.animation_data.action.fcurves:\n#     fcurve.modifiers.new(type='CYCLES')\n\nprint(\"Animation setup complete. Press Spacebar to play the animation.\")\n```\n\nThis script performs the following actions:\n\n1. Clears all existing objects in the scene.\n2. Adds a plane at the origin.\n3. Sets up a scaling animation that animates the scale of the plane from its original size to a specified scaling factor and back.\n4. Inserts keyframes at frames `1`, `total_frames/2`, and `total_frames`.\n5. Optionally, includes code to loop the animation, which is commented out.\n\nTo execute this script in Blender:\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block and paste this script into it.\n3. Press the \"Run Script\" button to run it.\n\nThis will animate the plane scaling"
    },
    {
        "Text Input": "A sphere spins and scales up.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a sphere, and then sets up an animation for it to spin around its Z-axis while also scaling up over time.\n\n```python\nimport bpy\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set up animation frames\nstart_frame = 1\nend_frame = 120  # 5 seconds animation at 24 fps\n\n# Initial scale and rotation\nsphere.scale = (1, 1, 1)\nsphere.rotation_euler = (0, 0, 0)\n\n# Set keyframes for scale and rotation at start_frame\nsphere.keyframe_insert(data_path=\"scale\", frame=start_frame)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set final scale and rotation values\nsphere.scale = (2, 2, 2)  # Scale up the sphere\nsphere.rotation_euler = (0, 0, 6.28319)  # Spin 360 degrees in radians\n\n# Set keyframes for scale and rotation at end_frame\nsphere.keyframe_insert(data_path=\"scale\", frame=end_frame)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Change frame range for the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.frame_set(start_frame)\n\nprint(\"Animation setup complete. Sphere will spin and scale up.\")\n```\n\nHere\u2019s a breakdown of what the script does:\n\n1. **Create a Sphere**: It uses Blender's built-in operator to add a UV sphere to the scene.\n\n2. **Animation Setup**:\n    - Sets the initial scale and rotation.\n    - Inserts keyframes for the initial state at `start_frame`.\n    - Calculates the final scale for the sphere and assigns a full rotation (360 degrees) in radians, which is approximately 6.28319, and inserts keyframes at `end_frame`.\n\n3. **Frame Settings**: Adjusts the start and end frames to define the animation length.\n\nTo execute this script, open Blender, go to the Scripting workspace, create a new text block, paste the script, and then click 'Run Script'. You can then play the animation in the Timeline to see the sphere spin and scale up. Adjust frame numbers and scaling"
    },
    {
        "Text Input": "A sphere orbits around another object.",
        "Blender Script": "To create a Blender Python script where a sphere orbits around another object, we can use the concept of parenting objects and using constraints for the animation. Below is a script that sets up a simple scene where a sphere orbits around a central object, which could be another sphere or any other mesh object.\n\n```python\nimport bpy\nimport math\n\ndef clear_scene():\n    # Clear the entire scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\ndef create_sphere(radius=1, location=(0,0,0), name=\"Sphere\"):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=location)\n    sphere = bpy.context.active_object\n    sphere.name = name\n    return sphere\n\ndef create_central_object(location=(0,0,0), name=\"Central_Object\"):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=location)\n    central_object = bpy.context.active_object\n    central_object.name = name\n    return central_object\n\ndef animate_orbit(sphere, central_object, start_frame=1, end_frame=250, orbit_radius=5):\n    # Set the sphere's initial location\n    sphere.location = (orbit_radius, 0, 0)\n    \n    # Parent the sphere to the central object to make it orbit\n    sphere.parent = central_object\n\n    # Add a Follow Path constraint\n    bpy.ops.curve.primitive_bezier_circle_add(radius=orbit_radius, location=central_object.location)\n    orbit_path = bpy.context.active_object\n    orbit_path.name = \"Orbit_Path\"\n\n    # Add the constraint to the sphere\n    follow_path_constraint = sphere.constraints.new(type='FOLLOW_PATH')\n    follow_path_constraint.target = orbit_path\n\n    # Define keyframes for path animation\n    bpy.context.scene.frame_set(start_frame)\n    follow_path_constraint.offset_factor = 0\n    sphere.keyframe_insert(data_path='constraints[\"Follow Path\"].offset_factor', frame=start_frame)\n    \n    bpy.context.scene.frame_set(end_frame)\n    follow_path_constraint.offset_factor = 1\n    sphere.keyframe_insert(data_path='constraints[\"Follow Path\"].offset_factor', frame=end_frame)\n\n    # Set the timeline range\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\ndef main():\n    clear_scene()\n    central_object = create_central_object()\n    sphere = create_sphere(name=\"Orbiting_Sphere"
    },
    {
        "Text Input": "A plane bounces like a ball.",
        "Blender Script": "Certainly! Here's a Python script for Blender that animates a plane to bounce like a ball. To use this script, make sure you've created a plane in Blender.\n\n```python\nimport bpy\nimport math\n\n# Ensure Blender is set to use keyframes\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 200\nbpy.context.scene.frame_current = 0\n\n# Access the plane object\nplane = bpy.data.objects.get(\"Plane\")\n\n# If the plane does not exist, create it\nif plane is None:\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.active_object\n\n# Animation variables\nbounce_height = 5.0\nground_level = 1.0\nbounce_speed = 20  # number of frames per bounce\n\n# Set up the bouncing animation\nfor frame in range(0, 200, bounce_speed):\n    # Calculate the bounce factor using a sine wave\n    z_location = ground_level + abs(bounce_height * math.sin(math.pi * frame / bounce_speed))\n    \n    # Set the frame and insert keyframe for plane's location\n    plane.location.z = z_location\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n    # Insert rotation keyframes for wobbling effect\n    plane.rotation_euler[0] = math.pi * 0.1 * math.sin(math.pi * frame / (bounce_speed / 2))\n    plane.rotation_euler[1] = math.pi * 0.1 * math.sin(math.pi * frame / (bounce_speed / 2))\n    plane.keyframe_insert(data_path=\"rotation_euler\", index=0, frame=frame)\n    plane.keyframe_insert(data_path=\"rotation_euler\", index=1, frame=frame)\n\n# To ensure smooth interpolation between keyframes, set interpolation to 'LINEAR'\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n```\n\nThis script sets an animation for a plane that makes it appear as if it is bouncing up and down like a ball. It uses sine wave calculations to determine the vertical position of the plane at any given frame, resulting in a smooth bouncing motion. Additionally, it applies a slight rotation to"
    },
    {
        "Text Input": "A cone orbits around another object.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cone and makes it orbit around a cube at the origin. The script uses simple animation techniques to achieve the orbit effect.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a cube at the origin to orbit around\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncentral_object = bpy.context.object\ncentral_object.name = 'CentralObject'\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(3, 0, 0))\ncone = bpy.context.object\ncone.name = 'OrbitingCone'\n\n# Ensure the scene has a camera and a light\nif not bpy.data.objects.get(\"Camera\"):\n    bpy.ops.object.camera_add(location=(10, -10, 10))\n    bpy.context.object.rotation_euler = (math.radians(60), 0, math.radians(45))\n\nif not bpy.data.objects.get(\"Light\"):\n    bpy.ops.object.light_add(type='SUN', location=(0, 0, 10))\n\n# Set the initial frame and keyframes for the orbit\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 250\ndiameter = 6\nframes = bpy.context.scene.frame_end\n\n# Insert keyframes for a complete revolution\nfor frame in range(frames + 1):\n    angle = 2 * math.pi * frame / frames  # Full circle (2 * PI radians) divided by number of frames\n    x = diameter * math.cos(angle)  # X position\n    y = diameter * math.sin(angle)  # Y position\n    cone.location = (x, y, 0)\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set animation playback to 'BEZIER' for smooth movement (optional)\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Render settings\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.filepath = \"//orbit_animation\"\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy"
    },
    {
        "Text Input": "A monkey bounces like a ball.",
        "Blender Script": "To create a script in Blender where a monkey (using the default monkey mesh object) bounces like a ball, you can use the following Python script. This script will animate the monkey mesh to simulate a bouncing motion.\n\nHere's the script:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set initial position above the ground\nmonkey.location = (0, 0, 5)\n\n# Define bounce parameters\nbounce_height = 5\nbounce_durations = [15, 12, 9, 6, 3]  # Frame duration for each bounce\n\n# Set keyframes for bounce animation\ncurrent_frame = 1\nbpy.context.scene.frame_start = current_frame\n\nfor i, duration in enumerate(bounce_durations):\n    # Calculate peak and ground position\n    peak_position = bounce_height / (i + 1)\n    ground_position = 0\n\n    # Bounce up\n    monkey.location.z = peak_position\n    monkey.keyframe_insert(data_path=\"location\", index=2, frame=current_frame + duration // 2)\n\n    # Bounce down\n    current_frame += duration\n    monkey.location.z = ground_position\n    monkey.keyframe_insert(data_path=\"location\", index=2, frame=current_frame)\n\n# Set end frame for the animation\nbpy.context.scene.frame_end = current_frame\n\n# Set the interpolation type to linear for consistent bounce speed\nfor fc in monkey.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Monkey bounce animation complete.\")\n```\n\n**Instructions:**\n\n1. Open Blender and go to the Scripting workspace.\n2. Create a new text block and paste the script above.\n3. Run the script by clicking the 'Run Script' button or pressing `Alt + P`.\n\nThis script will delete all existing objects in the scene, add a new monkey object, and create a simple bouncing motion animation. The monkey will bounce with diminishing height, simulating a natural bouncing motion. Adjust the `bounce_height` and `bounce_durations` array to fine-tune the bounce heights and timings"
    },
    {
        "Text Input": "A monkey slides from top to bottom.",
        "Blender Script": "To create a simple Blender Python script that simulates a monkey (Suzanne, the Blender test model) sliding from top to bottom, you will need to animate the movement along the Z-axis (vertical axis in Blender) over a period of time. Here is a script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add Suzanne the Monkey\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 5))\nmonkey = bpy.context.active_object\n\n# Set up a sliding path\nstart_z = 5\nend_z = 0\nduration = 100  # Total number of frames for the animation\n\n# Insert keyframes for the start position\nmonkey.location = (0, 0, start_z)\nmonkey.keyframe_insert(data_path=\"location\", frame=0)\n\n# Insert keyframes for the end position\nmonkey.location = (0, 0, end_z)\nmonkey.keyframe_insert(data_path=\"location\", frame=duration)\n\n# Set up animation interpolation to be linear for a steady slide\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optional: Automatic camera setup to view the slide\n# Clear existing cameras\nbpy.ops.object.select_by_type(type='CAMERA')\nbpy.ops.object.delete()\n\n# Create new camera\nbpy.ops.object.camera_add(location=(10, -10, 5))\ncamera = bpy.context.active_object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Set the camera as active\nbpy.context.scene.camera = camera\n\n# Define render settings\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = duration\nbpy.context.scene.render.fps = 24\n\nprint(\"Monkey slide animation setup complete.\")\n```\n\n### Explanation:\n- **Scene Setup**: The script deletes all existing objects and then adds Suzanne (the monkey head) to the scene.\n- **Animation**: The monkey starts at a height of 5 units and slides down to ground level (0 units) over `100` frames. Keyframes are inserted at the start and end points, and the interpolation is set to linear for"
    },
    {
        "Text Input": "A monkey oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script where a monkey oscillates in a sine wave, we will animate a Monkey object (Suzanne) to move along a sine wave path. The following script assumes you are using Blender 2.8 or later:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a Monkey mesh to the scene\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.object\nmonkey.name = \"OscillatingMonkey\"\n\n# Set the number of frames for the animation\ntotal_frames = 250\nbpy.context.scene.frame_end = total_frames\n\n# Animation parameters\namplitude = 2  # Controls how far the monkey oscillates up and down\nfrequency = 2  # Controls how many oscillations occur over the timeline\n\n# Animate the monkey's motion across the frames\nfor frame in range(total_frames):\n    # Set the current frame\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the sine wave value (vertical movement) and linear movement on the x-axis\n    x_pos = frame / 25  # Linear motion on the X-axis\n    y_pos = 0\n    z_pos = amplitude * math.sin(frequency * (x_pos + math.radians(frame)))\n    \n    # Set the monkey's location\n    monkey.location = (x_pos, y_pos, z_pos)\n    \n    # Insert keyframe for location\n    monkey.keyframe_insert(data_path=\"location\", index=-1)\n\n# Reset the frame to the first frame\nbpy.context.scene.frame_set(0)\n\nprint(\"Animation setup complete. Play the animation to see the monkey oscillate!\")\n```\n\n### How the Script Works:\n- **Setup**: It first clears the scene of any existing objects and adds a Monkey mesh.\n- **Animation Loop**: It loops through each frame of the animation, calculating the monkey's position based on a sine function. The `amplitude` controls the height of the wave, and `frequency` controls how often the wave oscillates over the frame range.\n- **Keyframing**: It sets the monkey's location and inserts a keyframe at each frame, capturing its position along the sine wave.\n- **Execution**: Execute this script in Blender's scripting editor to create the animation, and then you"
    },
    {
        "Text Input": "A cylinder expands and shrinks.",
        "Blender Script": "To create a Blender Python script that animates a cylinder expanding and shrinking, we'll need to set up keyframes that modify the cylinder's scale over time. Here's a script that does just that:\n\n```python\nimport bpy\n\n# Delete all existing objects first\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = \"ExpandingShrinkingCylinder\"\n\n# Set the frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Function to set scale keyframes for expansion and shrinkage\ndef set_scale_keyframes(obj, start_frame, end_frame, min_scale, max_scale):\n    frame_middle = (start_frame + end_frame) // 2\n\n    # Starting scale (shrinked)\n    obj.scale = (min_scale, min_scale, min_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n    # Middle frame scale (expanded)\n    obj.scale = (max_scale, max_scale, max_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame_middle)\n    \n    # Ending scale (back to shrinked)\n    obj.scale = (min_scale, min_scale, min_scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set keyframes to expand and shrink the cylinder\nset_scale_keyframes(\n    obj=cylinder,\n    start_frame=1,\n    end_frame=100,\n    min_scale=0.5,  # Shrinked (smallest size)\n    max_scale=2.0   # Expanded (largest size)\n)\n\n# Set the playback to be a loop to continuously see the expansion and shrinking\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\nbpy.context.scene.frame_current = 1\n\n```\n\nThis script will:\n- Create a new cylinder at the origin.\n- Delete any existing objects in the scene for a fresh start.\n- Set the animation to start at frame 1 and end at frame 100.\n- Define keyframes to alternate between a smaller and larger scale, creating an expansion and shrinking animation.\n- You can adjust the `min_scale` and `max_scale` variables in"
    },
    {
        "Text Input": "A plane spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a plane spin and scale up, you'll need to use Blender's Python API to set up an animation for these transformations. Below is a simple script that creates a plane, scales it up over time, and rotates it along its Z-axis.\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Clear previous objects\nclear_scene()\n\n# Add a new plane\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set keyframe on frame 1\nbpy.context.scene.frame_set(1)\nplane.scale = (1, 1, 1)\nplane.rotation_euler = (0, 0, 0)\nplane.keyframe_insert(data_path=\"scale\", index=-1)\nplane.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set keyframe on frame 100\nbpy.context.scene.frame_set(100)\nplane.scale = (5, 5, 5)\nplane.rotation_euler = (0, 0, math.radians(360))\nplane.keyframe_insert(data_path=\"scale\", index=-1)\nplane.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n\n# Set interpolation type to linear for smoother scaling and rotation\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = 100\n\n# Start the animation from the first frame\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_current = 1\n\n# Optionally play the animation\n# bpy.ops.screen.animation_play()\n\nprint(\"Plane animation setup complete.\")\n```\n\n### Explanation\n- **Clear Scene:** The script starts by clearing the scene of any existing objects to ensure a fresh workspace.\n- **Create Plane:** A new plane is added at the origin (0, 0, 0).\n- **Set Keyframes:**\n  - **Frame 1:** Sets the initial size and rotation of the plane. Scale at (1, 1, 1) and no rotation.\n  - **Frame 100:**"
    },
    {
        "Text Input": "A torus wiggles side to side.",
        "Blender Script": "Below is a Blender Python script that creates a torus and animates it to wiggle side to side. You can run this script in Blender's scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus object\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the number of frames for the animation\nnum_frames = 120\nbpy.context.scene.frame_end = num_frames\n\n# Define the wiggle properties\nwiggle_amplitude = 2  # How far the torus moves side to side\nwiggle_frequency = 2  # How fast the torus wiggles per cycle\n\n# Insert keyframes for the wiggle animation\nfor frame in range(num_frames + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the x position based on a sine wave\n    wiggle = wiggle_amplitude * math.sin(wiggle_frequency * 2 * math.pi * frame / num_frames)\n    \n    # Set the torus location and insert a keyframe for animation\n    torus.location.x = wiggle\n    torus.keyframe_insert(data_path=\"location\", index=0)\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\n### Explanation:\n1. **Clears Existing Meshes:** Deletes existing mesh objects to start clean.\n2. **Adds a Torus:** Uses `bpy.ops.mesh.primitive_torus_add` to create a new torus at the origin.\n3. **Sets Up Animation Frames:** Specifies the number of frames for the animation (120 frames).\n4. **Wiggle Calculation:** Computes the x-position of the torus based on a sine wave to create a smooth, wiggling motion. The amplitude and frequency of the sine wave determine the extent and speed of the wiggle.\n5. **Keyframe Insertion:** For each frame, it sets the torus's x-location and inserts a location keyframe.\n6. **Automatic Animation Playback:** Starts playing the animation once the script is executed.\n\nYou can adjust `wiggle_amplitude` and `wiggle_frequency` to modify the intensity and speed of the wiggle. To execute the script"
    },
    {
        "Text Input": "A cone bounces like a ball.",
        "Blender Script": "Creating a bouncing cone in Blender using Python scripting can be achieved by creating an animation that simulates a bouncing effect. Below is a script that you can run in Blender's scripting editor. Before running the script, make sure you understand that Blender's Python API can automate creating, modifying, and animating objects.\n\nHere\u2019s how you can create a bouncing cone animation:\n\n```python\nimport bpy\nimport math\n\n# Clear existing data\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2,  location=(0, 0, 1))\ncone = bpy.context.active_object\n\n# Set up basic animation parameters\nstart_frame = 1\nend_frame = 100\nbounce_height = 3\ngravity = 9.8\nbounces = 3\nfps = bpy.context.scene.render.fps  # Default is 24\n\n# Function to calculate bounce positions\ndef calculate_bouncing_positions(start_frame, end_frame, bounce_height, bounces, fps):\n    positions = []\n    frame_count = end_frame - start_frame\n    half_period = frame_count / (bounces * 2)\n    \n    for frame in range(frame_count + 1):\n        current_time = frame / fps\n        charge = math.fabs(math.sin(frame * math.pi / half_period))\n        height = bounce_height * charge\n        positions.append(height)\n    \n    return positions\n\n# Get bounce positions\npositions = calculate_bouncing_positions(start_frame, end_frame, bounce_height, bounces, fps)\n\n# Animate the cone\nfor frame_offset, height in enumerate(positions):\n    cone.location.z = height\n    current_frame = start_frame + frame_offset\n    cone.keyframe_insert(data_path=\"location\", index=2, frame=current_frame)\n\n# Set end frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Bouncing cone animation created.\")\n```\n\n### Instructions:\n\n1. Open Blender.\n2. Switch to the \"Scripting\" layout or open a new scripting editor.\n3. Create a new text block and paste the script above.\n4. Run the script using the \"Run Script\" button.\n\nThis script will:\n- Clear any existing data in the scene.\n- Add a cone to the center of the scene.\n- Compute a list of Z-axis positions that simulate a bouncing motion"
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "Below is a Blender Python script that creates a sphere and animates it to move in a circular path over 250 frames. The script sets up the scene, creates a sphere, and uses keyframe animation to make it follow a circular path around the origin.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(5, 0, 0))\nsphere = bpy.context.active_object\n\n# Set up animation properties\nnumber_of_frames = 250\nradius_of_circle = 5\ncenter_x, center_y = 0, 0  # Center of the circular path\n\n# Insert keyframes for the sphere's circular motion\nfor frame in range(number_of_frames + 1):\n    # Calculate the angle in radians\n    angle = (2 * math.pi * frame) / number_of_frames\n    \n    # Calculate the sphere's new position in the circular path\n    x = center_x + radius_of_circle * math.cos(angle)\n    y = center_y + radius_of_circle * math.sin(angle)\n    \n    # Set sphere location\n    sphere.location = (x, y, 0)\n    \n    # Insert a keyframe for the sphere's location\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the frame end for the animation\nbpy.context.scene.frame_end = number_of_frames\n\n# Optionally, set the animation to loop\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\nbpy.context.scene.render.ffmpeg.codec = 'H264'\nbpy.context.scene.render.ffmpeg.constant_rate_factor = 'HIGH'\nbpy.context.scene.render.fps = 24\n\n# Set the view to orthographic for better view of the circular path\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        for space in area.spaces:\n            if space.type == 'VIEW_3D':\n                space.region_3d.view_perspective = 'ORTHO'\n\n# (Optional) Set camera position\n# This setup assumes there's a default camera in the scene\ncamera = bpy.data.objects['Camera']\ncamera.location = (0, -10, "
    },
    {
        "Text Input": "A torus moves in a circular path.",
        "Blender Script": "Below is a Blender Python script which creates a torus object and animates it to move in a circular path. The script uses keyframes to animate the location of the torus object in the scene:\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing mesh objects\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Clear existing mesh objects\nclear_scene()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Animation parameters\nframe_start = 1\nframe_end = 250\nradius = 5\nnum_frames = frame_end - frame_start + 1\n\n# Set the animation frames\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the angle in radians for the current frame\n    angle = (frame - frame_start) * (2 * math.pi / num_frames)\n    \n    # Calculate the new x and y position for the torus\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    \n    # Move the torus to the new position\n    torus.location = (x, y, 0)\n    \n    # Insert a keyframe for the location at the current frame\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the animation timeline range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set the view to look at the torus's circular path for a better perspective\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        for region in area.regions:\n            if region.type == 'WINDOW':\n                ctx = bpy.context.copy()\n                ctx['area'] = area\n                ctx['region'] = region\n                bpy.ops.view3d.view_all(ctx)\n                break\n```\n\n### Script Explanation:\n\n1. **Clear Existing Objects**: The function `clear_scene` is used to delete any existing mesh objects in the scene to start fresh.\n\n2. **Add a Torus**: We add a torus to the scene at the origin `(0, 0, 0)` using `bpy.ops.mesh.primitive_torus_add()`"
    },
    {
        "Text Input": "A sphere rotates 360 degrees.",
        "Blender Script": "To create a Blender Python script that makes a sphere rotate 360 degrees, you can use the `bpy` module. This script will add a sphere to the scene and animate its rotation around the Z-axis for one complete revolution.\n\nHere's a step-by-step script for achieving this:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set keyframe insertion parameters\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Initial keyframe at start_frame\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set rotation to 360 degrees (2\u03c0 radians) on Z-axis at end_frame\nsphere.rotation_euler = (0, 0, 2 * 3.14159) # 2\u03c0 radians\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set interpolation type to linear for constant speed rotation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the current frame to start_frame so the animation is viewed from the start\nbpy.context.scene.frame_set(start_frame)\n```\n\nTo use this script:\n\n1. Open Blender.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text block and paste the script into it.\n4. Run the script by clicking the \"Run Script\" button.\n\nThis will add a sphere to the scene and animate it to rotate a full 360 degrees around the Z-axis over 250 frames, with linear interpolation for a smooth continuous rotation. You can adjust the `end_frame` variable to change the duration of the animation."
    },
    {
        "Text Input": "A cylinder bounces like a ball.",
        "Blender Script": "To simulate a cylinder bouncing like a ball in Blender using Python, you can use the Blender Python API (bpy) to set up the scene, animate the cylinder, and apply physics simulation. Below is a step-by-step script to create and animate a bouncing cylinder:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(\n    radius=0.5, depth=2, location=(0, 0, 1))\n\n# Get the reference to the cylinder\ncylinder = bpy.context.active_object\ncylinder.name = 'BouncingCylinder'\n\n# Set up the scene\nscene = bpy.context.scene\nscene.frame_start = 1\nscene.frame_end = 100\nscene.render.fps = 30\n\n# Set up keyframes for bouncing animation\ndef add_bounce_keyframes(obj, start_frame, end_frame, bounce_height):\n    current_frame = start_frame\n    frame_interval = (end_frame - start_frame) // 4\n\n    # Initial position at start frame\n    obj.location.z = bounce_height\n    obj.keyframe_insert(data_path=\"location\", frame=current_frame)\n\n    # Position at the lowest point (ground contact)\n    current_frame += frame_interval\n    obj.location.z = 0\n    obj.keyframe_insert(data_path=\"location\", frame=current_frame)\n\n    # Bounce back to height\n    current_frame += frame_interval\n    obj.location.z = bounce_height\n    obj.keyframe_insert(data_path=\"location\", frame=current_frame)\n\n    # Oscillate to rest (back to the ground)\n    current_frame += frame_interval\n    obj.location.z = 0.1  # Slightly above ground\n    obj.keyframe_insert(data_path=\"location\", frame=current_frame)\n\n    # Rest on ground\n    current_frame += frame_interval\n    obj.location.z = 0\n    obj.keyframe_insert(data_path=\"location\", frame=current_frame)\n\n# Add keyframes for bouncing\nadd_bounce_keyframes(cylinder, 1, 80, 3)\n\n# Add a floor for bouncing interaction\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nfloor = bpy.context.active_object\nfloor.name = 'Floor'\n\n#"
    },
    {
        "Text Input": "A cylinder orbits around another object.",
        "Blender Script": "To create a scene in Blender where a cylinder orbits around another object, we can write a Python script that makes use of Blender's `bpy` module. Below is an example script that sets up the scene:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a central object (e.g., UV Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncentral_object = bpy.context.active_object\ncentral_object.name = \"CentralObject\"\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(3, 0, 0))\ncylinder = bpy.context.active_object\ncylinder.name = \"OrbitingCylinder\"\n\n# Add an Empty to serve as the parent for the orbit\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\norbit_center = bpy.context.active_object\norbit_center.name = \"OrbitCenter\"\n\n# Parent the cylinder to the empty\ncylinder.parent = orbit_center\n\n# Define constants\norbit_radius = 3.0\norbit_speed = 1.0  # radians per second\n\n# Set up rotation animation\ndef animate_orbit(frame_start, frame_end, orbit_center, orbit_speed):\n    bpy.context.scene.frame_start = frame_start\n    bpy.context.scene.frame_end = frame_end\n    \n    # Insert keyframe at the start\n    orbit_center.rotation_euler[2] = 0\n    orbit_center.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n    # Insert keyframe at the end\n    orbit_center.rotation_euler[2] = 2 * math.pi * orbit_speed * ((frame_end - frame_start) / bpy.context.scene.render.fps)\n    orbit_center.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Animate from frame 1 to 250\nanimate_orbit(1, 250, orbit_center, orbit_speed)\n\n# Set interpolation to linear for continuous rotation\nfor fcurve in orbit_center.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete. The cylinder"
    },
    {
        "Text Input": "A cylinder spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a cylinder spin while floating, you will need to follow these steps:\n\n1. Setup the Blender environment.\n2. Create a cylinder.\n3. Animate the cylinder to spin and float effortlessly.\n\nHere's a simple script that does just that:\n\n```python\nimport bpy\nfrom math import radians\n\n# Delete all existing objects to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(location=(0, 0, 1))\n\n# Get the reference to the active object, which is our cylinder\ncylinder = bpy.context.active_object\n\n# Set the cylinder scale to make it more visually appealing\ncylinder.scale = (0.5, 0.5, 1.5)\n\n# Set the keyframes for floating and spinning animation\nframe_start = 1\nframe_end = 120  # Total animation frames\n\n# Insert keyframes for rotation (spinning)\ncylinder.rotation_euler = (0, 0, 0)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncylinder.rotation_euler = (0, 0, radians(360))\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Insert keyframes for height (floating)\ncylinder.location.z = 1\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_start)\n\ncylinder.location.z = 2\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_start + (frame_end - frame_start) / 2)\n\ncylinder.location.z = 1\ncylinder.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set interpolation to linear for constant speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the scene's end frame to the animation's end frame\nbpy.context.scene.frame_end = frame_end\n```\n\n### Explanation:\n- **Deleting Existing Objects**: The script starts by clearing the scene to ensure only the new cylinder is present.\n- **Creating a Cylinder**: A cylinder is added at the specified location and its scale is modified for better aesthetics.\n- **Animating Rotation**: Rotation keyframes are set to achieve a full "
    },
    {
        "Text Input": "A sphere moves in a spiral motion.",
        "Blender Script": "Below is a Blender Python script to animate a sphere moving in a spiral motion. The script creates a sphere, and then uses keyframes to animate its movement in a spiral pattern over a set period of frames.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set the animation parameters\nframes = 250\nspiral_loops = 3\nheight_increment = 0.1  # Height change per loop\n\n# Ensure animation data is available\nif not sphere.animation_data:\n    sphere.animation_data_create()\n\n# Create a spiral animation\nfor frame in range(frames):\n    # Calculate the angle for this frame\n    angle = 2 * math.pi * (spiral_loops * frame / frames)\n\n    # Calculate the x, y position\n    x = math.cos(angle) * frame / frames\n    y = math.sin(angle) * frame / frames\n\n    # Calculate the z position (height)\n    z = height_increment * frame / frames\n\n    # Set the location for the current frame\n    sphere.location = (x, y, z)\n\n    # Insert keyframe for the location\n    sphere.keyframe_insert(data_path='location', frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frames\n```\n\n### Instructions to Run the Script in Blender\n\n1. Open Blender.\n2. Open a new scripting tab/window.\n3. Copy the script above into the Blender text editor.\n4. Click on the 'Run Script' button.\n5. Play the animation using the timeline controls at the bottom of Blender.\n\n### Explanation\n\n- **Sphere Creation**: A UV sphere is created at the origin.\n- **Animation**: The script loops through a specified number of frames to calculate the x, y, and z positions of the sphere in a spiral pattern.\n  - **Spiral Logic**: The angle for the spiral is calculated by scaling the number of spiral loops over the total frames. The x and y coordinates are set using cosine and sine functions, respectively.\n  - **Vertical Movement**: The z-coordinate is linearly incremented per frame"
    },
    {
        "Text Input": "A sphere slides from top to bottom.",
        "Blender Script": "To create a Blender Python script in which a sphere slides from the top to the bottom, you can animate a sphere's position with keyframes on the Z-axis. Here is a basic script that sets up such an animation:\n\n```python\nimport bpy\n\n# Clear existing mesh and objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 10))\nsphere = bpy.context.object\nsphere.name = \"SlidingSphere\"\n\n# Set the start and end frames\nstart_frame = 1\nend_frame = 100\n\n# Set the sphere's initial position (Top)\nsphere.location = (0, 0, 10)\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the sphere's final position (Bottom)\nsphere.location = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to linear for a smooth slide\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Optionally set the scene's frame range to match the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the camera for a better view (optional)\nbpy.ops.object.camera_add(location=(10, -10, 10))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\ncamera.rotation_euler = (1.0, 0, 1.0)\n\nprint(\"Sphere sliding animation created successfully.\")\n```\n\nThis script does the following:\n\n1. Clears existing objects to start with a clean scene.\n2. Adds a sphere at a location high on the Z-axis to simulate a \"top\" position.\n3. Sets keyframes for the sphere at the start and end of the animation timeline, indicating the sphere's position at the beginning and the end.\n4. Configures the animation to use linear interpolation so the slide looks smooth.\n5. Optionally adjusts the scene's frame range to fit the animation and sets the camera angle for a better view.\n\nTo use the script, simply open Blender, switch to the Scripting tab, create a new script, paste the code and run it. Adjust the positions and frame numbers to"
    },
    {
        "Text Input": "A cylinder moves in a circular path.",
        "Blender Script": "To create a Blender Python script that makes a cylinder move in a circular path, you can animate the cylinder's position around a circle by using keyframes. In this script, we'll move a cylinder along the XZ plane in a circular path. Assuming you have Blender installed, you can run this script in Blender's Scripting Editor.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(2, 0, 1))\ncylinder = bpy.context.object\n\n# Set the number of frames for the animation\ntotal_frames = 120\nbpy.context.scene.frame_end = total_frames\n\n# Set the radius of the circular path\ncircle_radius = 5\n\n# Animate the cylinder's movement in a circular path\nfor frame in range(0, total_frames + 1):\n    # Calculate angle for the current frame\n    angle = (frame / total_frames) * 2 * math.pi\n    \n    # Calculate new position\n    x = circle_radius * math.cos(angle)\n    z = circle_radius * math.sin(angle)\n    \n    # Set the location for the current frame\n    cylinder.location = (x, 0, z)\n    \n    # Insert keyframe for the location\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Finished animating cylinder along a circular path.\")\n```\n\nInstructions:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the above code into the text editor.\n3. Press \"Run Script\" to execute the script.\n4. Switch to the \"Layout\" workspace, set the timeline to 0 and press the Play button to see the cylinder move along the circular path.\n\nThis script will animate the cylinder in a circular motion over a period defined by `total_frames`. The animation uses keyframes to update the cylinder's location at each frame. You can adjust `total_frames` and `circle_radius` as needed to modify the speed and size of the circular path, respectively."
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "To create a Blender Python script that animates a sphere to expand and shrink, you'll need to use Blender's scripting API to keyframe the scale property of a sphere object. Below is a script that adds a sphere to the scene and animates its scale over time.\n\n```python\nimport bpy\n\ndef create_animated_sphere():\n    # Delete all existing objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Add a UV Sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(\n        segments=32,\n        ring_count=16,\n        radius=1,\n        location=(0, 0, 0)\n    )\n    sphere = bpy.context.active_object\n\n    # Set the frame range\n    start_frame = 1\n    end_frame = 100\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\n    # Define keyframes for expanding and shrinking\n    frames = [\n        (start_frame, 1),      # start (normal size)\n        (start_frame + 25, 2), # expand\n        (start_frame + 50, 1), # back to normal size\n        (start_frame + 75, 0.5), # shrink\n        (end_frame, 1)        # back to normal size\n    ]\n\n    # Insert scale keyframes\n    for frame, scale in frames:\n        bpy.context.scene.frame_set(frame)\n        sphere.scale = (scale, scale, scale)\n        sphere.keyframe_insert(data_path=\"scale\", index=-1)\n\n    # Set the interpolation to linear for consistent speed adjustments\n    for fcurve in sphere.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'LINEAR'\n\ncreate_animated_sphere()\n```\n\n### Explanation\n\n1. **Setup and Cleanup**: The script starts by removing all existing objects in the scene to ensure the scene is empty.\n\n2. **Sphere Creation**: It then adds a UV sphere at the origin.\n\n3. **Animation Setup**: The frame range is defined from frame 1 to 100.\n\n4. **Animating Scale**: A list of `(frame, scale)` tuples determines the keyframes for the animation:\n   - The sphere starts at normal size (`scale=1`) on frame 1.\n   - It expands to double its size"
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "To create a Blender script where a torus orbits around another object, we will assume the other object is a sphere. The script will set up the scene, add a torus and a sphere, and animate the torus to orbit around the sphere.\n\nHere is a Python script to achieve this in Blender:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = 'Central_Sphere'\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(location=(3, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = 'Orbiting_Torus'\n\n# Setting up the animation duration\nframe_start = 1\nframe_end = 250\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Create animation path for the torus\nfor frame in range(frame_start, frame_end + 1):\n    # Set the current frame\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the angle for this frame\n    angle = (frame / frame_end) * 2 * math.pi\n    \n    # Calculate the new position of the torus\n    torus_x = 3 * math.cos(angle)\n    torus_y = 3 * math.sin(angle)\n    torus_z = 0\n    \n    # Set the torus position\n    torus.location = (torus_x, torus_y, torus_z)\n    \n    # Insert a keyframe for location\n    torus.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set up a camera\nbpy.ops.object.camera_add(location=(0, -10, 5), rotation=(math.radians(60), 0, math.radians(90)))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\n# Add a light source\nbpy.ops.object.light_add(type='POINT', location=(5, 5, 5))\n\n# Configure the shading\nbpy.context.scene.render.engine = 'CYCLES'\nbpy.context.scene.cycles.samples"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "To create a simple Blender Python script that makes a cube rotate 360 degrees, you'll need to use Blender's Python API (bpy). This script will set up an animation where a cube rotates around the Z-axis over 250 frames, which is Blender's default animation length. Before running the script, ensure you have an active Blender session.\n\nHere's a basic script to achieve this:\n\n```python\nimport bpy\n\n# Deselect all objects\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create a new cube or select the existing one\nif \"Cube\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False)\ncube = bpy.data.objects.get(\"Cube\")\n\n# Select the cube\nbpy.context.view_layer.objects.active = cube\ncube.select_set(True)\n\n# Make sure we're in object mode\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Set initial keyframe for rotation\ncube.rotation_euler = (0.0, 0.0, 0.0)\ncube.keyframe_insert(data_path='rotation_euler', frame=1)\n\n# Set final keyframe for full rotation\ncube.rotation_euler = (0.0, 0.0, 360.0 * (3.14159/180.0))  # Converting degrees to radians\ncube.keyframe_insert(data_path='rotation_euler', frame=250)\n\n# Set interpolation type to linear for constant speed rotation\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"360-degree rotation animation created for the Cube.\")\n```\n\n### How to Use the Script:\n\n1. **Open Blender**: Start Blender and ensure you're in the default layout.\n2. **Open the Scripting Tab**: Switch to the Scripting workspace in Blender.\n3. **Create a New Text Block**: Click on 'New' to create a new script or 'Open' to load an existing one.\n4. **Paste the Script**: Copy the above script into the text editor.\n5. **Run the Script**: Click on 'Run Script' or press `Alt+P` in the text editor area.\n\n### Explanation:\n\n- **Cube Creation/Selection**: If a cube named 'Cube' does not exist, a new cube is created.\n- **Keyframe Insertion**:"
    },
    {
        "Text Input": "A cube spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a cube spin while floating, you'll need to use Blender's scripting capability with Python. This involves animating both the rotation and the vertical position of the cube.\n\nEnsure you have Blender 2.8 or later as the API changes can affect script compatibility.\n\nHere's a script that will achieve that effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the initial position of the cube so that it 'floats'\ncube.location = (0, 0, 1)\n\n# Set animation parameters\nstart_frame = 1\nend_frame = 250\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert keyframes for rotation and floating effect\nfor frame in range(start_frame, end_frame + 1):\n    # Set current frame\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate rotation in radians and set it\n    rotation_angle = frame * 2 * math.pi / (end_frame - start_frame)\n    cube.rotation_euler = (0, 0, rotation_angle)\n    \n    # Calculate the vertical position for floating effect\n    float_height = 0.5 * math.sin(frame * 2 * math.pi / (end_frame - start_frame)) + 1\n    cube.location.z = float_height\n    \n    # Insert keyframes for rotation and location\n    cube.keyframe_insert(data_path=\"rotation_euler\", index=-1)\n    cube.keyframe_insert(data_path=\"location\", index=2)  # Only z-axis for location\n\n# Set interpolation to linear for a more uniform motion\nfor fcurve in cube.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Cube spinning and floating animation created successfully.\")\n```\n\nThis script will:\n\n1. Delete any existing mesh objects in the scene.\n2. Create a new cube (2x2x2 size).\n3. Set the animation frame range to 1 to 250.\n4. Animate the cube by having it:\n   -"
    },
    {
        "Text Input": "A cube moves diagonally upwards.",
        "Blender Script": "To create a script in Blender that makes a cube move diagonally upwards, you can use the following Python script. This script uses Blender's `bpy` module to animate a cube moving upward in a diagonal direction over a series of frames.\n\n```python\nimport bpy\n\n# Ensure we start with a clean scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cube to the scene\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Define the number of frames for the animation\nframe_start = 1\nframe_end = 100\n\n# Set initial location keyframe at the first frame\ncube.location = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Define the final location for the diagonal movement\n# This example moves the cube equally in the x, y, and z direction\nend_location = (10, 10, 10)\n\n# Set the final location keyframe at the last frame\ncube.location = end_location\ncube.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Optionally, configure the interpolation type to be linear\n# to ensure the movement is steady\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Set the timeline to include the full range of the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nprint(\"Diagonal upward movement animation has been created.\")\n```\n\nTo execute this script:\n\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text block in the Text Editor and paste this script into it.\n3. Click on \"Run Script\".\n\nThis script will delete any existing meshes, create a new cube at the origin, and then animate it moving to the position (10, 10, 10) over 100 frames, providing a smooth diagonal upward movement. The interpolation is set to 'LINEAR' for consistent speed throughout the animation. Adjust the `end_location` and `frame_end` as needed to suit your project requirements."
    },
    {
        "Text Input": "A cube slides from top to bottom.",
        "Blender Script": "To create an animation in Blender where a cube slides from the top to the bottom, you can use a Python script to set up and automate this process. Below is a script that will create a cube, set its initial position at the top, and animate it sliding down to the bottom along the Z-axis.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 10))\ncube = bpy.context.active_object\n\n# Set up animation keyframes\nframe_start = 1\nframe_end = 50\nbottom_position = -10\n\n# Set the initial keyframe at the top position\ncube.location = (0, 0, 10)\ncube.keyframe_insert(data_path='location', frame=frame_start)\n\n# Set the end keyframe at the bottom position\ncube.location = (0, 0, bottom_position)\ncube.keyframe_insert(data_path='location', frame=frame_end)\n\n# Set interpolation to linear for a constant speed\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the rendering frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set camera to view the animation clearly\nbpy.ops.object.camera_add(location=(10, -10, 10), rotation=(1.1, 0, 0.9))\nbpy.context.scene.camera = bpy.context.object\n\n# Start playback\nbpy.ops.screen.animation_play()\n```\n\nHere's what the script does:\n\n1. It clears any existing objects in the scene.\n2. It adds a new cube at a location 10 units above the origin on the Z-axis.\n3. It sets keyframes for the cube's location at frame 1 (start) and frame 50 (end), moving it from Z = 10 to Z = -10.\n4. Keyframes' interpolation is set to 'LINEAR' for consistent speed.\n5. The script configures the scene's frame range for rendering the animation.\n6. An optional camera is added and set to a suitable position to view the complete animation clearly.\n7. It starts animation playback to immediately preview the effect"
    },
    {
        "Text Input": "A cone rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a cone and animates it to rotate 360 degrees around the Z-axis. To use this script, ensure you have Blender open with a new or existing project, then open the scripting editor, paste this script, and run it.\n\n```python\nimport bpy\n\n# Remove default objects from the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the frame range for the animation\nscene = bpy.context.scene\nscene.frame_start = 1\nscene.frame_end = 120  # 120 frames, assuming 30 FPS, would make a 4-second animation\n\n# Set the rotation keyframes for the cone\nframe_start = scene.frame_start\nframe_end = scene.frame_end\n\n# Insert keyframe for the initial rotation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Insert keyframe for the final rotation (360 degrees is 2*pi radians)\ncone.rotation_euler = (0, 0, 2 * 3.14159)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set interpolation to linear to maintain constant rotation speed\nfor fcu in cone.animation_data.action.fcurves:\n    for kf in fcu.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Cone rotation animation setup complete!\")\n```\n\n**How it works:**\n- The script begins by removing all objects from the scene, ensuring a clean start.\n- A cone is created at the origin with a base radius of 1, no top radius, and a height of 2.\n- The animation is set to start at frame 1 and end at frame 120.\n- Initial and final rotation keyframes are inserted: starting with no rotation and ending with a full 360-degree rotation (2\u03c0 radians) around the Z-axis.\n- To ensure the cone rotates at a constant speed, the interpolation method of the keyframes is set to linear.\n\nRun this script, and you'll see the cone rotating once over the course of the specified timeline! Adjust"
    },
    {
        "Text Input": "A plane bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a plane bounce like a ball, you'll need to animate the plane's position over time. Below is a script that achieves this by using Blender's Animation system. For this example, it will use the Z-axis to simulate the bouncing effect.\n\n```python\nimport bpy\nimport math\nimport mathutils\n\n# Make sure we have a clean slate\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Ensure the plane starts at the proper location\ninitial_location = mathutils.Vector((0, 0, 0.5))\nplane.location = initial_location \n\n# Set animation parameters\nfps = 24  # Frames per second\nanimation_duration = 5  # Total duration in seconds\ntotal_frames = fps * animation_duration\n\n# Bounce properties\ninitial_bounce_height = 2.0  # Maximum height of bounce\ngravity = 9.8  # Gravity, influencing how quickly the object falls\n\n# Calculating bounce keyframes\nfor frame in range(total_frames):\n    bpy.context.scene.frame_set(frame)\n\n    time = frame / fps\n    bounce_time = math.fmod(time, 1.0)\n\n    # Calculate new Z using a parabolic arc\n    current_bounce_height = initial_bounce_height * (1 - time / animation_duration)  # Linearly decreasing height\n    z_position = -0.5 + (current_bounce_height * 4 * bounce_time * (1 - bounce_time))  # Quadratic equation for bounce\n\n    # Update location\n    plane.location = mathutils.Vector((initial_location.x, initial_location.y, max(0, z_position)))\n    \n    # Insert keyframe\n    plane.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set end frame\nbpy.context.scene.frame_end = total_frames\n\nprint(\"Bounce animation creation complete.\")\n```\n\n### Description:\n- **Plane Creation**: The script starts by deleting any existing mesh objects and then creates a new plane at the origin.\n- **Animation**: We loop through each frame up to the total frame count, calculated from the desired FPS and the duration of the animation.\n- **Bouncing Logic**: \n"
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "To create a simple Blender Python script where a torus orbits around another object (e.g., a sphere), you can use the following code. This script sets up the scene by creating a torus and a sphere, and then animates the torus to orbit around the sphere. The orbit is achieved through keyframe animation of the torus's rotation around the sphere.\n\n```python\nimport bpy\n\ndef create_objects():\n    # Delete default objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Create a sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    sphere = bpy.context.object\n    sphere.name = \"CenterSphere\"\n    \n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(location=(3, 0, 0))\n    torus = bpy.context.object\n    torus.name = \"OrbitTorus\"\n    \n    return sphere, torus\n\ndef setup_orbit_animation(torus):\n    # Set the frame range\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 250\n\n    # Set initial keyframe\n    torus.location = (3, 0, 0)\n    torus.keyframe_insert(data_path=\"location\", frame=1)\n    \n    # Insert keyframes for one complete orbit\n    for frame in range(1, 251):\n        # Calculate angle for each frame (assume 250 frames for a complete orbit)\n        angle = (frame / 250.0) * (2 * 3.14159)  # 360 degrees = 2*pi radians\n        x = 3 * bpy.mathutils.cos(angle)\n        y = 3 * bpy.mathutils.sin(angle)\n\n        # Update torus location\n        torus.location = (x, y, 0)\n        torus.keyframe_insert(data_path=\"location\", frame=frame)\n\ndef main():\n    sphere, torus = create_objects()\n    setup_orbit_animation(torus)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Steps in the Script:\n1. **Clean Scene**: Deletes all existing mesh objects to start with a clean scene.\n2. **Object Creation**: Adds a sphere at the origin and a torus at an initial"
    },
    {
        "Text Input": "A cone moves from left to right.",
        "Blender Script": "To create a simple Blender Python script that animates a cone moving from left to right, follow these steps. This script will create a cone object, set keyframes to animate the movement, and run within Blender's scripting environment.\n\n```python\nimport bpy\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(-5, 0, 0))\ncone = bpy.context.active_object\n\n# Set keyframes for the animation\ncone.location = (-5, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\ncone.location = (5, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=50)\n\n# Set the scene's end frame\nbpy.context.scene.frame_end = 50\n\n# To smoothly interpolate movement, set interpolation type to linear\n# for this, access the fcurve of the location channel\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Play animation (optional, as UI may not show this via script)\n# Note: To actually see this in Blender, users must run this part manually or through script in the Blender environment as Blender must be in the right context to play animations.\nbpy.ops.screen.animation_play()\n```\n\n### Explanation\n1. **Delete Existing Objects**: This script begins by clearing any existing objects in the scene for a clean start.\n2. **Create a Cone**: A cone is added at the left position, at x = -5.\n3. **Animation Keyframes**:\n   - The script sets a keyframe at frame 1 with the cone located at x = -5.\n   - Another keyframe is set at frame 50 with the cone moved to x = 5.\n4. **Scene Settings**: The animation's end frame is set to 50.\n5. **Linear Interpolation**: This ensures that the cone moves steadily from one position to the other without any acceleration.\n6. **Play Animation**: While the script attempts to play the animation, this part might not work outside the Blender UI context.\n\nTo execute this script, open Blender, go to"
    },
    {
        "Text Input": "A plane moves from left to right.",
        "Blender Script": "To create a Blender Python script that animates a plane moving from left to right, you can use the following code. This script will set up a simple animation by adding a plane to the scene and then animating it to move across the viewport along the X-axis.\n\n```python\nimport bpy\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(-5, 0, 0))\nplane = bpy.context.active_object\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 100\n\n# Set initial keyframe\nplane.location = (-5, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set final keyframe\nplane.location = (5, 0, 0)\nplane.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up the scene\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Plane animation from left to right created successfully.\")\n```\n\n### Explanation:\n\n1. **Create a Plane**: The script starts by adding a plane to the scene. The plane is initially located at `(-5, 0, 0)` to the left of the origin.\n\n2. **Set Up Frames**: The range of the animation is set from frame `1` to `100`.\n\n3. **Initial Keyframe**: At the starting frame, it inserts a keyframe for the plane's location at `(-5, 0, 0)`.\n\n4. **Final Keyframe**: At the ending frame, it moves the plane to `(5, 0, 0)` and inserts another keyframe.\n\n5. **Scene Frame Setup**: The frame range for the scene is set to match the animation.\n\n6. **Output Message**: It prints a message to confirm that the animation setup is complete.\n\nYou can run this script in Blender's Scripting workspace. Once executed, the plane will animate from left to right when you play the animation timeline."
    },
    {
        "Text Input": "A torus zooms in and out.",
        "Blender Script": "Below is a Blender Python script that animates a torus to zoom in and out:\n\n```python\nimport bpy\nimport math\n\ndef create_torus():\n    # Add a torus\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n    torus = bpy.context.object\n    torus.name = \"ZoomingTorus\"\n    return torus\n\ndef animate_torus(torus):\n    # Clear existing animation data\n    torus.animation_data_clear()\n    \n    # Set keyframes for scaling to simulate zoom in and out\n    total_frames = 120\n    bpy.context.scene.frame_end = total_frames\n    \n    # Frame 1: Original size\n    torus.scale = (1.0, 1.0, 1.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=1)\n    \n    # Frame 30: Zoomed in\n    torus.scale = (2.0, 2.0, 2.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=30)\n    \n    # Frame 60: Back to original size\n    torus.scale = (1.0, 1.0, 1.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=60)\n    \n    # Frame 90: Zoomed out\n    torus.scale = (0.5, 0.5, 0.5)\n    torus.keyframe_insert(data_path=\"scale\", frame=90)\n    \n    # Frame 120: Back to original size\n    torus.scale = (1.0, 1.0, 1.0)\n    torus.keyframe_insert(data_path=\"scale\", frame=120)\n    \n    # Set interpolation to linear for smooth zooming effect\n    for fcurve in torus.animation_data.action.fcurves:\n        for keyframe in fcurve.keyframe_points:\n            keyframe.interpolation = 'LINEAR'\n\ndef main():\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Create and animate the torus\n    torus = create_torus()\n    animate_torus(torus)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the script into the"
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cone sliding from top to bottom, we will set up a simple scene where a cone moves along the Z-axis. Below is a step-by-step script to achieve this in Blender. Make sure you have Blender open and running before executing the script.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Delete all existing objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\ndef create_cone():\n    # Add a cone to the scene\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 5))\n    cone = bpy.context.object\n    return cone\n\ndef animate_cone(cone):\n    # Set the frame range and initial keyframe\n    start_frame = 1\n    end_frame = 100\n    cone.location = (0, 0, 5)\n    cone.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Set the final keyframe position\n    cone.location = (0, 0, 0)\n    cone.keyframe_insert(data_path=\"location\", frame=end_frame)\n    \n    # Set the frame range in the timeline\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\ndef main():\n    # Clear existing objects\n    clear_scene()\n    \n    # Create a cone\n    cone = create_cone()\n    \n    # Animate the cone\n    animate_cone(cone)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Clear the Scene**: The `clear_scene` function deletes all objects to ensure the scene starts empty.\n\n2. **Create a Cone**: The `create_cone` function adds a new cone to the scene with a specified number of vertices and position at (0, 0, 5) to place it vertically on the Z-axis.\n\n3. **Animate the Cone**: The `animate_cone` function sets keyframes for the cone's position. It starts at z=5 on frame 1 and slides to z=0 on frame 100.\n\n4. **Main Function**: This ties everything together, first clearing the scene, then creating the cone, and finally animating it.\n\nRun this script in Blender's scripting tab by creating a new text block and pasting the"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a simple animation of a cube rotating 360 degrees around the Z-axis. This script is designed to work in Blender's scripting environment.\n\n```python\nimport bpy\n\ndef create_rotating_cube():\n    # Remove all starting objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Add a new cube\n    bpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\n    cube = bpy.context.object\n\n    # Set total frames and rotation settings\n    frame_start = 1\n    frame_end = 120  # You can adjust the number of frames for faster/slower rotation\n\n    # Set the start frame\n    bpy.context.scene.frame_start = frame_start\n    bpy.context.scene.frame_end = frame_end\n    \n    # Insert initial keyframe\n    cube.rotation_euler = (0, 0, 0)\n    cube.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n    # Rotate cube 360 degrees (2 * pi radians) around Z-axis\n    cube.rotation_euler = (0, 0, 2 * 3.14159)\n    cube.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n    # Set the interpolation to linear for constant rotation speed\n    for fcurve in cube.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\nif __name__ == \"__main__\":\n    create_rotating_cube()\n```\n\n### How to Use the Script\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text file and paste the above script into it.\n3. Run the script by clicking the \"Run Script\" button.\n\n### What the Script Does\n- Deletes all objects initially present in the scene.\n- Adds a default cube to the origin.\n- Sets up an animation where the cube rotates 360 degrees around the Z-axis over 120 frames.\n- Applies linear interpolation to ensure constant rotation speed throughout the animation.\n\nYou can adjust the `frame_end` variable to change the speed of rotation\u2014decreasing the number of frames will speed up the rotation, while increasing it will slow it down."
    },
    {
        "Text Input": "A cylinder moves from left to right.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that animates a cylinder moving from left to right on the X-axis.\n\n```python\nimport bpy\n\n# Delete all previous meshes\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new cylinder to the scene\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(-5, 0, 0))\ncylinder = bpy.context.object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Ensure the animation data is clear before we start\ncylinder.animation_data_clear()\n\n# Set the starting keyframe for the cylinder\ncylinder.location = (-5, 0, 0)\ncylinder.keyframe_insert(data_path='location', frame=start_frame)\n\n# Set the ending keyframe for the cylinder\ncylinder.location = (5, 0, 0)\ncylinder.keyframe_insert(data_path='location', frame=end_frame)\n\n# Set the keyframe interpolation type to linear for constant speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation setup complete!\")\n```\n\n### Instructions to Use:\n1. Open Blender and switch to the Scripting workspace, or simply press `Shift + F11`.\n2. Copy and paste the above script into a new text block in the Blender Text Editor.\n3. Run the script by clicking the \"Run Script\" button or pressing `Alt + P` with the cursor inside the text editor.\n\nThis script will create a single cylinder at position `(-5, 0, 0)` and animate it moving to position `(5, 0, 0)` over 100 frames. The animation uses linear interpolation to ensure a smooth, constant speed across the animation. Make sure to adjust the start and end positions and frames as needed for your specific use case."
    },
    {
        "Text Input": "A cone tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a cone tilting back and forth, you can use the following script. This script sets up the scene, adds a cone object, and animates its rotation to simulate tilting back and forth.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Function to clear existing mesh objects\ndef clear_mesh_objects():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Clear existing objects\nclear_mesh_objects()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.object\n\n# Set the initial rotation of the cone\ncone.rotation_euler = (0, 0, 0)\n\n# Define animation frames and keyframe interval\nstart_frame = 1\nend_frame = 60\nhalfway_frame = (end_frame - start_frame) // 2 + start_frame\n\n# Insert initial keyframe\ncone.rotation_euler[0] = 0  # Rotation around X-axis\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Insert keyframe for a tilt in one direction\ncone.rotation_euler[0] = 0.5  # Tilt around X-axis\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=halfway_frame)\n\n# Insert keyframe for a tilt back to original position\ncone.rotation_euler[0] = 0  # Rotation around X-axis\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set up the animation cycle\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# To ensure the animation is a loop, adjust the interpolation type\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n\n# Set the playback type\nbpy.ops.screen.animation_play()\n\nprint(\"Cone tilting animation created. Play the animation to see the effect.\")\n```\n\n### Explanation of the Script:\n\n1. **Clear Existing Mesh Objects:** The script begins by removing any existing mesh objects in the scene to ensure a clean workspace.\n\n2. **Add a Cone:** A cone primitive is added to the scene with specific parameters.\n\n"
    },
    {
        "Text Input": "A monkey jumps up and lands.",
        "Blender Script": "To create a simple Blender animation where a monkey (a 3D object) jumps up and lands, we can use Python scripting to automate this process. Below is a basic Blender Python script that adds a monkey mesh (a Suzanne mesh), animates it to jump up and down, and sets keyframes to control the motion.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a monkey (Suzanne) mesh\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set the start and end frames of the animation\nstart_frame = 1\nmiddle_frame = 20\nend_frame = 40\n\n# Set the initial location of the monkey\nmonkey.location = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Animate the monkey to jump up\nmonkey.location = (0, 0, 2)  # Adjust the Z value for higher jump\nmonkey.keyframe_insert(data_path=\"location\", frame=middle_frame)\n\n# Bring the monkey back down to the original position\nmonkey.location = (0, 0, 0)\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to make the jump smooth\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Set playback to start and end at the correct frames\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\n### How the Script Works:\n1. **Clear Existing Objects**: Removes any existing objects in the scene for a clean slate.\n2. **Add Suzanne**: Creates a monkey mesh at the origin.\n3. **Define Animation Keyframes**:\n   - **start_frame**: The starting position of the monkey (on the ground).\n   - **middle_frame**: The monkey's position at the peak of the jump.\n   - **end_frame**: The monkey lands back at the ground position.\n4. **Set Keyframes**: Inserts keyframes at specific frames for the monkey\u2019s location.\n5. **Apply Smooth Interpolation"
    },
    {
        "Text Input": "A cube wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a cube wiggle side to side, you can use the following script. This script will animate a cube by oscillating its position along the X-axis using Blender's animation system.\n\n```python\nimport bpy\nimport math\n\n# Function to clear existing animation data\ndef clear_animation_data(obj):\n    if obj.animation_data:\n        obj.animation_data_clear()\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a new cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the number of frames and the wiggle amplitude\nnum_frames = 50\namplitude = 2\n\n# Clear any existing animation data for the cube\nclear_animation_data(cube)\n\n# Create an animation by setting keyframes for the cube's location\nfor frame in range(num_frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the new location with a side-to-side wiggle effect\n    wiggle_offset = math.sin(frame * 0.2) * amplitude\n    cube.location.x = wiggle_offset\n    \n    # Insert keyframe for the location\n    cube.keyframe_insert(data_path=\"location\", index=0)\n\n# Set the end frame of the scene for the animation timeline\nbpy.context.scene.frame_end = num_frames\n\nprint(\"Animation script executed successfully.\")\n```\n\n### How the Script Works:\n1. **Clearing Existing Objects:** The script starts by deleting any existing objects in the scene to ensure a fresh start.\n\n2. **Adding a Cube:** A cube is added to the scene at the origin (0, 0, 0).\n\n3. **Animation Parameters:** The script defines the total number of frames for the animation and the amplitude of the wiggle.\n\n4. **Animating the Cube:** A loop iterates over each frame, calculating a new position for the cube using a sine wave (`math.sin`) for smooth back-and-forth motion. The amplitude and frequency of the sine function dictate the intensity and speed of the wiggle.\n\n5. **Inserting Keyframes:** For each frame, a keyframe is inserted for the cube's `location` property, specifically the X-axis, to capture the calculated wiggle position.\n\n6. **"
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that makes a cone rotate around the X-axis, you need to use Blender's `bpy` module. Here's a basic script to achieve this:\n\n```python\nimport bpy\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(\n    vertices=32,  # Number of vertices\n    radius1=1,    # Base radius\n    radius2=0,    # Top radius, zero makes it a cone\n    depth=2,      # Height of the cone\n    end_fill_type='NGON',\n    enter_editmode=False,\n    align='WORLD',\n    location=(0, 0, 0)  # Location of the cone\n)\n\n# Get the current active object (the cone we just added)\ncone = bpy.context.object\n\n# Set up animation keyframes to rotate the cone around the X-axis\nframe_start = 1\nframe_end = 250\n\n# Set initial rotation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start, index=0)  # Index 0 is X-axis\n\n# Set end rotation (2 * pi for a full rotation)\ncone.rotation_euler = (2 * 3.14159, 0, 0)  # Rotate 360 degrees on X-axis\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end, index=0)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set interpolation type to linear for constant speed rotation\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\n### How to Use the Script:\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text data block and paste the script above.\n3. Click on \"Run Script\" to execute the code.\n\n### Explanation:\n- The script starts by clearing the current scene to ensure there's nothing else in the way.\n- It then creates a cone at the origin (0,0,0) with default dimensions.\n- The animation"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, you can set up an animation where the plane moves up and down over time to simulate bouncing. Here's a simple script that will animate a plane bouncing along the Z-axis using keyframes.\n\n```python\nimport bpy\n\n# Ensure there's nothing in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set animation parameters\nbounce_height = 2.0  # The maximum height of the bounce\nbounce_duration = 20  # The duration in frames for one bounce cycle\n\n# Set keyframes for the bounce\n# Create a bouncing animation by setting location keyframes\nframe_number = 0\nplane.location.z = 0.0\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frame_number)  # Start at ground level\n\nframe_number += bounce_duration // 4\nplane.location.z = bounce_height\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frame_number)  # Bounce to the peak\n\nframe_number += bounce_duration // 4\nplane.location.z = 0.0\nplane.keyframe_insert(data_path=\"location\", index=2, frame=frame_number)  # Return back to ground level\n\n# Add more bounces by repeating the same keyframes\nfor bounce in range(1, 5):  # Number of bounces\n    start_frame = frame_number\n    frame_number += bounce_duration // 4\n    plane.location.z = bounce_height\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_number)  # Bounce to the peak\n\n    frame_number += bounce_duration // 4\n    plane.location.z = 0.0\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=frame_number)  # Return back to ground level\n\n# Set interpolation type for a more natural bounce effect\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'\n\n# Optional: Adjust render and playback settings\nbpy.context.scene.frame_end = frame_number  # End of animation\n"
    },
    {
        "Text Input": "A sphere flips upside down.",
        "Blender Script": "To create a Blender Python script that animates a sphere flipping upside down, you'll need to set up a sphere and then animate its rotation. Below is a basic script that demonstrates how to accomplish this using Blender's Python API.\n\n```python\nimport bpy\n\n# Clear existing objects in the scene for a clean state\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set keyframes for flipping the sphere 180 degrees in the X-axis\n\n# Ensure the object is selected\nbpy.context.view_layer.objects.active = sphere\n\n# Set the start frame and the initial rotation\nstart_frame = 1\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the end frame and the final rotation\nend_frame = 50\nsphere.rotation_euler = (3.14159, 0, 0)  # 180 degrees in radians\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally set some interpolation type (can be 'CONSTANT', 'LINEAR', 'BEZIER')\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\n```\n\nThis script performs the following actions:\n\n1. Clears the scene of all existing objects to ensure a clean start.\n2. Adds a new UV sphere to the scene.\n3. Sets the initial rotation keyframe of the sphere at frame 1.\n4. Sets the final rotation keyframe at frame 50, rotating the sphere 180 degrees around the X-axis (flipping it upside down).\n5. Changes the interpolation type of the keyframes to 'LINEAR' to ensure a smooth transition with a constant speed, although you can keep the default 'BEZIER' for eased motion.\n6. Plays the animation.\n\nYou can run this script in Blender's Python console or as a new text block. Make sure to save your work"
    },
    {
        "Text Input": "A sphere oscillates in a sine wave.",
        "Blender Script": "To create a Python script for Blender that makes a sphere oscillate in a sine wave motion, you can use the Blender's Python API (bpy) to animate the sphere. This script will add a sphere to the scene and then animate its movement along the z-axis using a sine wave function. The animation will cover a specified frame range.\n\nHere's a sample script:\n\n```python\nimport bpy\nimport math\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 250\n\n# Create a new sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"OscillatingSphere\"\n\n# Clear any existing keyframes\nsphere.animation_data_clear()\n\n# Set animation keyframes for the sphere's z-location using a sine wave\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate z-position using a sine function\n    z_position = math.sin(frame / 10.0) * 2  # Adjust frequency and amplitude as necessary\n    \n    # Set the z-location\n    sphere.location.z = z_position\n    \n    # Insert keyframe for z-location\n    sphere.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the frame range in the timeline\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Animation complete!\")\n```\n\n### Instructions:\n1. Open Blender and switch to the scripting workspace.\n2. Create a new script and paste the above code into the text editor.\n3. Run the script.\n\n### Explanation:\n- **Frame Range**: The animation runs from `start_frame` to `end_frame`.\n- **Sphere Creation**: A UV sphere primitive is added to the scene.\n- **Animation**: The script calculates a z-position for each frame using the sine function, making the sphere oscillate up and down. The z-position is a sine wave function with a frequency controlled by dividing the frame by 10 and an amplitude of 2.\n- **Insert Keyframes**: For each frame, a keyframe is inserted to record the z-location of the sphere.\n- **Playback**: You can play the animation in the timeline to see the sphere oscillating in a sine wave along the z-axis.\n\nFeel free to adjust the frequency and amplitude by changing the"
    },
    {
        "Text Input": "A cone spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cone spin and scale up, you can use the following script. This script will assume that you have some familiarity with Blender's scripting environment and assumes Blender is in the default layout. Here's how you can achieve this:\n\n```python\nimport bpy\nimport math\n\n# Delete default cube if it exists\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects[\"Cube\"].select_set(True)\n    bpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the pivot point to the object's origin\nbpy.context.scene.tool_settings.transform_pivot_point = 'MEDIAN_POINT'\n\n# Initialize variables for animation\nstart_frame = 1\nend_frame = 120\n\n# Set up keyframes for rotation (spinning)\nrotation_start = 0\nrotation_end = 4 * 2 * math.pi  # 4 complete rotations\n\n# Set up keyframes for scaling up\nscale_start = 1\nscale_end = 2\n\n# Animate rotation\ncone.rotation_euler = (0, 0, rotation_start)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\ncone.rotation_euler = (0, 0, rotation_end)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Animate scaling\ncone.scale = (scale_start, scale_start, scale_start)\ncone.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\ncone.scale = (scale_end, scale_end, scale_end)\ncone.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set interpolation type to linear for both rotation and scaling\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the scene frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Script completed: The cone will spin and scale up from frame {} to {}.\".format(start_frame, end_frame))\n```\n\n### How This Script Works:\n\n1. **Delete Default Cube**: The script checks for and deletes the default cube to ensure the scene is clean.\n2. **Add a Cone**: A cone is added to the"
    },
    {
        "Text Input": "A cylinder rotates on the X-axis.",
        "Blender Script": "Here's a simple Blender Python script that creates a cylinder and animates its rotation around the X-axis. This script assumes that you are running it within Blender's scripting environment.\n\n```python\nimport bpy\n\n# Remove all existing objects to start fresh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\n\n# Get reference to the newly created cylinder\ncylinder = bpy.context.active_object\n\n# Set the cylinder's name for easy reference\ncylinder.name = 'RotatingCylinder'\n\n# Set up the animation\n# Define start and end frames\nstart_frame = 1\nend_frame = 250\n\n# Set the initial rotation keyframe at start_frame\ncylinder.rotation_euler = (0, 0, 0)  # Initial rotation (0 radians about the X axis)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame, index=0)\n\n# Set the final rotation keyframe at end_frame\ncylinder.rotation_euler = (6.28, 0, 0)  # Full rotation (approx 2*pi radians, or 360 degrees)\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame, index=0)\n\n# Set the timeline to match the start and end frames\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set interpolation mode to linear for constant speed rotation\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\n# If you need to render the animation, you can set the render path and file format here\n# bpy.context.scene.render.filepath = '/path/to/save/animation/frame_'\n# bpy.ops.render.render(animation=True)\n```\n\nSave this script with a `.py` extension and run it within Blender. This script does the following:\n\n1. Deletes all existing objects in the scene for a clean start.\n2. Adds a cylinder at the origin of the scene.\n3. Sets up an animation where the cylinder rotates 360 degrees around the X-axis over 250 frames.\n4. Uses linear interpolation to ensure a constant speed of rotation throughout the animation.\n\nRemember to adjust the render settings and output path if you decide"
    },
    {
        "Text Input": "A sphere moves in a spiral motion.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a sphere moving in a spiral motion. You can run this script in Blender's Scripting tab. Make sure you have a new or appropriate Blender project open where the animation can be viewed properly.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"SpiralSphere\"\n\n# Animation configuration\nframes = 250  # Total frames of the animation\nloops = 5     # Number of spiral loops\nframe_rate = 24  # Frames per second\n\n# Set end frame for the animation in the timeline\nbpy.context.scene.frame_end = frames\n\n# Loop through each frame and set keyframes\nfor frame in range(frames):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the position for the spiral motion\n    angle = frame * (2 * math.pi * loops / frames)  # Angle based on frame\n    x = math.cos(angle) * (frame / frames) * loops  # X position\n    y = math.sin(angle) * (frame / frames) * loops  # Y position\n    z = (frame / frames) * 5  # Gradual increase on the Z axis\n    \n    # Set sphere's location\n    sphere.location = (x, y, z)\n    \n    # Insert keyframe for location\n    sphere.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set the timeline start and end positions for a smooth play\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frames\n\n# Set up the rendering context if you wish to render this animation as a video\n# bpy.context.scene.render.fps = frame_rate\n# bpy.context.scene.render.filepath = \"/path/to/save/spiral_animation.mp4\"\n# bpy.ops.render.render(animation=True)\n```\n\n### Instructions:\n1. Open a new Blender file.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text block and paste the script into it.\n4. Click \"Run Script\" (or press Alt+P) with your mouse inside the script"
    },
    {
        "Text Input": "A cylinder slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cylinder sliding from top to bottom, we'll utilize Blender's Python API. The script will create a cylinder object, set up a simple animation, and move the cylinder from the top of the scene to the bottom over a specified number of frames.\n\nHere's a step-by-step script to achieve this:\n\n```python\nimport bpy\n\n# Clear existing objects and start fresh\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 5))\ncylinder = bpy.context.active_object\n\n# Set frame range for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set initial keyframe at the top position\ncylinder.location.z = 5\ncylinder.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the final keyframe at the bottom position\ncylinder.location.z = -5\ncylinder.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up animation playback\nbpy.context.scene.frame_set(start_frame)\n\n# Set the frame rate (optional, default is 24 fps)\nbpy.context.scene.render.fps = 24\n\n# Set the animation to linear interpolation for a constant speed\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf_point in fcurve.keyframe_points:\n        kf_point.interpolation = 'LINEAR'\n\n# Optionally, play the animation\nbpy.ops.screen.animation_play()\n\nprint(\"Cylinder slide animation setup complete.\")\n```\n\n### Explanation:\n\n1. **Clear Existing Objects**: The `bpy.ops.wm.read_factory_settings(use_empty=True)` is used to start with a clean slate.\n\n2. **Create a Cylinder**: A cylinder is created at location `(0, 0, 5)` which places it at the top of its movement range.\n\n3. **Set Animation Frames**: We define the start (`start_frame`) and end (`end_frame`) frames of the animation.\n\n4. **Keyframe Setup**:\n   - The cylinder's initial position is keyframed at `z=5` at the start frame.\n   - The final position is keyframed at `z=-5` at the end frame, making the cylinder slide"
    },
    {
        "Text Input": "A cube moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a cube moving diagonally upwards in a scene, we can use Blender's Python API to insert keyframes for the movement. The script will add a cube, set initial and final positions, and insert keyframes to animate the movement. Here's how you might write such a script:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the initial frame and position of the cube\ninitial_frame = 1\ncube.location = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=initial_frame)\n\n# Set the final frame and position of the cube\nfinal_frame = 50\ncube.location = (5, 5, 5)  # Moving diagonally upwards\ncube.keyframe_insert(data_path=\"location\", frame=final_frame)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = initial_frame\nbpy.context.scene.frame_end = final_frame\n\n# Select the object to see it move when playing the animation\nbpy.context.view_layer.objects.active = cube\ncube.select_set(True)\n\n# Set the animation to play in loop\nbpy.ops.screen.animation_play()\n\nprint(\"Animation setup complete. Play the animation to see the cube moving diagonally upwards.\")\n```\n\nTo use this script in Blender:\n1. Open Blender and switch to the Scripting workspace.\n2. Copy and paste this script into a new text block.\n3. Run the script by clicking the \"Run Script\" button.\n\nThe script initializes by clearing any existing objects, then adds a cube at the origin. It inserts keyframes at frames 1 and 50, moving from location (0, 0, 0) to (5, 5, 5), which describes a diagonal upward movement. Adjust the final position and frames as desired to customize the animation."
    },
    {
        "Text Input": "A torus orbits around another object.",
        "Blender Script": "Certainly! Below is a Blender Python script using the Blender API (bpy) to create a simple animation where a torus orbits around a sphere.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a Sphere at the center\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\ncentral_sphere = bpy.context.object\ncentral_sphere.name = 'Central_Sphere'\n\n# Create a Torus\nbpy.ops.mesh.primitive_torus_add(location=(3, 0, 0))\ntorus = bpy.context.object\ntorus.name = 'Orbiting_Torus'\n\n# Set the animation parameters\nframes = 120  # Total number of frames for the orbit\nradius = 3.0  # Orbit radius\nangle_step = 2 * math.pi / frames  # Angle step per frame\n\n# Set the animation frames for the torus\nfor frame in range(frames):\n    # Calculate new position for each frame\n    angle = angle_step * frame\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n\n    # Set the torus location\n    torus.location = (x, y, 0)\n    \n    # Insert a keyframe for the current location\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the end frame of the animation\nbpy.context.scene.frame_end = frames\n```\n\n### Script Explanation:\n1. **Clear Existing Objects:** The script starts by clearing all objects in the scene to ensure a fresh start.\n\n2. **Create Central Sphere:** A sphere is created at the origin to act as the central object around which the torus will orbit.\n\n3. **Create Torus:** A torus is created and initially positioned along the x-axis at a distance from the origin.\n\n4. **Animation Setup:**\n   - The animation is set for a total of 120 frames.\n   - A radius of 3.0 units is defined for the orbit.\n   - `angle_step` calculates the incremental angle for each frame, ensuring a full 360-degree orbit over 120 frames.\n\n5. **Animate Torus:** For each frame, the script calculates the torus's position using trigonometric functions and inserts keyframes to animate its location.\n\n6. **"
    },
    {
        "Text Input": "A torus bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a torus bounce like a ball, we need to animate the torus's position over time. Here's a script that sets up a bouncing animation for a torus in Blender:\n\n```python\nimport bpy\nimport math\n\n# Clear existing animation data\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 2))\ntorus = bpy.context.object\n\n# Define the keyframe interval and animation properties\nframe_start = 0\nframe_end = 100\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Define bouncing properties\nbounce_height = 2\ngravity = 9.81\nbounce_squash_scale = 0.7\nbounce_damping = 0.8\n\n# Function to calculate the vertical position using a simple physics equation\ndef calculate_bounce_position(frame):\n    time = frame / bpy.context.scene.render.fps\n    initial_velocity = math.sqrt(2 * gravity * bounce_height)\n    y_position = initial_velocity * time - 0.5 * gravity * time * time\n    if y_position < 0:\n        y_position = 0\n    return y_position\n\n# Animate the torus bouncing\ntime = 0\nvelocity = math.sqrt(2 * gravity * bounce_height)\ny_position = bounce_height\n\nfor frame in range(frame_start, frame_end+1):\n    # Calculate position\n    y_position = calculate_bounce_position(frame)\n    \n    # If the torus has hit the ground, apply damping to simulate energy loss\n    if y_position == 0:\n        velocity *= bounce_damping\n        bounce_height = (velocity**2) / (2 * gravity)\n        \n    # Set keyframe for location\n    torus.location = (0, 0, y_position)\n    torus.keyframe_insert(data_path=\"location\", index=-1, frame=frame)\n    \n    # Set keyframe for scaling to simulate squash/stretch\n    if y_position == 0:\n        torus.scale = (1, bounce_squash_scale, 1)\n    else:\n        torus.scale = (1, 1, 1)\n    torus.keyframe_insert(data_path=\"scale\", index"
    },
    {
        "Text Input": "A torus spins while floating.",
        "Blender Script": "To create a Blender Python script that makes a torus spin while appearing to float, you'll need to set up the basics of Blender's scripting environment, create a torus object, and animate its rotation. Below is a script that demonstrates how to achieve this:\n\n```python\nimport bpy\n\ndef create_and_animate_torus():\n    # Delete all current objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n    # Set up the scene\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 250\n\n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\n\n    # Get reference to the torus\n    torus = bpy.context.active_object\n\n    # Set initial keyframe for rotation\n    torus.rotation_euler = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n    # Set final keyframe for rotation\n    torus.rotation_euler = (0, 0, 6.28319) # 360 degrees in radians\n    torus.keyframe_insert(data_path=\"rotation_euler\", frame=250)\n\n    # Add floating effect via location animation\n    torus.location = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"location\", frame=1)\n    \n    torus.location = (0, 0, 2)  # Final location point: floating to the height of 2 units\n    torus.keyframe_insert(data_path=\"location\", frame=125)\n\n    torus.location = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"location\", frame=250)\n\n    # Set linear interpolation for smooth spinning and floating\n    fcurves = torus.animation_data.action.fcurves\n    for fcu in fcurves:\n        for kf in fcu.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\ncreate_and_animate_torus()\n```\n\n### How this script works:\n- **Scene Setup**: Clears the scene first by deleting all existing objects. Starts the animation from frame 1 to frame 250.\n- **Torus Creation**: Uses Blender operators to add a torus at the world origin.\n- **Animation**:\n  - Sets initial and final keyframes"
    },
    {
        "Text Input": "A monkey moves diagonally upwards.",
        "Blender Script": "To create a script where a monkey (Suzanne mesh primitive in Blender) moves diagonally upwards, we can use Blender's Python API to animate the object over time. We will add keyframes to animate the monkey along a diagonal path. Here's how you can do it:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey mesh primitive\nbpy.ops.mesh.primitive_monkey_add(size=1.0, location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set up the start and end points for the diagonal movement\nstart_frame = 1\nend_frame = 100\nstart_location = (0, 0, 0)\nend_location = (10, 10, 10)\n\n# Set initial location and keyframe\nmonkey.location = start_location\nmonkey.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set end location and keyframe\nmonkey.location = end_location\nmonkey.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Update the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally, set the interpolation type to linear for constant speed\nfor fcurve in monkey.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\nHere's a breakdown of what's happening in the script:\n\n1. **Clear Existing Objects**: We start by deleting all objects in the scene to ensure a clean slate.\n\n2. **Add Monkey Primitive**: We add a Suzanne (monkey) mesh into the scene at the origin.\n\n3. **Animation Setup**: \n   - Define the starting and ending frames and locations. In this case, the monkey moves from `(0, 0, 0)` to `(10, 10, 10)`.\n   - Insert keyframes at the start and end frames to define the animation path of the monkey.\n\n4. **Linear Interpolation**: By setting all keyframe interpolations to 'LINEAR', the monkey moves at a constant speed along the diagonal path.\n\nTo run this script, you can paste it into the Blender scripting editor and click 'Run Script'. Make sure you're in 'Object Mode' and have a clean scene to properly see the results"
    },
    {
        "Text Input": "A cube moves from left to right.",
        "Blender Script": "To create a simple animation in Blender where a cube moves from left to right, you can use the following Python script. Before running this script, ensure you have a default cube in your Blender scene or create one using the script if there isn\u2019t one already.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Deselect all objects\nbpy.ops.object.select_all(action='DESELECT')\n\n# Select the default cube or create one if it doesn't exist\nif \"Cube\" not in bpy.data.objects:\n    bpy.ops.mesh.primitive_cube_add(size=2.0, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.data.objects['Cube']\n\n# Set the cube at the starting position\ncube.location = (-5, 0, 0)\n\n# Insert a keyframe at frame 1 for the starting position\nbpy.context.scene.frame_set(1)\ncube.keyframe_insert(data_path='location', frame=1)\n\n# Set the cube at the ending position\ncube.location = (5, 0, 0)\n\n# Insert a keyframe at frame 50 for the ending position\nbpy.context.scene.frame_set(50)\ncube.keyframe_insert(data_path='location', frame=50)\n\n# Optionally, adjust the timeline to view the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\n\n# Play the animation (This will only work interactively, not during script execution)\n# bpy.ops.screen.animation_play()\n\nprint(\"Animation successfully created from frame 1 to 50\")\n```\n\n### Explanation:\n- **Deselect all objects**: Ensures no other objects are selected before the script runs.\n- **Create or locate cube**: Checks if the default cube exists, and if not, it creates one.\n- **Keyframing**: \n  - Frame 1: The cube starts at location `(-5, 0, 0)` (left position).\n  - Frame 50: The cube moves to `(5, 0, 0)` (right position).\n- **Frame Settings**: Adjust the animation timeline from frame 1 to 50.\n- The `bpy.ops.screen.animation_play()` could be used to play the animation interactively, but during script execution, it is commented as it requires manual environment control.\n\nRun this script in Blender's Scripting editor to create the animation."
    },
    {
        "Text Input": "A cone moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that makes a cone move in a spiral motion, we'll use Blender's Python API (bpy) to insert keyframes. The cone will be animated to follow a spiral path by altering its location over time.\n\nHere is a script that accomplishes this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, depth=2, radius1=1, radius2=0, enter_editmode=False, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Animation parameters\nnum_frames = 250\nspiral_turns = 3\nheight = 5\nradius = 5\n\n# Add animation keyframes\nfor frame in range(num_frames):\n    # Calculate the position on the spiral\n    angle = 2 * math.pi * spiral_turns * (frame / num_frames)\n    x = radius * angle * math.cos(angle)\n    y = radius * angle * math.sin(angle)\n    z = (height / num_frames) * frame\n\n    # Set keyframe for the cone's location\n    cone.location = (x, y, z)\n    cone.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Update the scene\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = num_frames\nbpy.context.scene.render.fps = 24\n\nprint(\"Spiral animation created.\")\n```\n\n### Explanation:\n1. **Setup**: We start by clearing any existing objects in the scene and adding a cone at the origin.\n\n2. **Animation Parameters**:\n   - `num_frames`: Total number of frames for the animation.\n   - `spiral_turns`: Number of spiral turns the cone will make.\n   - `height`: Total height the cone will ascend during the animation.\n   - `radius`: Spiral radius scaling factor.\n\n3. **Spiral Path Calculation**:\n   - Using polar coordinates, where the angle is incremented proportionally to the fraction of `frame/num_frames`.\n   - `x` and `y` coordinates are calculated using trigonometric functions to create the spiral path, modulated by `angle` to increase the spiral's radius gradually.\n   - `z` coordinate is directly proportional to the frame index to provide an"
    },
    {
        "Text Input": "A plane rotates on the X-axis.",
        "Blender Script": "Here's a simple Blender Python script to rotate a plane on the X-axis. This script creates a plane if one does not already exist and continuously rotates it around the X-axis:\n\n```python\nimport bpy\n\n# Create a new plane if not already existing\ndef create_plane():\n    if \"RotatingPlane\" not in bpy.data.objects:\n        bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n        plane = bpy.context.active_object\n        plane.name = \"RotatingPlane\"\n\n# Set up animation frame range\nframe_start = 1\nframe_end = 250\n\ndef rotate_plane():\n    # Get the plane object\n    plane = bpy.data.objects.get(\"RotatingPlane\")\n    if plane is None:\n        print(\"No plane found to rotate.\")\n        return\n\n    # Set keyframes for rotation on the X-axis\n    bpy.context.scene.frame_start = frame_start\n    bpy.context.scene.frame_end = frame_end\n\n    plane.rotation_mode = 'XYZ'\n    \n    # Rotate by 360 degrees over the frame range\n    for frame in range(frame_start, frame_end + 1):\n        plane.rotation_euler[0] = (frame - frame_start) * (360 / (frame_end - frame_start)) * (3.14159 / 180)\n        plane.keyframe_insert(data_path=\"rotation_euler\", index=0, frame=frame)\n\ndef main():\n    create_plane()\n    rotate_plane()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions to Use:\n1. Open Blender and switch to the scripting tab.\n2. Create a new text block and paste the script above into it.\n3. Run the script by clicking the \"Run Script\" button in the text editor header.\n\n### What This Script Does:\n- It first checks if a plane named \"RotatingPlane\" already exists. If not, it creates a new plane at the origin.\n- It sets up an animation ranging from frame 1 to frame 250.\n- It rotates the plane around the X-axis by 360 degrees over these frames.\n- Each frame's rotation is inserted as a keyframe, making a smooth animation of the plane spinning on the X-axis.\n\nYou can adjust the `frame_start` and `frame_end` variables to control the speed of the rotation or the total duration of the animation."
    },
    {
        "Text Input": "A cylinder performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cylinder in Blender using Python, you can utilize the Blender Python API (bpy). Below is a script that sets up a simple animation where a cylinder bounces up and down.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects to start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncylinder = bpy.context.active_object\n\n# Set up the bouncing animation\nframe_start = 1\nframe_end = 60\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\nbounce_height = 3  # Max height the cylinder will bounce\n\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate the vertical position of the cylinder using a sine wave\n    # This gives a smooth bouncing effect\n    z_position = abs(math.sin(math.pi * (frame/frame_end))) * bounce_height\n    \n    # Set the location of the cylinder\n    cylinder.location = (0, 0, z_position + 1)  # Add 1 to keep cylinder above ground level\n    \n    # Insert keyframe for cylinder's location\n    cylinder.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set interpolation to linear for more consistent speed (optional)\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Bouncing animation has been set up.\")\n```\n\n### Instructions:\n\n1. **Open Blender**: Make sure you have Blender open with a new or existing project.\n2. **Open a Script Editor**: Navigate to the Scripting workspace or open the Text Editor.\n3. **Create a New Script**: Copy the script above into a new text block in Blender.\n4. **Run the Script**: Press `Alt + P` or use the \"Run Script\" button to execute the script.\n5. **Play the Animation**: Use the timeline controls to play the animation and observe the cylinder bouncing.\n\n### Explanation:\n\n- **Object Creation**: The script starts by creating a new cylinder at `(0, "
    },
    {
        "Text Input": "A plane flips upside down.",
        "Blender Script": "To create a Blender Python script that flips a plane upside down, you will first need to ensure that you have a plane object in your Blender scene. The script will rotate the plane 180 degrees around its local X-axis to flip it upside down. Here\u2019s a simple example of such a script:\n\n```python\nimport bpy\nimport math\n\n# Ensure the context is set to 'OBJECT' mode\nif bpy.context.active_object is None or bpy.context.active_object.type != 'MESH':\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.context.view_layer.objects.active = bpy.context.selected_objects[0]\n\n# Check if there is an active object and it's a mesh\nactive_obj = bpy.context.active_object\nif active_obj and active_obj.type == 'MESH':\n    # Assuming the active object is your plane\n    obj = active_obj\n    \n    # Set the pivot point to the object's origin\n    bpy.context.scene.tool_settings.transform_pivot_point = 'MEDIAN_POINT'\n    \n    # Rotate the plane 180 degrees around its local X-axis\n    # Rotate (flip upside down) 180 degrees, equivalent to pi radians\n    obj.rotation_euler[0] += math.pi\n\n    # Update the scene\n    bpy.context.view_layer.update()\n\nelse:\n    print(\"No active mesh object found. Make sure you have a plane selected.\")\n\n```\n\n### Instructions to Run the Script:\n1. **Open Blender** and load your scene.\n2. **Ensure you have a Plane object** in the scene. You can easily add one by pressing `Shift + A` > Mesh > Plane.\n3. **Select the Plane** to make it the active object.\n4. Open a **new Text Editor** window in Blender.\n5. Copy the script above into the text editor.\n6. Press **Alt + P** to run the script.\n\nThis will rotate the plane 180 degrees around the x-axis, effectively flipping it upside down. Ensure the plane is aligned with the global x-axis first, as the script rotates around the plane's local x-axis."
    },
    {
        "Text Input": "A cube zooms in and out.",
        "Blender Script": "To create a Blender Python script that animates a cube zooming in and out, you'll first need to set up the scene by adding a cube and then animate its scale to achieve the zoom effect. Here is a basic script that does exactly that:\n\n```python\nimport bpy\n\n# Function to clear all existing objects in the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Function to create a cube\ndef create_cube():\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\n    cube = bpy.context.active_object\n    return cube\n\n# Function to add a zoom in and out animation to the cube\ndef animate_cube(cube):\n    # Set the frame range for the animation\n    bpy.context.scene.frame_start = 1\n    bpy.context.scene.frame_end = 120\n\n    # Animate scale to simulate zoom in/out\n    keyframes = {\n        1: (1, 1, 1),\n        30: (2, 2, 2),   # Zoom in\n        60: (1, 1, 1),   # Back to original\n        90: (0.5, 0.5, 0.5),  # Zoom out\n        120: (1, 1, 1)   # Back to original\n    }\n\n    for frame, scale in keyframes.items():\n        cube.scale = scale\n        cube.keyframe_insert(data_path=\"scale\", frame=frame)\n\n    # Setting interpolation type to Linear for consistent speed\n    for fcurve in cube.animation_data.action.fcurves:\n        for kp in fcurve.keyframe_points:\n            kp.interpolation = 'LINEAR'\n\n# Main function to run the entire setup\ndef main():\n    clear_scene()\n    cube = create_cube()\n    animate_cube(cube)\n\n# Run the main function\nmain()\n```\n\n### Instructions to Use the Script:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new script file and paste the code above into the text editor.\n3. Click the \"Run Script\" button.\n\nThis script will:\n- Clear any existing objects in your scene.\n- Add a default cube at the origin.\n- Animate the cube's scale property to achieve a zoom in and out effect over 120 frames with keyframes set at"
    },
    {
        "Text Input": "A plane rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a plane around the X-axis, follow these steps. This script will create a plane and rotate it around the X-axis continuously. You'll run this script within Blender's scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Delete default objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\n# Get the plane object\nplane = bpy.context.active_object\nplane.name = \"Rotating Plane\"\n\n# Set the rotation speed (radians per frame)\nrotation_speed = math.radians(5)  # 5 degrees per frame\n\n# Define an animation handler function\ndef rotate_plane(scene):\n    plane.rotation_euler[0] += rotation_speed\n\n# Ensure the handler isn't added multiple times\nif not bpy.app.handlers.frame_change_pre:\n    bpy.app.handlers.frame_change_pre.append(rotate_plane)\n\n# (Optional) Set up a basic scene for better visibility\n# Move the camera back\ncamera = bpy.data.objects['Camera']\ncamera.location = (5, -5, 5)\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Add a light source\nbpy.ops.object.light_add(type='POINT', location=(5, 5, 5))\nlight = bpy.context.active_object\nlight.data.energy = 1000\n\n# Play the animation timeline\nbpy.ops.screen.animation_play()\n\n# To stop the script, you can remove the handler when needed\n# bpy.app.handlers.frame_change_pre.remove(rotate_plane)\n```\n\n### Explanation:\n- **Object Creation and Deletion**: The script first deletes all existing mesh objects to start clean. It then adds a plane to the scene.\n- **Animation Handler**: A function is defined to rotate the plane. This is added to the `frame_change_pre` handler, which means it will execute every time the frame changes (when the timeline progresses).\n- **Rotation Logic**: The `rotation_euler` property of the plane is adjusted by the `rotation_speed` every frame change, causing the plane to rotate.\n- **Scene Setup**: The script adjusts the camera and adds a light for better visibility.\n- **"
    },
    {
        "Text Input": "A cone jumps up and lands.",
        "Blender Script": "To create an animation in Blender where a cone jumps up and lands, you can use the Blender Python API to script the process. Below is an example of a Python script that achieves this. It assumes that you have a basic understanding of Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Set the scene frame parameters\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 40\n\n# Initial position\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=1)\n\n# Jump upwards\ncone.location = (0, 0, 3)\ncone.keyframe_insert(data_path=\"location\", frame=10)\n\n# Gravity pulls it back down\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=20)\n\n# Add bounce effect\ncone.location = (0, 0, 1)\ncone.keyframe_insert(data_path=\"location\", frame=30)\n\n# Settle back to ground\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=40)\n\n# Add a little rotation to make it look more dynamic\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\ncone.rotation_euler = (0, 0, math.radians(360))\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=40)\n\n# Set interpolation to linear for a bounce effect\nfor fcurve in cone.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\n### Explanation:\n1. **Delete Existing Objects**: The script starts by removing any existing objects in the scene.\n2. **Add Cone**: A cone is added to the origin.\n3. **Set Frame Range**: The animation frames are set from 1 to 40.\n4. **Keyframes for Jump**:\n   - **Frame"
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "To create a Blender Python script where a cone zooms in and out, we can use a simple animation script that moves the camera towards and away from the cone. Here's a script that sets up such an animation using keyframes:\n\n```python\nimport bpy\n\ndef create_cone():\n    bpy.ops.mesh.primitive_cone_add(\n        radius1=1, \n        depth=2, \n        location=(0, 0, 1)\n    )\n    return bpy.context.active_object\n\ndef setup_camera():\n    # Delete existing camera\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.data.objects['Camera'].select_set(True)\n    bpy.ops.object.delete()\n    \n    # Create a new camera\n    bpy.ops.object.camera_add(location=(0, -5, 1))\n    camera = bpy.context.object\n    camera.name = \"Zooming Camera\"\n    \n    # Point the camera at the origin (where the cone is centered)\n    constraint = camera.constraints.new(type='TRACK_TO')\n    constraint.target = bpy.data.objects['Cone']\n    constraint.track_axis = 'TRACK_NEGATIVE_Z'\n    constraint.up_axis = 'UP_Y'\n    \n    return camera\n\ndef animate_camera(camera):\n    # Set animation keyframes\n    # Frame 1: Camera starts close to the cone\n    camera.location = (0, -3, 1)\n    camera.keyframe_insert(data_path=\"location\", frame=1)\n    \n    # Frame 30: Camera zooms out\n    camera.location = (0, -8, 1)\n    camera.keyframe_insert(data_path=\"location\", frame=30)\n    \n    # Frame 60: Camera returns back close to the cone\n    camera.location = (0, -3, 1)\n    camera.keyframe_insert(data_path=\"location\", frame=60)\n    \n    # Set the timeline end frame\n    bpy.context.scene.frame_end = 60\n\ndef main():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Create a cone\n    cone = create_cone()\n    cone.name = 'Cone'\n    \n    # Setup the camera\n    camera = setup_camera()\n    \n    # Animate camera to zoom in and out\n    animate_camera(camera)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Instructions:\n\n1. **"
    },
    {
        "Text Input": "A cube expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a cube expand and shrink, we'll use Blender's scripting capabilities to animate the scaling of a cube. This script will programmatically add a cube to the scene and animate its size using keyframes. Let's assume we want this animation to loop smoothly over a certain number of frames.\n\nHere's how you can achieve this in Blender using Python scripting:\n\n```python\nimport bpy\n\n# Function to clear existing objects from the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Clear existing objects\nclear_scene()\n\n# Add a new cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Insert keyframes for scaling\nframe_start = 1\nframe_middle = 30\nframe_end = 60\n\n# Set the frame to start and insert the first keyframe for scale\nbpy.context.scene.frame_set(frame_start)\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the frame to middle (maximum expansion) and insert a keyframe for scale\nbpy.context.scene.frame_set(frame_middle)\ncube.scale = (2, 2, 2)\ncube.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the frame to end and insert the last keyframe for scale (back to original size)\nbpy.context.scene.frame_set(frame_end)\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", index=-1)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frame_end\n\n# Optional: Set the animation to loop by adjusting extrapolation mode\nfor fcurve in cube.animation_data.action.fcurves:\n    mod = fcurve.modifiers.new(type='CYCLES')\n```\n\n### Explanation\n\n1. **Clearing the Scene**: The function `clear_scene()` selects and deletes all objects to start with a clean scene.\n\n2. **Adding a Cube**: The script uses `bpy.ops.mesh.primitive_cube_add()` to create a new cube at the origin.\n\n3. **Keyframing Scale**:\n   - Three keyframes are set: at the start, middle, and end of the animation.\n   - The cube starts at normal size `(1"
    },
    {
        "Text Input": "A cube zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a cube zoom in and out, you can use the following script. This script will animate the scale of a cube object over time:\n\n```python\nimport bpy\n\n# Create a new cube\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Define the animation frame range\nstart_frame = 1\nzoom_in_frame = 20\nzoom_out_frame = 40\nend_frame = 60\n\n# Set initial scale keyframe\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Scale the cube up (zoom in) and set keyframe\ncube.scale = (2, 2, 2)\ncube.keyframe_insert(data_path=\"scale\", frame=zoom_in_frame)\n\n# Scale the cube back to original (zoom out) and set keyframe\ncube.scale = (1, 1, 1)\ncube.keyframe_insert(data_path=\"scale\", frame=zoom_out_frame)\n\n# Scale the cube up again and set keyframe\ncube.scale = (2, 2, 2)\ncube.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the scene frame range for playback\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set timeline to the start\nbpy.context.scene.frame_current = start_frame\n\n# Optional: play the animation\n# bpy.ops.screen.animation_play()\n\nprint(\"Cube zoom in and out animation created.\")\n```\n\nThis script does the following:\n\n1. Adds a new cube to the scene.\n2. Sets keyframes for scaling the cube at different frames to animate the zoom in and out effect.\n3. Configures the scene's frame start and end to match the animation timeline.\n4. Optionally, you can uncomment the line to play the animation automatically.\n\nSimply run this script in Blender's Text Editor with a new or existing Blender file. Adjust the frame numbers or scaling values as needed to customize the animation."
    },
    {
        "Text Input": "A sphere spins while floating.",
        "Blender Script": "Below is a Blender Python script that will create a spinning sphere in Blender. This script sets up an animation where a sphere rotates around its own axis, appearing as if it is spinning while floating in space.\n\n```python\nimport bpy\nimport math\n\n# Delete the default cube\nbpy.ops.object.select_all(action='DESELECT')\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"SpinningSphere\"\n\n# Set up the animation\nframes_per_second = 24\nrotation_duration = 5 # seconds for a full rotation\n\n# Calculate total number of frames for the entire rotation\ntotal_frames = frames_per_second * rotation_duration\n\n# Set frame start and end\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\n# Keyframe the sphere's rotation\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=0)\n\nsphere.rotation_euler = (0, 0, math.radians(360))\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=total_frames)\n\n# Set interpolation type to linear\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Position the camera to view the sphere\ncamera_data = bpy.data.cameras.new(name='Camera')\ncamera_object = bpy.data.objects.new('Camera', camera_data)\nbpy.context.collection.objects.link(camera_object)\nbpy.context.scene.camera = camera_object\ncamera_object.location = (3, -3, 2)\ncamera_object.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Add a light source\nlight_data = bpy.data.lights.new(name=\"Light\", type='POINT')\nlight_object = bpy.data.objects.new(name=\"Light\", object_data=light_data)\nbpy.context.collection.objects.link(light_object)\nlight_object.location = (5, -5, 5)\n\nprint(\"Spinning sphere created and animated.\")\n```\n\n### Explanation:\n- **Sphere Creation:** A UV sphere is created at the"
    },
    {
        "Text Input": "A monkey bounces like a ball.",
        "Blender Script": "To create a Blender Python script that makes a monkey model (Suzanne) bounce like a ball, we need to take the following steps:\n\n1. Create a monkey mesh.\n2. Create an animation that moves the monkey up and down like a bouncing ball.\n3. Set keyframes for the bouncing motion.\n\nBelow is a script that should achieve this:\n\n```python\nimport bpy\n\n# Function to create a monkey (Suzanne) mesh\ndef create_monkey():\n    bpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\n    monkey = bpy.context.object\n    return monkey\n\n# Function to create bouncing animation\ndef animate_bounce(monkey, frames_per_bounce=20, bounces=10):\n    # Initial position\n    start_height = 0\n    # Bounce height\n    bounce_height = 2\n\n    # Setup animation frames\n    for bounce in range(bounces):\n        # Calculate frame numbers\n        start_frame = bounce * frames_per_bounce\n        mid_frame = start_frame + frames_per_bounce // 2\n        end_frame = start_frame + frames_per_bounce\n\n        # Start position keyframe\n        monkey.location.z = start_height\n        monkey.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n        # Mid bounce position keyframe (peak)\n        monkey.location.z = start_height + bounce_height\n        monkey.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n\n        # End position keyframe\n        monkey.location.z = start_height\n        monkey.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n        # Reduce next bounce's height (simulate energy loss)\n        bounce_height *= 0.8  # You can adjust this factor for energy loss\n\n# Main execution\nbpy.ops.object.select_all(action='DESELECT')\n\n# Create the monkey object\nmonkey = create_monkey()\n\n# Animate the monkey to bounce like a ball\nanimate_bounce(monkey)\n\n# Set the end frame for the timeline to match the animation\nbpy.context.scene.frame_end = (10 * 20)  # 10 bounces * frames_per_bounce\n\n# Optionally, switch to the first frame\nbpy.context.scene.frame_set(0)\n\n# Just play the animation for a quick preview\nbpy.ops.screen.animation_play()\n```\n\nTo use this script effectively:\n\n1"
    },
    {
        "Text Input": "A plane jumps up and lands.",
        "Blender Script": "Creating a simple Blender animation script where a plane jumps up and lands involves using Blender's Python API to manipulate objects and keyframes. Below is a script that achieves this by creating a plane, applying a simple animation to it, and setting keyframes to simulate a jumping effect.\n\n```python\nimport bpy\n\n# Clear default Blender scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set the start frame and end frame for the animation\nstart_frame = 1\npeak_frame = 10\nend_frame = 20\n\n# Set keyframe for the initial position of the plane at start_frame\nplane.location.z = 0\nplane.keyframe_insert(data_path='location', frame=start_frame)\n\n# Set keyframe for the peak of the jump\nplane.location.z = 2  # Jump height\nplane.keyframe_insert(data_path='location', frame=peak_frame)\n\n# Set keyframe for the landing position of the plane at end_frame\nplane.location.z = 0\nplane.keyframe_insert(data_path='location', frame=end_frame)\n\n# Set interpolation type to linear to simulate a more realistic jump\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the timeline to play the animation from start to end frame\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally set camera and lighting for a better view of the animation\n\n# Add a camera\nbpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(5, -5, 3))\ncamera = bpy.context.object\ncamera.rotation_euler = (1.1, 0, 0.9)\nbpy.context.scene.camera = camera\n\n# Add light (sun for even lighting)\nbpy.ops.object.light_add(type='SUN', location=(5, 5, 5))\n\n# To play the animation, you should run this script in Blender's scripting environment,\n# then press the play button in the timeline.\n\n# Save the Blender file (optional)\n# bpy.ops.wm.save_as_mainfile(filepath=\"plane_jump.blend\")\n```\n\n### Explanation:\n"
    },
    {
        "Text Input": "A cube rotates 360 degrees.",
        "Blender Script": "Certainly! Below is a simple Blender Python script that will create a cube and animate it to rotate 360 degrees around the Z-axis.\n\n```python\nimport bpy\n\n# Clear the existing scene\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\n\n# Get reference to the cube object\ncube = bpy.context.active_object\n\n# Set animation frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n\n# Set keyframe at the start of the animation\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set keyframe at the end of the animation (360 degrees = 2 * Pi radians)\ncube.rotation_euler = (0, 0, 2 * 3.14159)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=120)\n\n# Set the frame rate for the animation (Optional step)\nbpy.context.scene.render.fps = 24\n\n# You can choose to run the animation in Blender to see it in action\n# bpy.ops.screen.animation_play() # Uncomment this line to automatically play the animation\n```\n\n### Explanation:\n- **Scene Clearing**: This script starts by loading the default file with `bpy.ops.wm.read_homefile(use_empty=True)` to ensure that the scene is empty before adding a new cube.\n- **Cube Creation**: The `bpy.ops.mesh.primitive_cube_add()` function is used to add a new cube to the scene at the origin `(0, 0, 0)`.\n- **Animation Frame Range**: The frame start is set to 1 and the frame end is set to 120, which corresponds to a 5-second animation at 24 frames per second.\n- **Rotation and Keyframes**: The cube's rotation is set and keyframes are inserted at both the start and end of the animation timeline. The rotation for a full circle is represented as `2 * 3.14159` radians (which approximates \\(2\\pi\\)).\n- **FPS Setting**: Optionally, the script sets the frame rate of the rendered animation to 24 frames per second.\n- **Animation Play**: The `bpy.ops.screen.animation_play()` line is commented out"
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a sphere moving in a circular path, you can use the following steps. This script will create a sphere and animate it along a circle using keyframes. The animation will be set up for 250 frames by default, but you can adjust this as needed.\n\nHere's the script:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(2, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"MovingSphere\"\n\n# Set up animation path (circular path in the X-Y plane)\ndef animate_sphere(obj, frames=250, radius=2):\n    for frame in range(frames):\n        # Calculate the angle in radians\n        angle = (frame / frames) * (2 * math.pi)\n        \n        # Set the new location\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        z = 0  # Keep the sphere on the X-Y plane\n        \n        # Set the object location\n        obj.location = (x, y, z)\n        \n        # Insert a keyframe\n        obj.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Call the animation function\nanimate_sphere(sphere)\n\n# Set the end frame for playback\nbpy.context.scene.frame_end = 250\n```\n\n### Explanation:\n\n1. **Clear Existing Mesh Objects**: The script begins by deleting any existing mesh objects in the scene to ensure a clean start.\n\n2. **Create a Sphere**: It then creates a new UV sphere using `bpy.ops.mesh.primitive_uv_sphere_add`.\n\n3. **Animate the Sphere**: The `animate_sphere` function calculates the position of the sphere for each frame. It moves the sphere along a circle described by:\n   - `x = radius * cos(angle)`\n   - `y = radius * sin(angle)`\n   - `angle` is computed to make one full rotation over the specified number of frames.\n\n4. **Insert Keyframes**: For each frame, the sphere's position is updated and a keyframe is inserted for its location.\n\n5. **Set Scene Frame End**: Finally, the"
    },
    {
        "Text Input": "A plane moves diagonally upwards.",
        "Blender Script": "Creating a Blender Python script to animate a plane moving diagonally upwards involves setting up the scene, adding the plane, and creating keyframes to animate its movement. Here's a script that demonstrates this:\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a plane to the scene\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nplane = bpy.context.object\n\n# Set the number of frames for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Function to move the plane diagonally upwards\ndef animate_plane():\n    # Initial position (at frame 1)\n    plane.location = (0, 0, 0)\n    plane.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n    # Final position (at end_frame)\n    plane.location = (10, 10, 10)  # Moves diagonally from (0, 0, 0) to (10, 10, 10)\n    plane.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Run the animation function\nanimate_plane()\n\n# Set the animation playback to 'PLAY' mode\nbpy.context.scene.frame_set(start_frame)\nbpy.ops.screen.animation_play()\n\nprint(\"Plane animation created: moving diagonally upwards!\")\n```\n\n### How to Use This Script:\n\n1. Open Blender and ensure your script editor is visible (you can split the screen and view the Text Editor).\n2. Copy and paste the above script into the Text Editor.\n3. Run the script using the \"Run Script\" button.\n4. The script will clear the existing scene, add a new plane, and animate it to move diagonally upwards.\n\n### Explanation:\n\n- **Plane Creation**: The `primitive_plane_add` function adds a plane to the scene at the origin `(0, 0, 0)`.\n- **Animation Setup**: We use keyframes to interpolate the location of the plane from its starting point `(0, 0, 0)` to the ending point `(10, 10, 10)`, creating a diagonal motion upwards.\n- **Frames**: The animation runs over 100 frames, setting keyframes at `start_frame` and `end_frame`.\n-"
    },
    {
        "Text Input": "A monkey moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that makes a monkey (Suzanne) move in a spiral motion, we\u2019ll follow these steps:\n\n1. Add a Suzanne mesh to the scene.\n2. Create keyframes to animate the movement along a spiral path.\n\nBelow is a Blender Python script that will achieve this:\n\n```python\nimport bpy\nimport math\n\ndef clear_scene():\n    # Remove all existing objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef add_monkey(location=(0, 0, 0)):\n    # Add a new monkey (Suzanne) mesh to the scene\n    bpy.ops.mesh.primitive_monkey_add(location=location)\n    monkey = bpy.context.active_object\n    return monkey\n\ndef move_in_spiral(monkey, frames=250, turns=3, height_increment=0.1):\n    # Animate the monkey moving in a spiral\n    for frame in range(frames):\n        # Compute the angle for the spiral based on the number of turns\n        angle = (2 * math.pi * turns * frame) / frames\n        # Calculate the x, y position using a spiral formula\n        radius = frame / frames\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        z = frame * height_increment / frames\n        \n        # Set the location to the spiral position and keyframe it\n        monkey.location = (x, y, z)\n        monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\ndef main():\n    clear_scene()\n    \n    # Add a monkey to the center of the scene\n    monkey = add_monkey()\n    \n    # Move the monkey in a spiral over a specified number of frames\n    move_in_spiral(monkey)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script will:\n\n- Clear the current scene to start fresh.\n- Add a Suzanne (monkey) mesh to the scene.\n- Animate the monkey to move in a spiral pattern by updating its `x`, `y`, and `z` location on each frame and inserting a keyframe.\n\nTo use this script:\n\n1. Open Blender and switch to the 'Scripting' workspace.\n2. Create a new text block and paste the script into the editor.\n3. Run the script.\n\nThis will create an animation of Suzanne moving in a 3D spiral motion. Adjust the `frames`,"
    },
    {
        "Text Input": "A plane scales up and down.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a plane scaling up and down using keyframe animation. Before running the script, ensure you have Blender open with a new project ready:\n\n```python\nimport bpy\n\ndef create_plane():\n    # Remove default objects\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n    \n    # Create a new plane\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.active_object\n    plane.name = \"ScalingPlane\"\n    \n    return plane\n\ndef animate_scaling(obj, scale_min, scale_max, frame_start, frame_end):\n    # Set initial scale\n    obj.scale = (scale_min, scale_min, scale_min)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame_start)\n    \n    # Set scale to maximum at the mid frame\n    mid_frame = (frame_start + frame_end) // 2\n    obj.scale = (scale_max, scale_max, scale_max)\n    obj.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n    \n    # Set scale back to minimum at the end frame\n    obj.scale = (scale_min, scale_min, scale_min)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame_end)\n    \n    # Set interpolation to linear to make the scaling smooth\n    for fcurve in obj.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\ndef main():\n    scale_min = 1.0\n    scale_max = 3.0\n    frame_start = 1\n    frame_end = 60\n    \n    plane = create_plane()\n    animate_scaling(plane, scale_min, scale_max, frame_start, frame_end)\n\nmain()\n```\n\n### How to Use the Script:\n\n1. **Open Blender** and start with a new general project or remove existing objects by selecting them and pressing `X` then `Delete`.\n2. Go to the **Scripting** workspace in Blender.\n3. **Create a new Text Block**, and paste the above script into it.\n4. Click on **Run Script** or press `Alt + P` with the text editor active.\n\n### What the Script Does:\n\n- It clears the scene and creates a new plane at the"
    },
    {
        "Text Input": "A monkey performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a monkey object in Blender using Python, we can make use of Blender's animation system to add keyframes. Here we will create a script that animates the \"Suzanne\" monkey head, making it bounce along the Z-axis. Ensure you have Suzanne added to your scene before running the script. If it's not there, the script will add it for you.\n\nHere's the script:\n\n```python\nimport bpy\n\n# Delete existing meshes (if any) to avoid overlap\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a monkey if not already present\nbpy.ops.mesh.primitive_monkey_add(size=2)\nsuzanne = bpy.context.object\nsuzanne.name = \"BouncingMonkey\"\n\n# Set the initial location for Suzanne\nsuzanne.location = (0, 0, 0)\n\n# Define keyframes for bouncing effect\nframe_start = 1\nframe_end = 50\nbounce_height = 5\n\n# Clear existing animation data\nsuzanne.animation_data_clear()\n\n# Insert initial keyframe\nsuzanne.location.z = 0\nsuzanne.keyframe_insert(data_path=\"location\", index=2, frame=frame_start)\n\n# Insert bounce keyframe at peak\nsuzanne.location.z = bounce_height\nsuzanne.keyframe_insert(data_path=\"location\", index=2, frame=(frame_start + frame_end) / 2)\n\n# Insert final keyframe returning to start\nsuzanne.location.z = 0\nsuzanne.keyframe_insert(data_path=\"location\", index=2, frame=frame_end)\n\n# Make the animation cyclic so that it continues to bounce\naction = suzanne.animation_data.action\nfcurve = action.fcurves.find('location', index=2)\nmod = fcurve.modifiers.new(type='CYCLES')\nmod.mode_before = 'REPEAT'\nmod.mode_after = 'REPEAT'\n\n# Move the timeline to the start of the animation\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\nbpy.context.scene.frame_current = frame_start\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\nprint(\"Bouncing effect applied to Suzanne!\")\n```\n\n### How it works:\n- The script first clears any existing mesh objects to start with a clean scene.\n- It"
    },
    {
        "Text Input": "A cone performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a cone in Blender using Python, you can use the Blender Python API (bpy) to animate the movement of the cone along the Z-axis. The following script will set up a simple scene with a cone and apply keyframe animation to create a bouncing effect.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.active_object\n\n# Set up the animation parameters\nframes_per_bounce = 20\nnumber_of_bounces = 5\nbounce_height = 2\n\n# Add keyframes for the bounce effect\nfor bounce in range(number_of_bounces):\n    # Calculate the frame number\n    frame_start = bounce * frames_per_bounce\n    frame_middle = frame_start + frames_per_bounce // 2\n    frame_end = frame_start + frames_per_bounce\n\n    # Keyframe for the starting point of the bounce (on the ground)\n    cone.location[2] = 0\n    cone.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n    # Keyframe for the peak of the bounce (at bounce_height)\n    cone.location[2] = bounce_height\n    cone.keyframe_insert(data_path=\"location\", frame=frame_middle)\n    \n    # Keyframe for the landing point of the bounce (back on the ground)\n    cone.location[2] = 0\n    cone.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set the interpolation type to 'BOUNCE' for each fcurve\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'BOUNCE' # Use 'BOUNCE' interpolation for a realistic bounce effect\n\n# Set the total length of the animation\nbpy.context.scene.frame_end = number_of_bounces * frames_per_bounce\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\nHere is a breakdown of the script:\n\n- **Clearing the Scene:** The script starts by clearing any existing objects in the Blender scene to work with a fresh setup.\n  \n- **Creating a Cone:** It creates a cone at a specific location (z = "
    },
    {
        "Text Input": "A cylinder zooms in and out.",
        "Blender Script": "To create a Blender Python script that animates a cylinder zooming in and out, we will use Blender's Python API to manage object creation, animation keyframes, and camera movements. First, ensure you're running this script in Blender's scripting editor.\n\nHere's a script to achieve the animation of a cylinder zooming in and out:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Create a camera\nbpy.ops.object.camera_add(location=(0, -10, 2))\ncamera = bpy.context.active_object\ncamera.rotation_euler = (math.radians(90), 0, 0)\n\n# Set the camera as the active camera\nbpy.context.scene.camera = camera\n\n# Set zoom animation on cylinder's scale\nframe_num = 0\ntotal_frames = 240  # 10 seconds at 24fps\nzoom_in_out_factor = 2\n\n# Initially scale to normal size\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", frame=frame_num)\n\n# Zoom in by scale\nframe_num += total_frames // 4\ncylinder.scale = (zoom_in_out_factor, zoom_in_out_factor, zoom_in_out_factor)\ncylinder.keyframe_insert(data_path=\"scale\", frame=frame_num)\n\n# Return to normal size\nframe_num += total_frames // 4\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", frame=frame_num)\n\n# Zoom out by scale\nframe_num += total_frames // 4\ncylinder.scale = (1/zoom_in_out_factor, 1/zoom_in_out_factor, 1/zoom_in_out_factor)\ncylinder.keyframe_insert(data_path=\"scale\", frame=frame_num)\n\n# Back to normal size\nframe_num += total_frames // 4\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", frame=frame_num)\n\n# Set up animation playback range\nbpy.context.scene.frame_start = 0\nbpy.context"
    },
    {
        "Text Input": "A monkey oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a monkey mesh (Suzanne) oscillate in a sine wave, we'll animate its location using Blender's animation system. Here's how you can do it:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a monkey\nbpy.ops.mesh.primitive_monkey_add(size=1, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set up animation parameters\nnum_frames = 250  # Total number of frames for the animation\namplitude = 2.0   # Amplitude of the sine wave\nfrequency = 0.1   # Frequency of the sine wave\n\n# Insert keyframes for the monkey's oscillation animation\nfor frame in range(num_frames):\n    bpy.context.scene.frame_set(frame)  # Set the current frame\n    # Calculate the new position based on a sine wave\n    new_z = amplitude * math.sin(frequency * frame)\n    # Move the monkey in the Z-axis\n    monkey.location.z = new_z\n    # Insert the keyframe for the location\n    monkey.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the scene end frame\nbpy.context.scene.frame_end = num_frames\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\n```\n\nThis script performs the following actions:\n\n1. Clears existing objects in the scene to start fresh.\n2. Adds a monkey mesh (Suzanne) at the origin.\n3. Sets the total number of frames for the animation.\n4. Defines the amplitude and frequency of the sine wave for oscillation in the Z-axis.\n5. Iterates over each frame to calculate the new Z position based on the sine wave formula.\n6. Inserts keyframes for the monkey's Z-axis location, effectively animating it.\n7. Sets the scene's end frame to the defined number of frames.\n8. Plays the animation in the Blender viewport.\n\nYou can adjust the `num_frames`, `amplitude`, and `frequency` variables to change the duration and behavior of the oscillation."
    },
    {
        "Text Input": "A cube oscillates in a sine wave.",
        "Blender Script": "To make a cube oscillate in a sine wave using Blender's Python API, we need to animate the cube's position using keyframes that follow a sine wave pattern. Here is a simple script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Define animation parameters\nframe_start = 1\nframe_end = 250\nframe_rate = bpy.context.scene.render.fps\nsine_wave_amplitude = 2\nsine_wave_frequency = 0.1  # Controls the speed of oscillation\n\n# Set the keyframes for the cube to follow a sine wave in the Z axis\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the new Z position using a sine function\n    z_position = sine_wave_amplitude * math.sin(sine_wave_frequency * (frame - frame_start))\n    \n    # Set location for this frame\n    cube.location = (0, 0, z_position)\n    cube.keyframe_insert(data_path=\"location\", index=-1, frame=frame)\n\n# Set up scene\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set up interpolation type for smoother transitions (optional)\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\n```\n\n### Explanation\n- **Scene Setup**: The script starts by clearing any existing objects and then adds a new cube to the scene.\n- **Animation Parameters**: It defines the starting frame, ending frame, frame rate, sine wave amplitude, and frequency. The amplitude controls how far the cube moves in the Z-axis, and the frequency dictates how fast it oscillates.\n- **Keyframe Animation**: For each frame, the Z position of the cube is calculated and set using a sine function. The script then inserts a keyframe for the cube's location at each frame.\n- **Interpolation**: Lastly, the interpolation of the keyframes is set to 'SINE' to provide smoother transitions between frames.\n\nTo use this script, you"
    },
    {
        "Text Input": "A torus flips upside down.",
        "Blender Script": "To create a Blender Python script that animates a torus flipping upside down, we'll use Blender's animation API. If you haven't already, make sure you have a torus object in your Blender scene. You can add one by pressing `Shift + A` and selecting `Mesh > Torus`. Place this script into the text editor in Blender and run it. The script will create an animation for the torus flip.\n\n```python\nimport bpy\n\n# Clear previous animations\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = bpy.data.objects.get(\"Torus\")\nbpy.data.objects['Torus'].select_set(True)\nbpy.ops.anim.keyframe_clear_v3d()\n\n# Select the torus object\ntorus = bpy.data.objects.get(\"Torus\")\n\nif torus:\n    # Set current frame to 0\n    bpy.context.scene.frame_set(0)\n\n    # Make sure the torus is at its original rotation\n    torus.rotation_euler = (0, 0, 0)\n    torus.keyframe_insert(data_path=\"rotation_euler\", index=-1, frame=0)\n\n    # Flip the torus upside down over 50 frames\n    bpy.context.scene.frame_set(50)\n    torus.rotation_euler = (3.14159, 0, 0)  # Rotate 180 degrees (flip)\n    torus.keyframe_insert(data_path=\"rotation_euler\", index=-1, frame=50)\n\n    # Go back to start frame\n    bpy.context.scene.frame_set(0)\n    \n    print(\"Animation created: Torus will flip upside down between frame 0 to 50\")\n\nelse:\n    print(\"No torus object found in the scene.\")\n```\n\nHere's how the script works:\n1. It ensures that any existing animations on the torus are cleared.\n2. It sets the initial rotation at frame 0.\n3. It rotates the torus by 180 degrees on the X-axis over 50 frames.\n4. It inserts keyframes at frame 0 and frame 50 to create the flip animation.\n\nTo view the animation, move through the frames using the timeline in Blender or play the animation using the playback controls. Make sure your timeline is set to at least 50 frames to see the complete flip."
    },
    {
        "Text Input": "A cylinder moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a cylinder moving in a spiral motion, we need to animate its position over time using a mathematical model that defines such a motion. Here's a script that does just that:\n\n```python\nimport bpy\nimport math\n\ndef create_spiral_path(frame_start, frame_end, num_turns, radius_increment):\n    # Ensure there's no existing cylinder and curves\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.select_by_type(type='CURVE')\n    bpy.ops.object.delete()\n    \n    # Create a cylinder\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\n    cylinder = bpy.context.object\n    cylinder.name = \"SpiralCylinder\"\n\n    # Create a new curve path\n    curve_data = bpy.data.curves.new(name=\"SpiralPath\", type='CURVE')\n    curve_data.dimensions = '3D'\n    spiral_curve = bpy.data.objects.new(\"SpiralPathObj\", curve_data)\n    bpy.context.collection.objects.link(spiral_curve)\n\n    # Define spiral path\n    polyline = curve_data.splines.new('POLY')\n    num_points = frame_end - frame_start\n    polyline.points.add(num_points)\n\n    height_per_turn = 2 * math.pi * radius_increment\n    z_step = height_per_turn / num_points\n    \n    for i in range(num_points + 1):\n        t = i / num_points * num_turns * 2 * math.pi\n        x = radius_increment * t * math.cos(t)\n        y = radius_increment * t * math.sin(t)\n        z = z_step * i\n        polyline.points[i].co = (x, y, z, 1)\n\n    # Animate cylinder along the path\n    constraint = cylinder.constraints.new(type='FOLLOW_PATH')\n    constraint.target = spiral_curve\n    constraint.use_curve_follow = True\n\n    # Adding keyframes to the constraint's offset\n    constraint.offset_factor = 0.0\n    constraint.keyframe_insert(data_path=\"offset_factor\", frame=frame_start)\n    \n    constraint.offset_factor = 1.0\n    constraint.keyframe_insert(data_path=\"offset_factor\", frame=frame_end)\n\n# Parameters\nframe_start = 1\nframe_end = 250\nnum_turns = 5"
    },
    {
        "Text Input": "A torus performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a torus in Blender using Python, you can use the following script. This script sets up a torus object, animates its position to create a bouncing effect, and optionally adds a simple material for better visualization.\n\nFirst, make sure your Blender is set to run scripts by enabling \"Auto Run Python Scripts\" under Preferences if prompted. Here is the script:\n\n```python\nimport bpy\nimport math\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 1))\ntorus = bpy.context.active_object\ntorus.name = \"BouncingTorus\"\n\n# Function to add a simple material\ndef add_material(obj, name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    obj.data.materials.append(mat)\n\n# Add material to torus\nadd_material(torus, \"TorusMaterial\", (0.2, 0.5, 0.8, 1))\n\n# Set frame range\nstart_frame = 1\nend_frame = 60\nbounce_height = 5\n\n# Set the animation frames\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Keyframe the bouncing motion\nfor frame in range(start_frame, end_frame + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate bouncing effect using a sine wave\n    bounce = abs(math.sin(math.pi * (frame / (end_frame / 2)))) * bounce_height\n    \n    # Set the location with calculated bounce\n    torus.location.z = bounce\n    \n    # Insert keyframe for location\n    torus.keyframe_insert(data_path=\"location\", index=2)\n\n# Set the interpolation to 'LINEAR' for all keyframes\nfor fcurve in torus.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Bouncing torus animation completed.\")\n```\n\n**Explanation:**\n1. The script starts by deleting all existing objects in the scene to provide a clean workspace.\n2. A torus is added and named \"BouncingTorus\".\n3. A simple material is created and applied to"
    },
    {
        "Text Input": "A sphere moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a sphere moving diagonally upwards, you need to set up the sphere and its animation along the X, Y, and Z axes. Here's a basic example script that will do just that:\n\n```python\nimport bpy\n\n# Ensure there's no previous data\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Set up the scene with a lamp and camera\nbpy.ops.object.light_add(type='SUN', align='WORLD', location=(10, -10, 10))\nbpy.ops.object.camera_add(align='VIEW', location=(7, -7, 5))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\ncamera.rotation_euler = (1.1, 0, 0.8)\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set your animation parameters\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Insert keyframes for the sphere at the start\nsphere.location = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the final location diagonally upwards\nsphere.location = (5, 5, 5)\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Optionally, set interpolation to linear for a constant speed\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Animation Setup Complete\")\n```\n\n### How to Run the Script in Blender:\n\n1. **Open Blender** and switch to the scripting workspace.\n2. **Create a new text block** and paste the script into this block.\n3. **Run the script** by clicking the \"Run Script\" button or pressing `Alt+P` while the text block is focused.\n\n### Key Points of the Script:\n\n- The script begins by clearing the scene of any existing objects to ensure a fresh setup.\n- It adds a sun lamp and a camera to make sure the scene is well-lit and observable.\n- A UV sphere is created at the origin `(0, 0, 0)`.\n- We define an animation that moves the sphere"
    },
    {
        "Text Input": "A cone rotates on the X-axis.",
        "Blender Script": "To create a Blender script that animates a cone rotating on the X-axis, you can use the following Python script. This script will set up a simple animation that rotates the cone over a specified duration.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, depth=2, radius1=1, radius2=0, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set Animation Duration\nframe_start = 1\nframe_end = 120\n\n# Set keyframe for the start of the animation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Set keyframe for the end of the animation (rotated 360 degrees)\ncone.rotation_euler = (6.28319, 0, 0)  # 360 degrees in radians\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Set playback to loop correctly\nbpy.context.scene.frame_current = frame_start\n\nprint(\"Cone rotation animation set from frame {} to {}.\".format(frame_start, frame_end))\n\n# Optionally, set the scene to render at 24 frames per second\nbpy.context.scene.render.fps = 24\n```\n\n### How to Use This Script:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Copy the script above into a new script file in Blender's text editor.\n3. Make sure there are no important unsaved changes in your current Blender project, as this script will delete all existing objects.\n4. Click the \"Run Script\" button in the text editor to execute the script.\n5. Switch to the \"Layout\" workspace, press the space bar, or use the timeline controls to play the animation and see the cone rotate around the X-axis.\n\nThis script creates a cone and sets up a keyframed rotation animation over 120 frames, equivalent to a 5-second animation if your frame rate is 24 frames per second. You can adjust `frame_end` to suit the desired duration of your animation."
    },
    {
        "Text Input": "A cone zooms in and out.",
        "Blender Script": "To create a Blender Python script that makes a cone zoom in and out, you can use the following code. This script will animate the scaling of a cone object along the Z-axis, creating a zoom in and out effect. Please ensure you have a new Blender project open and then run the following script in Blender's Scripting tab:\n\n```python\nimport bpy\n\n# Delete default objects if they exist\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the animation frames\nstart_frame = 1\nmiddle_frame = 50\nend_frame = 100\n\n# Initial Scale (Zoom In)\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Scale Down (Zoom Out)\ncone.scale = (0.5, 0.5, 0.5)\ncone.keyframe_insert(data_path=\"scale\", frame=middle_frame)\n\n# Scale Back to Initial (Zoom In again)\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the frame range for playback\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set up the animation curves for smoothness\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        # This makes the scaling effect smoother\n        keyframe.interpolation = 'SINE'\n\nprint(\"Cone zoom in and out animation created successfully!\")\n```\n\n### How to run the script:\n\n1. Open Blender and navigate to the \"Scripting\" workspace.\n2. Create a new text file and paste the script into it.\n3. Click the \"Run Script\" button to execute the script.\n\n### What this script does:\n\n- Clears the default cube from the scene.\n- Adds a new cone at the origin.\n- Animates the scale of the cone to zoom in and out by inserting keyframes.\n- Sets up a frame range for the animation to loop between frames 1 and 100.\n- Smoothes out the animation using sine interpolation for a"
    },
    {
        "Text Input": "A cylinder wiggles side to side.",
        "Blender Script": "Certainly! To create a script in Blender where a cylinder wobbles side to side, you can use the following Python script. This script will create a cylinder, add a keyframe animation to it, and then use the Graph Editor to add some noise for the wiggling effect.\n\n```python\nimport bpy\nimport random\n\n# Delete default objects (if any exist)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, enter_editmode=False, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set the duration of the animation\nframe_start = 1\nframe_end = 100\n\n# Insert keyframes for wiggle effect\ncylinder.location = (0, 0, 0)  # Starting location\ncylinder.keyframe_insert(data_path=\"location\", index=1, frame=frame_start)  # y = 0 at frame 1\n\ncylinder.location.y = 1  # Move to y = 1\ncylinder.keyframe_insert(data_path=\"location\", index=1, frame=frame_start + (frame_end-frame_start) // 4)\n\ncylinder.location.y = -1  # Move to y = -1\ncylinder.keyframe_insert(data_path=\"location\", index=1, frame=frame_start + 2 * (frame_end-frame_start) // 4)\n\ncylinder.location.y = 1  # Move back to y = 1\ncylinder.keyframe_insert(data_path=\"location\", index=1, frame=frame_start + 3 * (frame_end-frame_start) // 4)\n\ncylinder.location.y = 0  # Back to rest position\ncylinder.keyframe_insert(data_path=\"location\", index=1, frame=frame_end)\n\n# Add noise modifier to the y-location to create wiggling\nfcurve = cylinder.animation_data.action.fcurves.find(data_path=\"location\", index=1)\nnoise_mod = fcurve.modifiers.new(type='NOISE')\nnoise_mod.strength = 0.5  # Amount of noise\nnoise_mod.scale = 10.0    # Scale of the noise\nnoise_mod.phase = random.randint(0, 10)\n\n# Play the animation in the Timeline\nb"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using a Python script, we can utilize Blender's animation functions. Below is a script that animates a plane object to move up and down along the Z-axis to simulate a bouncing effect.\n\n```python\nimport bpy\nimport math\n\n# Ensure we start with a clean scene by deleting existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a plane to the scene\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\nplane.name = 'BouncingPlane'\n\n# Define animation parameters\nframe_start = 1\nframe_end = 100\nbounce_height = 2\nbounce_frequency = 10  # Number of bounces\n\n# Set the scene frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Animate the bouncing effect on the Z-axis\nfor frame in range(frame_start, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate bounce height at the given frame using a sine function for smooth motion\n    # This creates a slow in, fast out, and a slow in movement (a bounce effect)\n    cycles = bounce_frequency * (frame - frame_start) / (frame_end - frame_start)\n    bounce_z = abs(bounce_height * math.sin(math.pi * cycles))  # Absolute value for the bounce motion\n    \n    # Set location for each frame\n    plane.location = (0, 0, bounce_z)\n    plane.keyframe_insert(data_path='location', index=2)  # Only key the Z-axis\n\n# Optional: Add some easing by changing the interpolation type\nfor fcurve in plane.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'BEZIER'  # Change interpolation to BEZIER for easing effect\n\n# Switch to object mode if not already there\nif bpy.context.mode != 'OBJECT':\n    bpy.ops.object.mode_set(mode='OBJECT')\n\nprint(\"Bouncing plane animation has been created.\")\n```\n\nExplanation:\n- The script starts by cleaning the scene and adding a new plane object.\n- It sets the animation parameters including bounce height, frequency, and frame range.\n- Using a sine function to simulate the bounce"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a monkey mesh (Suzanne) on the X-axis, you can use the following script. This script will add a monkey mesh to the scene and animate it rotating around the X-axis.\n\n```python\nimport bpy\n\ndef clear_scene():\n    # Delete all existing objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef create_monkey():\n    # Add a monkey (Suzanne) mesh to the scene\n    bpy.ops.mesh.primitive_monkey_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n\ndef rotate_monkey_x(obj, start_frame, end_frame, rotation_amount):\n    # Set the object to the starting frame\n    bpy.context.scene.frame_set(start_frame)\n    \n    # Set initial rotation keyframe on the X-axis\n    obj.rotation_euler[0] = 0\n    obj.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\n    # Set the object to the ending frame\n    bpy.context.scene.frame_set(end_frame)\n\n    # Rotate the monkey on the X axis\n    obj.rotation_euler[0] = rotation_amount\n    obj.keyframe_insert(data_path=\"rotation_euler\", index=0)\n\ndef main():\n    # Clear existing objects\n    clear_scene()\n\n    # Create a new monkey mesh\n    create_monkey()\n\n    # Get the created monkey object\n    monkey_obj = bpy.context.active_object\n\n    # Define animation parameters\n    start_frame = 1\n    end_frame = 250\n    rotation_degrees = 360  # Rotate 360 degrees\n    rotation_radians = radians(rotation_degrees)\n\n    # Rotate the monkey on the X-axis\n    rotate_monkey_x(monkey_obj, start_frame, end_frame, rotation_radians)\n\n    # Set the scene's start and end frames for animation playback\n    bpy.context.scene.frame_start = start_frame\n    bpy.context.scene.frame_end = end_frame\n\nif __name__ == \"__main__\":\n    from math import radians\n    main()\n```\n\n**Instructions to run the script:**\n\n1. Open Blender and switch to the scripting workspace.\n2. Copy and paste the above script into a new text block in the Blender text editor.\n3. Click on \"Run Script\" to execute the code.\n\nThis script will clear any existing objects from the scene,"
    },
    {
        "Text Input": "A plane orbits around another object.",
        "Blender Script": "To create a Blender Python script where a plane orbits around another object, we'll need to set up the scene with a plane and a target object, then animate the plane to follow an orbital path around the target. We can achieve this using Blender's Python API. The script will involve creating objects, defining a path, and setting keyframes for the animation.\n\nHere's a step-by-step Python script for Blender:\n\n```python\nimport bpy\nimport math\n\n# Clear existing data\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Create a plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(5, 0, 0))\nplane = bpy.context.active_object\nplane.name = \"OrbitingPlane\"\n\n# Create a target object (e.g., a sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\ntarget = bpy.context.active_object\ntarget.name = \"TargetObject\"\n\n# Set the orbit center (where the target object is located)\norbit_center = target.location\n\n# Define the number of frames for the full orbit\ntotal_frames = 250\n\n# Set up an animation loop\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = total_frames\n\n# Keyframe the plane's location to orbit around the target\nfor frame in range(1, total_frames + 1):\n    # Calculate the angle in radians for the current frame\n    angle = (frame / total_frames) * 2 * math.pi\n    \n    # Define the radius of the orbit\n    radius = 5.0\n    \n    # Calculate the new position of the plane in the orbital path\n    new_x = orbit_center.x + radius * math.cos(angle)\n    new_y = orbit_center.y + radius * math.sin(angle)\n    new_z = plane.location.z  # Keep the same z-level\n    \n    # Set the plane's location\n    plane.location = (new_x, new_y, new_z)\n    \n    # Insert keyframe for the plane's location\n    plane.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Optionally, add more visual elements like lighting and camera\n# Add light\nbpy.ops.object.light_add(type='SUN', radius=1, location=(10, -10, 10))\n\n# Add"
    },
    {
        "Text Input": "A cube tilts back and forth.",
        "Blender Script": "To create a simple Blender animation where a cube tilts back and forth, you can use the following Python script. This script sets up keyframes to animate the rotation of the cube along the X-axis.\n\n```python\nimport bpy\nimport math\n\n# Set up the scene\nbpy.ops.object.select_all(action='DESELECT')\n\n# Delete the default cube (if it exists) and create a new one\nif \"Cube\" in bpy.data.objects:\n    bpy.data.objects['Cube'].select_set(True)\n    bpy.ops.object.delete()\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\n\n# Set the initial keyframe\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set the mid-tilt keyframe\ncube.rotation_euler = (math.radians(30), 0, 0)  # 30 degrees in radians\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=25)\n\n# Set the end keyframe back to the original tilt\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\n# Set the playback range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 50\nbpy.context.scene.frame_set(1)\n\n# Add a little more realism with smooth transitions\nfor fcurve in cube.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'  # Smooth transition for tilt\n\nprint(\"Tilt animation created successfully.\")\n```\n\n### Instructions\n\n1. Open Blender and switch to the scripting workspace.\n2. Create a new text block in the text editor and paste the script above.\n3. Run the script by clicking the \"Run Script\" button in the text editor toolbar.\n4. Play the animation using the playback controls to see the cube tilting back and forth.\n\nThis script creates a new cube, applies a rotation animation along the X-axis, and sets up keyframes at specific frames to achieve a tilting effect. Adjust the frame numbers and angles to customize the animation duration and tilt angle."
    },
    {
        "Text Input": "A torus rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that adds a torus and makes it rotate around the X-axis, you can use the following code. This script uses Blender's Python API to set up an animation that rotates a torus. Make sure this script is run in Blender's scripting environment.\n\n```python\nimport bpy\n\n# Create a torus mesh\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\n\n# Get the reference to the created torus\ntorus = bpy.context.active_object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 250\n\n# Set the animation at the starting frame\nbpy.context.scene.frame_set(start_frame)\n# Set the initial rotation\ntorus.rotation_euler = (0.0, 0.0, 0.0)\n# Insert the keyframe for rotation\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Set the animation at the ending frame\nbpy.context.scene.frame_set(end_frame)\n# Set the final rotation (2*pi = 360 degrees) on the X-axis\ntorus.rotation_euler = (6.28319, 0.0, 0.0)  # Equivalent to 360 degrees\n# Insert the keyframe for rotation\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the interpolation type to linear to maintain constant speed\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\n# Set the end frame of the animation timeline\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Torus rotation setup completed.\")\n```\n\n### Script Explanation:\n- **Creating the Torus**: Uses `bpy.ops.mesh.primitive_torus_add` to add a torus at the origin.\n- **Keyframes**: Sets up two keyframes \u2014 one at the start and another at the end of the animation. The torus is rotated 360 degrees around the X-axis.\n- **Linear Interpolation**: Ensures the rotation is smooth and at a constant speed by setting the interpolation to 'LINEAR'.\n- **Animation Timing**: The animation is set to run from frame 1 to frame 250.\n\n### How to Use:\n1. Open Blender and switch to the scripting tab.\n2."
    },
    {
        "Text Input": "A cone scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a cone scale up and down, we can utilize Blender's Python API to animate the scaling of a cone object. Below is a script that creates a cone in Blender, and animates its scale property to make it scale up and down over time.\n\n```python\nimport bpy\n\ndef clear_all_objects():\n    # Delete all objects in the scene\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\ndef create_cone():\n    # Create a cone and return the object\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\n    return bpy.context.active_object\n\ndef setup_animation(obj, start_frame, end_frame, scale_factor):\n    # Animate the scale of the object\n    obj.scale = (1, 1, 1)\n    obj.keyframe_insert(data_path=\"scale\", frame=start_frame)\n    \n    # Scale up\n    obj.scale = (scale_factor, scale_factor, scale_factor)\n    obj.keyframe_insert(data_path=\"scale\", frame=(start_frame + end_frame) // 2)\n    \n    # Scale down\n    obj.scale = (1, 1, 1)\n    obj.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\ndef animate_cone():\n    # Clear existing objects in the scene\n    clear_all_objects()\n    \n    # Create a new cone\n    cone = create_cone()\n    \n    # Define animation parameters\n    start_frame = 1\n    end_frame = 60\n    scale_factor = 2.0  # How much the cone scales up\n    \n    # Setup the animation\n    setup_animation(cone, start_frame, end_frame, scale_factor)\n    \n    # Set the end frame of the scene\n    bpy.context.scene.frame_end = end_frame\n\n# Run the animation setup\nanimate_cone()\n```\n\n### Explanation:\n\n1. **clear_all_objects()**: This function removes all existing objects in the Blender scene to start with a clean slate.\n\n2. **create_cone()**: This function creates a cone using `bpy.ops.mesh.primitive_cone_add()` and returns the created object.\n\n3. **setup_animation()**: This function sets keyframes to animate the scale of the cone. It starts at its original size, scales up to a defined factor, and then back down to"
    },
    {
        "Text Input": "A monkey zooms in and out.",
        "Blender Script": "To create a Blender Python script where a monkey (Suzanne, the built-in monkey mesh) zooms in and out, you can use keyframe animation. This script will create the monkey object if it doesn't exist, then animate it by changing its scale over time to give it a zooming in and out effect.\n\nHere's a script to achieve that:\n\n```python\nimport bpy\n\n# Create a new monkey mesh\ndef create_monkey():\n    bpy.ops.mesh.primitive_monkey_add(size=2.0, location=(0, 0, 0))\n    monkey = bpy.context.active_object\n    monkey.name = \"ZoomingMonkey\"\n    return monkey\n\n# Check if the monkey already exists\nmonkey = bpy.data.objects.get('ZoomingMonkey')\nif not monkey:\n    monkey = create_monkey()\n\n# Set the animation frame range\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_end = end_frame\n\n# Clear existing keyframes\nmonkey.animation_data_clear()\n\n# Function to set keyframes for zooming effect\ndef set_zoom_animation(obj, start, end):\n    zoom_in_scale = (2.0, 2.0, 2.0)\n    zoom_out_scale = (1.0, 1.0, 1.0)\n\n    # Set keyframe for zoom in\n    obj.scale = zoom_in_scale\n    obj.keyframe_insert(data_path=\"scale\", frame=start)\n\n    # Set keyframe for zoom out at the end of the cycle\n    obj.scale = zoom_out_scale\n    obj.keyframe_insert(data_path=\"scale\", frame=(start + end) // 2)\n\n    # Loop back to zoom in\n    obj.scale = zoom_in_scale\n    obj.keyframe_insert(data_path=\"scale\", frame=end)\n\n# Apply the zoom animation\nset_zoom_animation(monkey, start_frame, end_frame)\n\n# Set interpolation type to linear for consistent speed\nfor fcurve in monkey.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Monkey zoom in and out animation created successfully.\")\n```\n\n### Instructions to use the script:\n\n1. Open Blender and navigate to the scripting workspace.\n2. Create a new text block and paste the script above.\n3. Run the script by clicking the 'Run Script' button.\n\nThis will create a monkey object and animate its scale to"
    },
    {
        "Text Input": "A cone tilts back and forth.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a simple animation of a cone tilting back and forth. The script uses Blender's `bpy` module to create the cone and set keyframes for its rotation.\n\n```python\nimport bpy\nfrom math import radians\n\n# Delete default objects to start fresh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set initial keyframe for rotation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# First tilt back\ncone.rotation_euler = (radians(15), 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=25)\n\n# Bring it forward\ncone.rotation_euler = (radians(-15), 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\n# Return to initial rotation\ncone.rotation_euler = (0, 0, 0)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=75)\n\n# Set animation end frame\nbpy.context.scene.frame_end = 75\n\n# Set Linear interpolation for smooth constant motion\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'LINEAR'\n\nprint(\"Cone tilting animation created.\")\n```\n\n### Instructions:\n\n1. **Open Blender**, make sure you have the scripting workspace open.\n2. **Create a new text file** in the Text Editor pane.\n3. **Copy and paste** the above script into the text file.\n4. Click on **\"Run Script\"** to execute. This will create a cone and set up the animation.\n5. Use the Timeline to play the animation and watch the cone tilt back and forth.\n\nAdjust the parameters in the script as needed to modify the tilt angles, frames, or other properties accordingly."
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect for a plane in Blender using Python, you can utilize the Blender's scripting capabilities. Below is a Python script that will create a basic bouncing animation for a plane. This script can be executed in Blender\u2019s scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Ensure no existing plane with the same name exists\nif bpy.data.objects.get('BouncingPlane'):\n    bpy.data.objects.remove(bpy.data.objects['BouncingPlane'])\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, location=(0, 0, 0))\nplane = bpy.context.object\nplane.name = 'BouncingPlane'\n\n# Set total animation frames\ntotal_frames = 120\nbpy.context.scene.frame_end = total_frames\n\n# Define the bouncing parameters\namplitude = 2.0     # how high it bounces\nfrequency = 1.0     # how many cycles per total animation\n\n# Remove existing animation data\nif plane.animation_data:\n    plane.animation_data_clear()\n\n# Create bouncing animation\nfor frame in range(0, total_frames + 1):\n    bpy.context.scene.frame_set(frame)\n    # Simple harmonic motion formula for vertical position\n    z_location = amplitude * abs(math.sin(frame * frequency * math.pi * 2 / total_frames))\n    \n    # Set the location\n    plane.location = (0, 0, z_location)\n    \n    # Insert keyframe for location\n    plane.keyframe_insert(data_path=\"location\", index=2)  # Index 2 for z-axis\n\n# Optionally, add some easing to make it look nicer\nfor fcurve in plane.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\nprint(\"Bouncing effect applied to the plane!\")\n```\n\n#### Instructions:\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block within the text editor.\n3. Paste the above script into the text editor.\n4. Run the script by clicking on the \"Run Script\" button.\n\nThis script creates a plane at the origin and animates it using a simple sine wave for the z-axis location to simulate a bouncing effect. You can adjust the `amplitude` to affect how high the plane bounces and `frequency` to change how quickly it bounces. The script sets keyframes"
    },
    {
        "Text Input": "A cube spins while floating.",
        "Blender Script": "Sure, here's a simple Blender Python script that makes a cube spin while floating above the ground. This script sets up keyframes to animate the cube's rotation and translation:\n\n```python\nimport bpy\n\n# Clear existing mesh and objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new cube\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 1))\ncube = bpy.context.object\n\n# Set the number of frames for the animation\ntotal_frames = 120\nfps = bpy.context.scene.render.fps\n\n# Set keyframe at the start of the animation\ncube.location = (0, 0, 1)\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"location\", frame=1)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set motion path for floating effect (using sine wave for simplicity)\nimport math\n\nfor frame in range(1, total_frames + 1):\n    # Floating effect (sinusoidal motion)\n    cube.location.z = 1 + math.sin(math.radians(frame * 360 / fps))\n    \n    # Rotation (spinning)\n    cube.rotation_euler.z = math.radians(frame * 360 / fps)\n    \n    # Insert keyframes for each property\n    cube.keyframe_insert(data_path=\"location\", frame=frame)\n    cube.keyframe_insert(data_path=\"rotation_euler\", frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = total_frames\n```\n\nTo use this script:\n\n1. Open Blender.\n2. Go to the \"Scripting\" workspace.\n3. Create a new text file and paste the script into the text editor.\n4. Click on \"Run Script\" to execute.\n\nThe script will generate an animation where a cube spins around its vertical axis while floating up and down smoothly. Adjust `total_frames` if you want a longer or shorter animation, and tweak the `fps` setting to sync with your project's frame rate."
    },
    {
        "Text Input": "A cone moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that animates a cone moving in a spiral motion, you can use the following code. This script will generate a cone and set keyframes to animate it in a spiral path over time.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 0))\ncone = bpy.context.object\n\n# Define spiral motion parameters\nspiral_height = 5\nspiral_turns = 3\nframes_per_turn = 30\n\n# Animation keyframes for spiral motion\nfor frame in range(spiral_turns * frames_per_turn):\n    bpy.context.scene.frame_set(frame)\n    \n    # Calculate position in spiral\n    angle = 2 * math.pi * (frame / frames_per_turn)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    z = (frame / (spiral_turns * frames_per_turn)) * spiral_height\n    \n    # Set the location of the cone\n    cone.location = (x, y, z)\n    \n    # Insert keyframe for location\n    cone.keyframe_insert(data_path='location', index=-1)\n\n# Set the scene's end frame\nbpy.context.scene.frame_end = spiral_turns * frames_per_turn\n```\n\nSteps to use this script in Blender:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block in the text editor and paste the above script into it.\n3. Click the \"Run Script\" button or press `Alt+P` to execute the script.\n\nThis script:\n\n- Clears any existing mesh objects in the scene to start fresh.\n- Adds a new cone primitive to the scene.\n- Animates the cone moving in a spiral pattern by calculating a cylindrical path: it uses trigonometric functions to define x and y coordinates and progresses z coordinate linearly over time.\n- Inserts keyframes to animate the cone's position over a sequence of frames.\n- Sets the end frame of the animation to match the duration required for the spiral.\n\nAdjust the `spiral_height`, `spiral_turns`, and `frames_per_turn` variables to tweak"
    },
    {
        "Text Input": "A cylinder oscillates in a sine wave.",
        "Blender Script": "To create a Blender Python script that makes a cylinder oscillate in a sine wave pattern, we can use both the Blender API and the math module to create an animation. Below is a script that creates a cylinder and animates its position along the z-axis using a sine function to simulate oscillation:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Define animation parameters\nframe_start = 1\nframe_end = 250\namplitude = 2.0\nfrequency = 1.0\n\n# Set the animation frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Animate the cylinder using a sine wave\nfor frame in range(frame_start, frame_end + 1):\n    # Calculate the sine wave position\n    z_position = amplitude * math.sin(frequency * frame * (math.pi / 180.0))\n\n    # Set the frame\n    bpy.context.scene.frame_set(frame)\n\n    # Apply the position\n    cylinder.location = (0, 0, z_position)\n\n    # Insert keyframe for the location\n    cylinder.keyframe_insert(data_path=\"location\", index=2)\n\nprint(\"Animation complete\")\n```\n\n### Instructions:\n\n1. **Open Blender**: Start Blender and go to the Scripting workspace.\n   \n2. **Create a New Script**: In the text editor, create a new script and paste the above code.\n\n3. **Run the Script**: Click the \"Run Script\" button to execute the script. This will create a cylinder that oscillates up and down along the z-axis in a sine wave pattern.\n\n### Explanation:\n\n- **Object Deletion**: The script clears any existing objects in the scene to start fresh.\n- **Cylinder Creation**: A new cylinder mesh is created at the origin.\n- **Animation Setup**: Defines the start and end frames for the animation. The `amplitude` and `frequency` variables control the sine wave characteristics.\n- **Sine Wave Calculation**: For each frame, computes the new z-position of the cylinder using the sine function.\n- **Keyframe Insertion**: Sets the"
    },
    {
        "Text Input": "A sphere tilts back and forth.",
        "Blender Script": "To create a Blender Python script that animates a sphere tilting back and forth, you can use the following script. This script sets up a simple animation where the sphere rotates around the X-axis, creating a tilting effect.\n\n```python\nimport bpy\nimport math\n\n# Create a new sphere mesh\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0), radius=1)\n\n# Get the newly created sphere object\nsphere = bpy.context.active_object\n\n# Set the start and end frames\nstart_frame = 1\nend_frame = 100\n\n# Set the tilting angle and number of cycles\ntilt_angle = math.radians(30)  # Tilt of 30 degrees\ncycles = 4\n\n# Define the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Clear existing keyframes\nsphere.animation_data_clear()\n\nfor cycle in range(cycles):\n    # Forward tilt (0 to tilt_angle)\n    current_frame = start_frame + (end_frame - start_frame) / cycles * cycle\n    sphere.rotation_euler = (tilt_angle, 0, 0)\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=current_frame)\n\n    # Backward tilt (0)\n    current_frame = start_frame + (end_frame - start_frame) / cycles * (cycle + 0.5)\n    sphere.rotation_euler = (0, 0, 0)\n    sphere.keyframe_insert(data_path=\"rotation_euler\", frame=current_frame)\n\n# Loop the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Add fcurve modifiers to loop the animation\nfor fcurve in sphere.animation_data.action.fcurves:\n    modifier = fcurve.modifiers.new(type='CYCLES')\n    modifier.mode_before = 'REPEAT_OFFSET'\n    modifier.mode_after = 'REPEAT_OFFSET'\n\nprint(\"Tilting animation created successfully.\")\n```\n\n### Explanation:\n\n- **Sphere Creation:** The script creates a UV sphere using `bpy.ops.mesh.primitive_uv_sphere_add()`.\n  \n- **Animation Setup:**\n  - The animation is looped for a specified number of cycles (4 in this case) using keyframe insertion for the sphere's rotation around the X-axis.\n  - The sphere tilts to an angle of 30 degrees (converted to radians"
    },
    {
        "Text Input": "A torus moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script that makes a torus move in a spiral motion, we\u2019ll animate the torus using keyframes based on a mathematical spiral path. Below is an example script to achieve this effect. Make sure you execute this script within Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(radius_major=1, radius_minor=0.25, location=(0,0,0))\ntorus = bpy.context.active_object\n\n# Ensure the torus is selected\nbpy.context.view_layer.objects.active = torus\nbpy.ops.object.select_all(action='DESELECT')\ntorus.select_set(True)\n\n# Parameters for spiral motion\nframes = 250  # Total number of frames for the animation\nspiral_turns = 3  # Number of spiral turns\n\n# Set up the spiral motion\nfor frame in range(frames):\n    # Calculate angle and position\n    angle = 2 * math.pi * spiral_turns * (frame / frames)\n    radius = 0.05 * frame  # Incremental outward motion\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    z = 0.05 * frame  # to add a vertical rise in the spiral\n    \n    # Set the location of the torus\n    torus.location = (x, y, z)\n    \n    # Insert keyframe for this position\n    torus.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = frames\n\nprint(\"Spiral animation set up successfully.\")\n```\n\n### Instructions:\n\n1. Open Blender and switch to the \"Scripting\" workspace.\n2. Create a new text block and paste the above script into it.\n3. Ensure to run the script by clicking the \"Run Script\" button.\n\nThis script creates a torus and animates it to move in a spiral path over 250 frames. Adjust `spiral_turns` and `frames` to customize the spiral tightness and length of animation according to your needs."
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a torus move diagonally upwards, you need to set up an animation that shifts the torus position through time. This can be achieved by defining keyframes for the location of the torus. Here's a basic script that accomplishes this task:\n\n```python\nimport bpy\n\n# Create a new torus object in the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = \"AnimatedTorus\"\n\n# Set the start frame and the end frame for the animation\nstart_frame = 1\nend_frame = 50\n\n# Define the initial and final position for the torus\ninitial_position = (0, 0, 0)\nfinal_position = (5, 5, 10)\n\n# Set the torus at the initial position and insert a keyframe\nbpy.context.scene.frame_set(start_frame)\ntorus.location = initial_position\ntorus.keyframe_insert(data_path='location', frame=start_frame)\n\n# Set the torus at the final position and insert a keyframe\nbpy.context.scene.frame_set(end_frame)\ntorus.location = final_position\ntorus.keyframe_insert(data_path='location', frame=end_frame)\n\n# Return to the start frame\nbpy.context.scene.frame_set(start_frame)\n\n# If you want to make the movement smooth, you can adjust the interpolation type\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe_point in fcurve.keyframe_points:\n        keyframe_point.interpolation = 'BEZIER'\n\n```\n\nTo use this script, open Blender, access the scripting tab, and paste this code into a new script. Run the script with the \"Run Script\" button to create a torus which will animate moving diagonally upwards from frame 1 to frame 50.\n\n### Key Points:\n- **Start and End Frames:** The animation is designed to occur between frame 1 and frame 50. You can adjust these values as needed.\n- **Initial and Final Positions:** The torus starts at (0, 0, 0) and moves to (5, 5, 10). These coordinates can be customized to define the path of the animation.\n- **Keyframe Insertion:** Keyframes are inserted for both the initial and final positions"
    },
    {
        "Text Input": "A cone jumps up and lands.",
        "Blender Script": "To create a Blender Python script that makes a cone jump up and land, we will animate the position of the cone on the Z-axis. Here's a simple script that does just that:\n\n```python\nimport bpy\n\n# Clear existing mesh and object data in the current scene for a clean start\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=16, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\ncone.name = \"JumpingCone\"\n\n# Ensure the animation data is cleared\ncone.animation_data_clear()\n\n# Set the total time in frames for the jump (24 FPS -> 1 second jump)\njump_duration = 48\n\n# Frame the animation will start and end\nstart_frame = bpy.context.scene.frame_start\nend_frame = start_frame + jump_duration\n\n# Keyframes for the jump\n# Start at the ground (Z=0)\ncone.location.z = 0\ncone.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n\n# Mid-jump at half duration, peak the jump at Z=3\nmid_frame = start_frame + jump_duration / 2\ncone.location.z = 3\ncone.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n\n# End back on the ground (Z=0)\ncone.location.z = 0\ncone.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Adjust the interpolation type to make the jump more realistic (Ease In and Out)\nfor fcurve in cone.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Set the end frame for the scene so the animation loops correctly\nbpy.context.scene.frame_end = end_frame\n```\n\nThis script will create a cone in the Blender scene, then animate it as though it's jumping up and landing back down over a total period of 2 seconds assuming a 24 FPS setting in Blender.\n\n### How the Script Works:\n- **Object Creation:** First, a cone is created.\n- **Animation Setup:** The script sets keyframes at the start, middle, and end of the jump with varying Z positions to simulate a"
    },
    {
        "Text Input": "A torus moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that makes a torus move diagonally upwards, you can use the following script. This script will animate the torus over a span of 100 frames.\n\n```python\nimport bpy\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\n\n# Set the animation frame start and end\nframe_start = 1\nframe_end = 100\n\n# Get the torus object\ntorus = bpy.context.active_object\n\n# Insert the initial keyframe at frame 1\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=frame_start)\n\n# Insert the final keyframe at frame 100, moving the torus diagonally upwards\ntorus.location = (5, 5, 5)  # Adjust the final position as needed\ntorus.keyframe_insert(data_path=\"location\", frame=frame_end)\n\n# Set interpolation to linear (optional, to keep the movement constant)\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\nInstructions for use:\n1. Copy and paste the script into Blender's Text Editor.\n2. Press `Run Script` to execute the script.\n3. Go to the Timeline and press `Spacebar` to play the animation.\n\nThis will animate a torus object moving in a straight, diagonal path from the origin to the position `(5, 5, 5)` over the course of 100 frames. Adjust the positions and frames as needed to fit your specific requirements."
    },
    {
        "Text Input": "A cylinder zooms in and out.",
        "Blender Script": "Below is a Blender Python script using the `bpy` library to create an animation where a cylinder object zooms in and out. The script sets up a basic scene, adds a cylinder, and animates its scale to create the zoom effect.\n\nMake sure to run this script in Blender's scripting environment.\n\n```python\nimport bpy\n\n# Delete all existing objects first for a clean slate\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.active_object\n\n# Set the total number of frames for the animation\ntotal_frames = 120  # You can adjust this for a longer or shorter animation\n\n# Define keyframe positions with evenly spaced intervals\nkeyframe_start = 1\nkeyframe_middle = total_frames // 2\nkeyframe_end = total_frames\n\n# Set initial scale (normal size)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", frame=keyframe_start)\n\n# Set scale for zoom out (larger size)\ncylinder.scale = (2, 2, 2)\ncylinder.keyframe_insert(data_path=\"scale\", frame=keyframe_middle)\n\n# Set final scale back to normal (back to original size)\ncylinder.scale = (1, 1, 1)\ncylinder.keyframe_insert(data_path=\"scale\", frame=keyframe_end)\n\n# Set up interpolation to give a smooth zoom effect\nfor fcurve in cylinder.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'  # Other options: CONSTANT, BEZIER\n\n# Set the timeline to the correct length\nbpy.context.scene.frame_start = keyframe_start\nbpy.context.scene.frame_end = keyframe_end\n\n# Optionally, you can set the render output path and format\nbpy.context.scene.render.filepath = \"//zoom_animation\"\nbpy.context.scene.render.image_settings.file_format = 'FFMPEG'\nbpy.context.scene.render.ffmpeg.format = 'MPEG4'\n\n# Set resolution\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.resolution_percentage = 100\n\n"
    },
    {
        "Text Input": "A monkey moves in a circular path.",
        "Blender Script": "To achieve the effect of a monkey moving in a circular path in Blender using a Python script, we need to set up an animation where the monkey's object follows a circular path. This is typically done by animating the object's location along a curve. Below is a Python script for Blender to make the monkey move in a circular path:\n\n```python\nimport bpy\nimport math\n\n# Delete default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a circle curve\nbpy.ops.curve.primitive_bezier_circle_add(radius=5.0, enter_editmode=False, location=(0, 0, 0))\ncircle = bpy.context.object\n\n# Add a monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=1.0, location=(0, 0, 0))\nmonkey = bpy.context.object\n\n# Set up constraints to follow the path\nmonkey.constraints.new(type='FOLLOW_PATH')\nmonkey.constraints['Follow Path'].target = circle\n\n# Attach monkey to the path\nbpy.ops.object.select_all(action='DESELECT')\ncircle.select_set(True)\nmonkey.select_set(True)\nbpy.context.view_layer.objects.active = monkey\nbpy.ops.object.parent_set(type='FOLLOW')\n\n# Animate the path\n# Set frame range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Insert keyframes for the path animation\nbpy.context.object.data.path_duration = 100\n\n# Set evaluation time for start and end keyframes\ncircle.data.eval_time = 0\ncircle.keyframe_insert(data_path='eval_time', frame=1)\n\ncircle.data.eval_time = 100\ncircle.keyframe_insert(data_path='eval_time', frame=100)\n\n# Set camera view to see the animation\nbpy.ops.object.camera_add(location=(10, -10, 10), rotation=(math.radians(60), 0, math.radians(45)))\n\n# Set the camera as active\nbpy.context.scene.camera = bpy.context.object\n```\n\n### Explanation:\n\n1. **Initial Setup**:\n   - We start by clearing all existing objects in the scene.\n   \n2. **Creating Objects**:\n   - A Bezier circle is created which will serve as the path for the monkey.\n   - A monkey mesh (Suzanne) is added to represent the monkey.\n\n3. **Path Constraint**:\n   - The monkey is"
    },
    {
        "Text Input": "A plane wiggles side to side.",
        "Blender Script": "To create a Blender Python script that makes a plane wiggle side to side, you can use the following code. This script adds a simple animation to a plane object by modifying its location along the X-axis over time using keyframes.\n\nMake sure you have a plane object present in your scene and that you run this script within Blender's scripting environment.\n\n```python\nimport bpy\nimport math\n\n# Create a plane if it doesn't exist\nif 'WigglingPlane' not in bpy.data.objects:\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.active_object\n    plane.name = 'WigglingPlane'\nelse:\n    plane = bpy.data.objects['WigglingPlane']\n\n# Set the timeline settings\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Clear existing keyframes\nplane.animation_data_clear()\n\n# Parameters for the wiggling motion\nwiggle_amplitude = 1.0  # Amplitude of the wiggle\nwiggle_frequency = 0.1  # Frequency of the wiggle\n\n# Add keyframes for the wiggle animation\nfor frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end + 1):\n    # Calculate the new x position using the sine function\n    new_x_position = wiggle_amplitude * math.sin(wiggle_frequency * frame)\n    \n    # Set the location of the plane\n    plane.location.x = new_x_position\n    \n    # Insert a keyframe for the x location\n    plane.keyframe_insert(data_path=\"location\", index=0, frame=frame)\n\n# Set timeline to first frame to see the animation from the start\nbpy.context.scene.frame_set(0)\n```\n\nThis script will animate the plane so that it moves side-to-side in a wiggling pattern. The amplitude and frequency of the wiggle can be adjusted by changing the `wiggle_amplitude` and `wiggle_frequency` variables, respectively."
    },
    {
        "Text Input": "A cone scales up and down.",
        "Blender Script": "To create a Blender Python script that makes a cone scale up and down, we'll animate the scaling over time using keyframes. Below is the script that accomplishes this task:\n\n```python\nimport bpy\nimport math\n\n# Remove all objects except for the camera and light\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\ncone = bpy.context.object\n\n# Set the frame information\nstart_frame = 1\nmid_frame = 50\nend_frame = 100\n\n# Scale the cone to its initial size\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Scale the cone up\ncone.scale = (2, 2, 2)\ncone.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# Scale the cone back to its initial size\ncone.scale = (1, 1, 1)\ncone.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set interpolation to linear for a constant scaling speed (optional)\nfor fcurve in cone.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"The cone's scaling animation has been created!\")\n```\n\n### How this Script Works:\n\n1. **Remove Existing Mesh Objects**: The script starts by cleaning the scene and removing all existing mesh objects while keeping the camera and light intact.\n\n2. **Create a Cone**: A cone is created using `bpy.ops.mesh.primitive_cone_add()`. You can adjust the `vertices`, `radius`, and `depth` parameters to customize the appearance of the cone.\n\n3. **Set Keyframes for Scaling Animation**: The animation consists of three keyframes:\n   - At `start_frame`, the cone is at its initial size.\n   - At `mid_frame`, the cone scales up.\n   - At `end_frame`, the cone returns to its initial size.\n\n4. **Set the Frame Range**: The frame range is defined to control the animation's start"
    },
    {
        "Text Input": "A cone tilts back and forth.",
        "Blender Script": "To create a script in Blender that makes a cone tilt back and forth, we will automate the process using Python. This script will add a cone to the scene and then create an animation that tilts the cone along its X-axis. Here's how you can achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cone to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 1))\n\n# Get reference to the cone\ncone = bpy.context.object\n\n# Set the number of frames and tilt angle\nnum_frames = 100\ntilt_angle = math.radians(20)  # Convert 20 degrees to radians\n\n# Insert keyframes to make the cone tilt back and forth\nfor frame in range(num_frames):\n    bpy.context.scene.frame_set(frame)\n    if frame <= num_frames / 2:\n        # For the first half, tilt forward\n        tilt = tilt_angle * (frame / (num_frames / 2))\n    else:\n        # For the second half, tilt backward\n        tilt = tilt_angle * ((num_frames - frame) / (num_frames / 2))\n    \n    cone.rotation_euler = (tilt, 0, 0)\n    cone.keyframe_insert(data_path=\"rotation_euler\", index=0)\n    \n# Set end frame for the animation\nbpy.context.scene.frame_end = num_frames\n```\n\n### Instructions on Using the Script:\n1. Open Blender and ensure you are in the \"Scripting\" workspace.\n2. Create a new script and paste the code provided above.\n3. Run the script by clicking the \"Run Script\" button or pressing `Alt+P`.\n4. Play the animation to see the cone tilting back and forth.\n\n### Explanation:\n- **Mesh Deletion:** The script starts by deleting any existing mesh objects in the scene to ensure a clean start.\n- **Cone Creation:** A cone is added at location `(0, 0, 1)`.\n- **Animation:** The script sets up an animation that runs over 100 frames. It calculates the tilt angle such that the cone tilts forward for the first half of the animation and then tilts backward for the second"
    },
    {
        "Text Input": "A sphere performs a bouncing effect.",
        "Blender Script": "To create a bouncing sphere animation in Blender using a Python script, you can utilize Blender's `bpy` module to set up the scene and animate the sphere. Below is a script that creates a bouncing sphere:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nsphere = bpy.context.active_object\n\n# Set up the scene\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\n\n# Function to add keyframes for bouncing effect\ndef add_bounce_keyframes(obj, bounce_height, bounce_frames):\n    # Set initial keyframe\n    obj.location.z = bounce_height\n    obj.keyframe_insert(data_path=\"location\", frame=1, index=2)\n\n    # Calculate keyframe positions\n    for i in range(1, bounce_frames+1):\n        frame = i * 10\n        height = bounce_height * (1 - (i / bounce_frames)**2)  # Decrease height with each bounce\n        obj.location.z = height\n        obj.keyframe_insert(data_path=\"location\", frame=frame, index=2)\n\n        # Add falling motion\n        obj.location.z = 0 if i < bounce_frames else 0.1  # Slight lift on the last frame for subtlety\n        obj.keyframe_insert(data_path=\"location\", frame=frame+5, index=2)\n\n# Animate sphere bouncing\nbounce_height = 5\nbounce_frames = 10  # Number of bounces\nadd_bounce_keyframes(sphere, bounce_height, bounce_frames)\n\n# Smooth the animation with interpolation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kfp in fcurve.keyframe_points:\n        kfp.interpolation = 'BEZIER'\n\n# Adjust render settings\nbpy.context.scene.render.fps = 24\n\n# Set the camera view (optional)\nbpy.ops.object.camera_add(location=(10, -10, 10))\ncamera = bpy.context.active_object\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\nbpy.context.scene.camera = camera\n\n# Set the light (optional for better visibility)\nbpy.ops.object.light_add(type"
    },
    {
        "Text Input": "A sphere spins and scales up.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a sphere, and sets it up to spin and scale up using keyframe animation.\n\n```python\nimport bpy\n\n# First, let's clear existing mesh objects if there are any\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere to the scene\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Let's add keyframes for scaling and rotation\n# Set the initial scale and rotation\nsphere.scale = (1, 1, 1)\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"scale\", frame=1)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\n# Set the target scale and rotation at frame 100\n# Scale it up to 3 times its original size\nsphere.scale = (3, 3, 3)\n# Rotate it 360 degrees around the Z axis\nsphere.rotation_euler = (0, 0, 360 * (3.14159265 / 180))  # Convert degrees to radians\nsphere.keyframe_insert(data_path=\"scale\", frame=100)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Change interpolation mode to linear for both scale and rotation\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n\nprint(\"Sphere animation setup complete!\")\n```\n\n### Instructions to Run the Script:\n1. Open Blender and switch to the Scripting workspace.\n2. Create a new text file within the Scripting workspace.\n3. Copy the script above and paste it into the text editor.\n4. Click the \"Run Script\" button to execute the script.\n\n### Explanation:\n- The script first removes any existing mesh objects to start with a clean scene.\n- It adds a UV sphere at the origin.\n- The script sets keyframes to scale the sphere from its original size to three times larger and rotates it 360 degrees around the Z-axis.\n- The keyframes are set on frame 1 (initial state) and frame 100 (final state).\n- To provide a consistent motion, keyframe interpolation is set to"
    },
    {
        "Text Input": "A monkey orbits around another object.",
        "Blender Script": "To create a Blender Python script where a monkey (Suzanne) orbits around another object, such as a UV Sphere, you can automate this using the Blender Python API. Here is a script to achieve this:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects and reset the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create the central object - UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = 'Central_Sphere'\n\n# Create Suzanne, the monkey mesh\nbpy.ops.mesh.primitive_monkey_add(size=0.5, location=(3, 0, 0))\nmonkey = bpy.context.object\nmonkey.name = 'Orbiting_Monkey'\n\n# Set up the animation for the monkey to orbit around the sphere\nframe_start = 1\nframe_end = 240\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Function to update monkey's location on an orbit\ndef create_orbit_animation(obj, center, radius, frames):\n    for frame in range(frames):\n        # Calculate the angle in radians for the current frame\n        angle_rad = (frame / frames) * 2 * math.pi\n        \n        # Update the object's location\n        x = center.location.x + radius * math.cos(angle_rad)\n        y = center.location.y + radius * math.sin(angle_rad)\n        \n        # Set the new location for the monkey\n        obj.location = (x, y, obj.location.z)\n        obj.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Apply orbit animation to the monkey\ncreate_orbit_animation(monkey, sphere, radius=3, frames=frame_end)\n\n# Set up camera and light\nbpy.ops.object.camera_add(location=(10, -10, 5))\ncamera = bpy.context.object\nbpy.context.scene.camera = camera\n\nbpy.ops.object.light_add(type='SUN', location=(5, 5, 8))\nlight = bpy.context.object\n\n# Optionally, set viewport shading to render preview for better visibility\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        area.spaces.active.shading.type ="
    },
    {
        "Text Input": "A torus jumps up and lands.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a torus jumping up and landing back down. This script makes use of Blender's built-in Python API to create the torus shape, set keyframes for the jump animation, and create a looping animation.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(major_segments=48, minor_segments=12, mode='MAJOR_MINOR', major_radius=1, minor_radius=0.25, location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set keyframe data\nstart_frame = 1\npeak_frame = 20\nend_frame = 40\n\n# Start at the ground position\ntorus.location.z = 0\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Peak of the jump\ntorus.location.z = 2\ntorus.keyframe_insert(data_path=\"location\", frame=peak_frame)\n\n# End back at the ground position\ntorus.location.z = 0\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set interpolation to make the movement smooth\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Set up the timeline to loop the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Optionally set a smooth transition for the jump by adjusting fcurve handles\nfor fcurve in torus.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.handle_left_type = 'AUTO'\n        keyframe.handle_right_type = 'AUTO'\n\nprint(\"Torus jump animation created.\")\n```\n\nHere's what the script does:\n\n1. **Clear Existing Mesh Objects:**\n   - First, it deselects and deletes any existing mesh objects in the Blender scene to start fresh.\n\n2. **Create a Torus:**\n   - A torus mesh is added at the center of the scene with specified radius and segments.\n\n3. **Keyframe Animation:**\n   - Keyframes are set for the torus to start on"
    },
    {
        "Text Input": "A monkey rotates on the X-axis.",
        "Blender Script": "To create a script in Blender that makes a monkey head (Suzanne) rotate on the X-axis, you can use the following Python script. This script assumes you're working in a Blender environment:\n\n```python\nimport bpy\n\n# Deselect all objects\nbpy.ops.object.select_all(action='DESELECT')\n\n# Add a monkey (Suzanne) to the scene\nbpy.ops.mesh.primitive_monkey_add(location=(0, 0, 0))\nmonkey = bpy.context.active_object\n\n# Set the initial rotation\nmonkey.rotation_euler = (0.0, 0.0, 0.0)\n\n# Set the frames for the animation\nstart_frame = 1\nend_frame = 120  # This is a 5-second animation at 24 fps\n\n# Insert keyframe for the initial rotation at the start frame\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=start_frame)\n\n# Rotate monkey 360 degrees along X-axis over 5 seconds\nmonkey.rotation_euler[0] = 2 * 3.14159  # 360 degrees in radians\n\n# Insert keyframe for the final rotation at the end frame\nmonkey.keyframe_insert(data_path=\"rotation_euler\", frame=end_frame)\n\n# Set the animation context to start and end frame\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Script executed: Suzanne will rotate 360 degrees on the X-axis.\")\n```\n\n### Explanation:\n\n1. **Import Blender Python Module**: The script starts by importing the `bpy` module, which provides access to Blender's Python API.\n\n2. **Deselect Existing Objects**: It deselects all objects to ensure that the monkey is the active object after creation.\n\n3. **Add Suzanne**: The monkey head object is added to the scene at the origin `(0, 0, 0)`.\n\n4. **Set Initial Rotation**: Establishes the initial rotation of the monkey.\n\n5. **Animation Setup**:\n   - **Frames**: Specifies the animation duration from `start_frame` to `end_frame`.\n   - **Initial Keyframe**: Inserts a keyframe at the starting frame with the initial rotation.\n   - **Final Keyframe**: Specifies a full 360-degree rotation on the X-axis in radians and inserts another keyframe at the ending frame.\n\n6. **Set Scene Timeline**:"
    },
    {
        "Text Input": "A cube spins and scales up.",
        "Blender Script": "To create a Blender Python script that makes a cube spin and scale up, we can use the Blender's `bpy` module to manipulate the scene. Here is a sample script that adds a cube to the scene, and then animates it to spin around the Z-axis while scaling up over 100 frames.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cube to the scene\nbpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, location=(0, 0, 0))\ncube = bpy.context.active_object\n\n# Set the keyframe insertion to automatic for the selected object's transformation properties\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\n\n# Initial keyframe at frame 0\ncube.scale = (1, 1, 1)\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"scale\", frame=0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=0)\n\n# Final keyframe at frame 100\ncube.scale = (3, 3, 3)  # Scale up by a factor of 3\ncube.rotation_euler = (0, 0, 6.28319)  # Rotate 360 degrees (2 * pi)\ncube.keyframe_insert(data_path=\"scale\", frame=100)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Adjust the interpolation to linear for a smooth constant speed animation\nfor fcurve in cube.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'LINEAR'\n```\n\nTo use this script:\n\n1. Open Blender and go to Scripting mode.\n2. Create a new text file in the Text Editor panel.\n3. Copy and paste the script into the text file.\n4. Click \"Run Script\" to execute the script.\n\nThis will create a spinning and scaling cube animation in the scene. The cube starts at its original size and rotates while it scales up over 100 frames. The script also ensures a linear animation by modifying the keyframe interpolation settings."
    },
    {
        "Text Input": "A monkey orbits around another object.",
        "Blender Script": "To create a Blender Python script where a monkey head (Suzanne) orbits around another object (a cube, for instance), you can use the following script. This script sets up a scene with a monkey head and a cube, and animates the monkey head to orbit around the cube over a specified number of frames.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cube at the center of the scene\nbpy.ops.mesh.primitive_cube_add(size=2)\ncentral_object = bpy.context.active_object\ncentral_object.name = \"CentralCube\"\n\n# Add a monkey head\nbpy.ops.mesh.primitive_monkey_add(radius=1)\nmonkey = bpy.context.active_object\nmonkey.name = \"OrbitingMonkey\"\n\n# Set animation parameters\nframes = 240  # Total number of frames for the full orbit animation\norbit_radius = 5  # Distance from the cube\norbit_height = 0  # Orbit height relative to the cube\n\n# Place the monkey at the starting position\nmonkey.location = (orbit_radius, 0, orbit_height)\n\n# Insert location keyframes to animate the orbit\nfor frame in range(frames):\n    angle = 2 * math.pi * frame / frames\n    x = orbit_radius * math.cos(angle)\n    y = orbit_radius * math.sin(angle)\n    \n    # Set monkey's location for each frame\n    monkey.location = (x, y, orbit_height)\n    \n    # Insert the keyframe\n    monkey.keyframe_insert(data_path='location', frame=frame)\n\n# Set the frame range\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = frames\n\n# Set the animation to loop\nbpy.context.scene.render.fps = 24\nbpy.context.scene.frame_current = 1\nbpy.context.scene.timeline_markers.new(name=\"Start\", frame=1)\nbpy.context.scene.timeline_markers.new(name=\"End\", frame=frames)\nbpy.ops.action.new()\nbpy.ops.screen.frame_jump(end=False)\n\n# Finished\nprint(\"Orbit animation is set up.\")\n```\n\n#### Instructions for using the script:\n\n1. Open Blender.\n2. Go to the Scripting tab.\n3. Create a new text block.\n4. Copy and paste the script into the"
    },
    {
        "Text Input": "A cylinder moves in a spiral motion.",
        "Blender Script": "To create a Blender Python script where a cylinder moves in a spiral motion, you can use the following script. This script adds a cylinder, animates its location over time to create a spiral path, and then sets up a simple animation timeline to visualize the motion.\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set the number of frames for the animation\nnum_frames = 250\nbpy.context.scene.frame_end = num_frames\n\n# Create a spiral path by keyframing the cylinder's location\nfor frame in range(num_frames):\n    # Calculate the position in a spiral\n    angle = frame * 0.1\n    x = math.cos(angle) * frame * 0.02\n    y = math.sin(angle) * frame * 0.02\n    z = frame * 0.05\n\n    # Set the cylinder's location\n    cylinder.location = (x, y, z)\n    \n    # Insert keyframe for location\n    cylinder.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Play through the animation to see the spiral motion\nbpy.ops.screen.animation_play()\n```\n\n### How the script works:\n\n1. **Clear existing objects**: The script clears any existing mesh objects in the scene to start fresh.\n2. **Add Cylinder**: It creates a new cylinder using `bpy.ops.mesh.primitive_cylinder_add()`.\n3. **Set Animation Frames**: It configures the total number of frames in the animation timeline.\n4. **Keyframe Spiral Motion**: The script calculates positions along a spiral path for each frame:\n   - **Angle**: Determines the angular location on the spiral (increasing to create motion).\n   - **Radius**: Increases gradually as the frame count increases, creating a spiral.\n   - **Z-axis**: Increases linearly with the frame number to elevate the spiral.\n5. **Keyframe Insertion**: It inserts keyframes for each frame, capturing the cylinder's location.\n6. **Play Animation**: The animation is played to show the spiral motion.\n\n"
    },
    {
        "Text Input": "A cone performs a bouncing effect.",
        "Blender Script": "Certainly! Below is a Blender Python script that creates a simple animation where a cone object performs a bouncing effect. You can run this script in Blender's scripting editor.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects first to start with a clean scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, depth=2, location=(0, 0, 0))\ncone = bpy.context.active_object\n\n# Set the frames and the bounce height\nstart_frame = 1\nmid_frame = 20\nend_frame = 40\nbounce_height = 3\n\n# Set the initial position keyframe\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the bounce up position keyframe\ncone.location = (0, 0, bounce_height)\ncone.keyframe_insert(data_path=\"location\", frame=mid_frame)\n\n# Set the landing position keyframe\ncone.location = (0, 0, 0)\ncone.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Add linear interpolation to mimic bouncing\nfor fcu in cone.animation_data.action.fcurves:\n    for kp in fcu.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Loop animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\nbpy.context.scene.render.fps = 24\n\n# Optional: Add a camera and set a perspective view\nbpy.ops.object.camera_add(location=(7, -7, 6), rotation=(math.radians(60), 0, math.radians(45)))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\n\n# Optional: Add a light for better visibility\nbpy.ops.object.light_add(type='POINT', location=(5, -5, 5))\n\n# Optional: Play animation in a loop for preview\nbpy.ops.screen.animation_play()\n```\n\nThis script does the following:\n\n1. Clears the scene of existing objects.\n2. Adds a cone primitive at the origin.\n3. Sets up keyframes for the cone to simulate a bounce effect: rising to the specified `bounce_height` and falling back to the ground (z=0).\n4. Uses linear interpolation"
    },
    {
        "Text Input": "A torus moves in a circular path.",
        "Blender Script": "Certainly! To create a Blender Python script where a torus moves in a circular path, we'll animate its location using a sinusoidal function to represent circular motion. Here's the script:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.active_object\n\n# Number of frames for the animation\nframes = 250\nbpy.context.scene.frame_end = frames\n\n# Circle path radius\nradius = 5.0\n\n# Function to animate the torus in a circular path\ndef animate_torus(obj, frames, radius):\n    for frame in range(frames):\n        # Calculate angle in radians\n        angle = (frame / frames) * 2 * math.pi\n        \n        # Set the location\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        z = 0  # Assuming the movement is in the XY plane\n        \n        # Set the object's location for the specific frame\n        obj.location = (x, y, z)\n        \n        # Insert keyframe for location\n        obj.keyframe_insert(data_path=\"location\", frame=frame)\n\n# Call function to animate\nanimate_torus(torus, frames, radius)\n```\n\n### Instructions to Use the Script\n1. Open Blender and switch to the **Scripting** workspace.\n2. Create a new text file and paste the above script into it.\n3. Run the script by clicking the **Run Script** button.\n\n### Explanation\n- The script first clears all existing objects in the scene to start fresh.\n- A torus is added to the scene.\n- The animation is set up to run for 250 frames.\n- The `animate_torus` function calculates the x and y coordinates for each frame based on a circular path.\n- This function inserts a keyframe for the torus's location at each frame, creating a smooth circular motion animation.\n\nThis will let the torus move in a circle on the XY-plane. You can adjust the `radius` variable to change the size of the circular path."
    },
    {
        "Text Input": "A cone orbits around another object.",
        "Blender Script": "To create an animation where a cone orbits around another object in Blender using Python, you can use the Blender Python API (`bpy`). This script will set up a simple scene with a cone orbiting around a central sphere. Here's the step-by-step Blender Python script:\n\n```python\nimport bpy\nimport math\n\n# Function to create a cone\ndef create_cone(location):\n    bpy.ops.mesh.primitive_cone_add(\n        vertices=32, \n        radius1=1, \n        depth=2, \n        location=location\n    )\n    return bpy.context.active_object\n\n# Function to create a central sphere\ndef create_sphere(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(\n        radius=1, \n        location=location\n    )\n    return bpy.context.active_object\n\n# Remove default objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a central sphere\ncentral_sphere = create_sphere((0, 0, 0))\n\n# Create a cone at the starting position\ncone = create_cone((3, 0, 0))\n\n# Set up orbiting animation\nframe_end = 250\nbpy.context.scene.frame_end = frame_end\n\n# Set keyframes for the cone to orbit around the central sphere\nfor frame in range(0, frame_end + 1):\n    bpy.context.scene.frame_set(frame)\n    \n    angle = (2 * math.pi * frame) / frame_end  # Complete revolution\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    \n    cone.location = (x, y, 0)\n    cone.keyframe_insert(data_path=\"location\", index=-1)\n\n# Set up camera\nbpy.ops.object.camera_add(location=(7, -7, 5))\ncamera = bpy.context.active_object\nbpy.context.scene.camera = camera\ncamera.rotation_euler = (math.radians(60), 0, math.radians(45))\n\n# Set up lighting\nbpy.ops.object.light_add(type='SUN', radius=1, location=(0, 0, 10))\nlight = bpy.context.active_object\nlight.data.energy = 3\n\n# Now, you can play the animation in Blender or render it to see the orbiting effect.\n```\n\n### Explanation\n\n1. **Creating Shapes**:\n   - The `create_cone()` function"
    },
    {
        "Text Input": "A sphere scales up and down.",
        "Blender Script": "Certainly! Below is a Blender Python script that animates a sphere scaling up and down. The script will create a sphere, set keyframes for the scale transformation, and add a scaling animation to it.\n\n```python\nimport bpy\n\n# Delete all mesh objects in the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a new UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set the number of frames for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Function to set keyframes for scale animation\ndef set_scale_keyframes(obj, frame, scale):\n    obj.scale = scale\n    obj.keyframe_insert(data_path=\"scale\", frame=frame)\n\n# Set initial scale keyframe\nset_scale_keyframes(sphere, frame=1, scale=(1, 1, 1))\n\n# Scale up at frame 15\nset_scale_keyframes(sphere, frame=15, scale=(2, 2, 2))\n\n# Scale down back to normal at frame 30\nset_scale_keyframes(sphere, frame=30, scale=(1, 1, 1))\n\n# Scale down even smaller at frame 45\nset_scale_keyframes(sphere, frame=45, scale=(0.5, 0.5, 0.5))\n\n# Scale back to normal size at frame 60\nset_scale_keyframes(sphere, frame=60, scale=(1, 1, 1))\n\n# Adjust interpolation type for the keyframes to be smooth\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'BEZIER'\n\n# Ensure we're at the starting frame of the animation\nbpy.context.scene.frame_set(1)\n\nprint(\"Sphere scaling animation created successfully!\")\n```\n\nTo use this script, open Blender, go to the Scripting workspace, create a new text block, paste the code, and click \"Run Script\". This will clear any existing mesh objects, create a new sphere, and animate it to scale up and down over 60 frames. The sequence will scale the sphere larger and smaller as specified, with smooth transitions ensured"
    },
    {
        "Text Input": "A sphere scales up and down.",
        "Blender Script": "To create an animation in Blender where a sphere scales up and down, you can use the following Python script. This script will automate creating a sphere, applying scale keyframes, and setting up the animation.\n\n```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"ScalingSphere\"\n\n# Set up animation\nscene = bpy.context.scene\nscene.frame_start = 0\nscene.frame_end = 100\nfps = scene.render.fps\n\n# Function to insert scale keyframes\ndef insert_scale_keyframe(obj, scale, frame):\n    obj.scale = (scale, scale, scale)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame)\n\n# Insert keyframes for scaling\ninsert_scale_keyframe(sphere, 1, 0)      # Normal size at start\ninsert_scale_keyframe(sphere, 2, 25)     # Scaled up at quarter\ninsert_scale_keyframe(sphere, 1, 50)     # Back to normal at half\ninsert_scale_keyframe(sphere, 0.5, 75)   # Scaled down at three quarters\ninsert_scale_keyframe(sphere, 1, 100)    # Normal size at end\n\n# Ensure the keyframes are set to linear interpolation for smooth transition\nfor fcurve in sphere.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Set the animation to loop\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = 100\nsphere.animation_data.action.fcurves.update()\n\n# Play the animation\nbpy.ops.screen.animation_play()\n\nprint(\"Script Finished: A sphere is now scaling up and down.\")\n```\n\nTo execute this script in Blender:\n\n1. Open Blender and go to the \"Scripting\" workspace.\n2. Create a new text block and paste the script above.\n3. Press `Run Script` in the text editor header.\n\nThis script will animate a sphere that scales to twice its size, returns to original, shrinks to half, and repeats the cycle, setting keyframes at designated frames."
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cone sliding from the top to the bottom, you'll need to set up a basic scene, add a cone object, and then create keyframes to animate its movement. Below is a script that accomplishes this task:\n\n```python\nimport bpy\n\n# Clear existing objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a cone object to the scene\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 2))\ncone = bpy.context.active_object\n\n# Set the start and end frames for the animation\nstart_frame = 1\nend_frame = 50\n\n# Set the initial position of the cone (top position)\ncone.location = (0, 0, 2)\ncone.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the final position of the cone (bottom position)\ncone.location = (0, 0, -2)\ncone.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set up animation playback setting\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Switch to object mode if not already active\nif bpy.context.active_object.mode != 'OBJECT':\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Print a message to indicate that the script has finished running\nprint(\"Cone sliding animation created.\")\n```\n\nThis script includes the following steps:\n\n1. **Clear Existing Objects**: Clears any object in the current scene to start fresh.\n2. **Add a Cone**: Uses Blender's built-in function to add a cone primitive to the scene.\n3. **Define Animation Frames**: Sets the start and end frames for the animation.\n4. **Insert Keyframes for Animation**: Animates the cone by inserting keyframes for its starting position at the top and its ending position at the bottom.\n5. **Setup Scene Playback Settings**: Configures the animation playback to match the frame range.\n6. **Execute and Confirm**: Executes the animation setup and prints a confirmation message upon completion.\n\nYou can run this script in Blender's scripting environment. Make sure you have a new or appropriate existing Blender project open. Simply open a Text Editor panel in Blender, paste the script, and click 'Run Script'. The cone"
    },
    {
        "Text Input": "A cube orbits around another object.",
        "Blender Script": "To create a Blender Python script where a cube orbits around another object, we'll use the Blender Python API (bpy). We'll create a cube and another object, such as a sphere, and animate the cube orbiting around the sphere.\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.wm.read_homefile(use_empty=True)\n\n# Create a sphere as the central object\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\nsphere.name = \"CentralSphere\"\n\n# Create a cube to orbit around the sphere\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(2, 0, 0))\ncube = bpy.context.active_object\ncube.name = \"OrbitingCube\"\n\n# Set the pivot point of the cube to the center of the sphere\nbpy.context.scene.cursor.location = sphere.location\nbpy.ops.object.origin_set(type='ORIGIN_CURSOR')\n\n# Define the number of frames and animation settings\nframe_count = 250\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = frame_count\n\n# Define orbit parameters\norbit_radius = 2\norbit_speed = 0.05  # Adjust speed for faster or slower orbit\n\n# Keyframe the cube's orbit around the sphere\nfor frame in range(1, frame_count + 1):\n    # Calculate angle based on current frame\n    angle = frame * orbit_speed\n    \n    # Calculate new position\n    x = sphere.location.x + orbit_radius * math.cos(angle)\n    y = sphere.location.y + orbit_radius * math.sin(angle)\n    z = sphere.location.z\n    \n    # Set the cube's location\n    cube.location = (x, y, z)\n    \n    # Insert keyframe\n    cube.keyframe_insert(data_path='location', frame=frame)\n\n# Set animation playback settings\nbpy.context.scene.render.fps = 24  # frames per second\n\n# Play the animation\nbpy.ops.screen.animation_play()\n```\n\nThis script will:\n- Create a sphere at the origin to act as the central object.\n- Create a cube that will orbit around the sphere.\n- Set up keyframes to animate the cube's orbit around the sphere over 250 frames.\n- The cube orbits in a circular path around the sphere with a defined speed, controlled by `orbit_speed`.\n\n"
    },
    {
        "Text Input": "A cone slides from top to bottom.",
        "Blender Script": "To create a Blender Python script that animates a cone sliding from top to bottom, we'll need to use Blender's Python API to set up the scene, create a cone object, and animate its movement. Here's a simple script to accomplish that:\n\n```python\nimport bpy\n\ndef create_cone():\n    # Create a cone\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=2, location=(0, 0, 10))\n    cone = bpy.context.object\n    cone.name = \"SlidingCone\"\n    \n    return cone\n\ndef animate_cone(cone):\n    # Set the start and end frames\n    start_frame = 1\n    end_frame = 100\n    \n    # Set initial location keyframe at start frame\n    cone.keyframe_insert(data_path=\"location\", frame=start_frame)\n    \n    # Move the cone to the bottom position\n    cone.location.z = 0\n    \n    # Set final location keyframe at end frame\n    cone.keyframe_insert(data_path=\"location\", frame=end_frame)\n    \n    # Set the interpolations to linear so the movement is uniform\n    for fcurve in cone.animation_data.action.fcurves:\n        for kf in fcurve.keyframe_points:\n            kf.interpolation = 'LINEAR'\n\ndef clear_scene():\n    # Delete all objects in the scene to start fresh\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\ndef main():\n    # Clear the existing scene\n    clear_scene()\n    \n    # Create a cone\n    cone = create_cone()\n    \n    # Animate the cone\n    animate_cone(cone)\n\n# Run the script\nmain()\n```\n\n### Instructions to Use this Script:\n\n1. **Open Blender**: Make sure you have Blender open.\n\n2. **Scripting Workspace**: Go to the 'Scripting' tab at the top.\n\n3. **New Script**:\n   - Create a new text file within the scripting workspace.\n   - Copy and paste the above script into this new text file.\n\n4. **Run the Script**:\n   - With your new script file open in the script editor, click `Run Script` or press `Alt + P`.\n\n5. **View the Animation**:\n   - Switch to the 'Layout' workspace, ensure you're in object mode, and"
    },
    {
        "Text Input": "A torus jumps up and lands.",
        "Blender Script": "To create a Blender Python script that animates a torus jumping up and landing, you can use the following script. This script will set keyframes to animate the torus in Blender:\n\n```python\nimport bpy\nimport math\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ntorus = bpy.context.active_object\ntorus.name = \"JumpingTorus\"\n\n# Define jumping keyframes\nstart_frame = 1\npeak_frame = 20\nend_frame = 40\n\n# Insert keyframe at the starting position\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Insert keyframe at the peak of the jump\ntorus.location = (0, 0, 2)\ntorus.keyframe_insert(data_path=\"location\", frame=peak_frame)\n\n# Insert keyframe at the landing position\ntorus.location = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set the playback to loop the jump\nbpy.context.scene.frame_step = 1\nbpy.context.scene.render.fps = 24\n\n# Make the animation smoother using interpolation\nfor fc in torus.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'BEZIER'\n```\n\nThis script will:\n1. Create a new torus object.\n2. Set keyframes to animate the torus jumping to a height of 2 Blender units and landing back down.\n3. Use Bezier interpolation to make the movement smooth.\n\nTo run this script:\n- Open Blender and go to the Scripting workspace.\n- Create a new text block and paste the script into it.\n- Click the 'Run Script' button or press `Alt+P` with your mouse over the text editor.\n\nThe scene will be cleared of mesh objects, and a torus will be created and animated according to the script. The animation will"
    },
    {
        "Text Input": "A plane performs a bouncing effect.",
        "Blender Script": "To create a bouncing effect with a plane in Blender using Python, we will use Blender's `bpy` module. The script will animate the plane moving up and down over a timeline to simulate a bouncing effect.\n\nHere is a simple script that creates a plane and animates its Z-location to achieve a bouncing effect:\n\n```python\nimport bpy\n\n# Remove all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create a new plane\nbpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\nplane = bpy.context.active_object\n\n# Set up the bouncing animation\nfps = 24  # Frames per second\nbpy.context.scene.render.fps = fps\n\n# Bounce parameters\nbounce_height = 2.0  # Maximum height of the bounce\nbounce_frames = 24  # Number of frames for one bounce\n\n# Add keyframes for the bounce effect\nfor i in range(5):  # Number of bounces\n    start_frame = i * bounce_frames\n    mid_frame = start_frame + bounce_frames // 2\n    end_frame = start_frame + bounce_frames\n    \n    # Starting position (bottom of the bounce)\n    plane.location.z = 0.0\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=start_frame)\n    \n    # Mid position (top of the bounce)\n    plane.location.z = bounce_height\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=mid_frame)\n    \n    # End position (back to the bottom of the bounce)\n    plane.location.z = 0.0\n    plane.keyframe_insert(data_path=\"location\", index=2, frame=end_frame)\n\n# Set interpolation type to make the bounce smoother\nfor fcurve in plane.animation_data.action.fcurves:\n    for kfp in fcurve.keyframe_points:\n        kfp.interpolation = 'QUAD'\n\n# Optional: Adjust the timeline to encapsulate the animation\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = (5 * bounce_frames)\n\n# Switch to the Animation layout\nbpy.context.area.ui_type = 'DOPESHEET_EDITOR'\n```\n\n### Explanation:\n\n1. **Delete Existing Objects**: We start by clearing the existing objects to work in a clean environment.\n   \n2"
    },
    {
        "Text Input": "A torus expands and shrinks.",
        "Blender Script": "To create a Blender Python script that makes a torus expand and shrink, you can achieve this by animating the scale of the torus over time. Below is a script that sets up a torus and animates its scale to create the desired effect.\n\n```python\nimport bpy\n\n# Create a new torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\n\n# Get the torus object\ntorus = bpy.context.active_object\n\n# Set the frame range for the animation\nstart_frame = 1\nend_frame = 100\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\n# Set keyframes for the torus scale to create an expanding and shrinking effect\n\n# Start keyframe: small scale\ntorus.scale = (0.5, 0.5, 0.5)\ntorus.keyframe_insert(data_path=\"scale\", frame=start_frame)\n\n# Mid keyframe: expanded scale\nmid_frame = (start_frame + end_frame) // 2\ntorus.scale = (1.5, 1.5, 1.5)\ntorus.keyframe_insert(data_path=\"scale\", frame=mid_frame)\n\n# End keyframe: back to small scale\ntorus.scale = (0.5, 0.5, 0.5)\ntorus.keyframe_insert(data_path=\"scale\", frame=end_frame)\n\n# Set the interpolation to make the animation smoother (optional)\nfor fcurve in torus.animation_data.action.fcurves:\n    for kf in fcurve.keyframe_points:\n        kf.interpolation = 'SINE'\n\nprint(\"Torus expand and shrink animation created. Play the animation to see the effect.\")\n```\n\nThis script does the following:\n- Adds a torus to the scene.\n- Sets the initial frame range for the animation.\n- Animates the scale of the torus from small to large and back to small across 100 frames.\n- Optionally smoothes the interpolation of the keyframes using a sine curve for a natural expanding and shrinking effect.\n\nTo use the script:\n1. Open Blender and switch to a scripting workspace.\n2. Create a new text block and paste the script into Blender's text editor.\n3. Click \"Run Script\" to add the torus and start the animation.\n\nPlay the animation in the timeline to see the torus expand and shrink. You can"
    },
    {
        "Text Input": "A cylinder bounces like a ball.",
        "Blender Script": "To create a bouncing cylinder animation in Blender using Python scripting, we need to set up the animation by programmatically creating keyframes that make the cylinder \"bounce\". Below is a simple script that uses Blender's Python API to create a basic bounce animation.\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create a cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Set up animation parameters\nstart_frame = 1\nend_frame = 60\nbounce_height = 5\nbounce_count = 3\n\n# Configure keyframes so the cylinder bounces\nfor i in range(bounce_count):\n    # Calculate frame numbers for the current bounce cycle\n    up_frame = start_frame + i * (end_frame // bounce_count)\n    down_frame = up_frame + (end_frame // (2 * bounce_count))\n    next_frame = up_frame + (end_frame // bounce_count)\n    \n    # Set keyframe for bottom position\n    cylinder.location.z = 0\n    cylinder.keyframe_insert(data_path=\"location\", frame=up_frame)\n    \n    # Set keyframe for top position\n    if down_frame < end_frame:\n        cylinder.location.z = bounce_height\n        cylinder.keyframe_insert(data_path=\"location\", frame=down_frame)\n        \n    # Return to bottom\n    if next_frame <= end_frame:\n        cylinder.location.z = 0\n        cylinder.keyframe_insert(data_path=\"location\", frame=next_frame)\n\n# Set the timeline end frame\nbpy.context.scene.frame_end = end_frame\n\n# Optional: Adding some rotation for effect\nfor f in range(start_frame, end_frame + 1):\n    cylinder.rotation_euler = (0, 0, math.pi * 2 * (f / end_frame))\n    cylinder.keyframe_insert(data_path=\"rotation_euler\", frame=f)\n```\n\nThis script will:\n\n1. Clear the existing scene objects.\n2. Create a new cylinder at the origin.\n3. Define parameters for the bounce animation, including the number of bounces and the bounce height.\n4. Use keyframes to animate the cylinder moving up and down to simulate a bounce.\n5. Optionally, add some rotation to make it look more dynamic as it bounces.\n\nYou can paste"
    },
    {
        "Text Input": "A sphere moves diagonally upwards.",
        "Blender Script": "To create a Blender Python script that animates a sphere moving diagonally upwards, you can follow the script below. This script will set up a sphere object, add keyframes to animate it over time, and move it diagonally upwards in 3D space. Here's how you can do it:\n\n```python\nimport bpy\n\n# Clear existing mesh objects (optional)\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Set start and end frames for the animation\nstart_frame = 1\nend_frame = 100\n\n# Define the initial and final positions\ninitial_position = (0, 0, 0)\nfinal_position = (10, 10, 10)\n\n# Set the sphere at the initial position and keyframe\nsphere.location = initial_position\nsphere.keyframe_insert(data_path=\"location\", frame=start_frame)\n\n# Set the sphere at the final position and keyframe\nsphere.location = final_position\nsphere.keyframe_insert(data_path=\"location\", frame=end_frame)\n\n# Adjust interpolation to be linear (optional, for constant speed)\nfor fc in sphere.animation_data.action.fcurves:\n    for kp in fc.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\n# Set the scene's frame range\nbpy.context.scene.frame_start = start_frame\nbpy.context.scene.frame_end = end_frame\n\nprint(\"Sphere animation setup complete.\")\n```\n\nThis script performs the following steps:\n\n1. Clears existing meshes from the scene for a clean start.\n2. Adds a UV sphere at the origin.\n3. Sets the start and end frames for the animation.\n4. Defines the initial and final positions for the sphere.\n5. Inserts keyframes at the start and end frames for the sphere's location, enabling it to animate from the initial to the final position.\n6. Changes the keyframe interpolation to linear for a consistent movement speed.\n7. Sets the frame range for the animation playback.\n\nTo run this script, open Blender, go to the Scripting workspace, create a new script, and paste the code. Then, click on \"Run Script\" to execute it. You should see the sphere moving diagonally upwards as specified."
    },
    {
        "Text Input": "A torus performs a bouncing effect.",
        "Blender Script": "To create a bouncing torus animation in Blender using Python, we'll need to use Blender's scripting capabilities to animate the torus along the Z-axis, giving the illusion of a bouncing effect. Here's a step-by-step script that sets up the scene, creates a torus, and adds animation to it:\n\n```python\nimport bpy\nimport math\n\n# Delete all existing objects first\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a torus\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.object\n\n# Set the number of frames for the animation\ntotal_frames = 100\nbouncing_height = 2\n\n# Set the animation frame start and end\nbpy.context.scene.frame_start = 0\nbpy.context.scene.frame_end = total_frames\n\n# Define a bounce function\ndef bounce(frame, height, total_frames):\n    # Sinusoidal bouncing curve\n    return height * math.fabs(math.sin(math.pi * frame / total_frames))\n\n# Animate the torus\nfor frame in range(total_frames + 1):\n    z_position = bounce(frame, bouncing_height, total_frames)\n    torus.location.z = z_position\n    torus.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\n# Switch to animation screen (for user's convenience)\nbpy.ops.screen.animation_play()\n\n# To run this script, simply copy and paste it into Blender's text editor\n# and then click \"Run Script\" to see the bouncing torus animation in action.\n```\n\n### Explanation:\n1. **Clear Existing Scene**: We start by deleting any existing objects in the scene to ensure our torus is the only object present.\n\n2. **Create a Torus**: We use `bpy.ops.mesh.primitive_torus_add()` to add a torus to the scene at the origin.\n\n3. **Set Animation Parameters**: Defines the total number of frames for one bounce cycle. The `bouncing_height` variable defines how high the torus will bounce.\n\n4. **Bounce Function**: The `bounce` function uses a simple sine function to calculate the Z position of the torus for a given frame. It creates a smooth sinusoidal bounce.\n\n5. **Animate**: A loop iterates over each frame. For each frame, it calculates the Z position and inserts a keyframe for"
    },
    {
        "Text Input": "A torus rotates on the X-axis.",
        "Blender Script": "To create a Blender Python script that rotates a torus on the X-axis, you can use the Blender Python API (bpy). Below is a script that creates a torus in the scene and animates its rotation along the X-axis over a period of time.\n\n```python\nimport bpy\n\n# Clear existing mesh objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a torus to the scene\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0))\n\n# Get reference to the torus object\ntorus = bpy.context.object\n\n# Set keyframes for rotation animation\nframe_start = 1\nframe_end = 250\nrotation_angle = 360  # Degrees to rotate around the X-axis\n\n# Set initial rotation and keyframe\ntorus.rotation_euler = (0, 0, 0)\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\n# Set final rotation and keyframe\ntorus.rotation_euler = (rotation_angle * (3.14159 / 180.0), 0, 0)  # Convert degrees to radians\ntorus.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set the output frame range\nbpy.context.scene.frame_start = frame_start\nbpy.context.scene.frame_end = frame_end\n\n# Optionally, set up the animation playback rate (frames per second)\nbpy.context.scene.render.fps = 24\n\n# Save the Blender file (optional)\nbpy.ops.wm.save_as_mainfile(filepath=\"torus_rotation.blend\")\n```\n\n### Instructions for Use:\n1. Open Blender and go to the Scripting workspace.\n2. Click on \"New\" to create a new text block and paste the above script.\n3. Click the \"Run Script\" button to execute the script.\n\n#### What the Script Does:\n- It clears existing mesh objects in the scene.\n- A torus mesh is created at the origin.\n- It sets keyframes for the animation to rotate the torus 360 degrees around the X-axis from frame 1 to frame 250.\n- Configures the scene to play back the animation at 24 frames per second.\n- Optionally, saves the Blender file with the setup.\n\nAdjust the `frame_end` and"
    },
    {
        "Text Input": "A sphere expands and shrinks.",
        "Blender Script": "To create a Blender script that makes a sphere expand and shrink, you'll want to utilize the Blender Python API to animate the scale of the sphere over time. Below is a basic script that accomplishes this effect:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Add a UV sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.active_object\n\n# Set the frame range for the animation\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 120\n\n# Define keyframes for expanding and shrinking\nexpand_shrink_frames = [\n    (1, 1.0),  # Starting scale\n    (30, 2.0),  # Maximum expansion\n    (60, 1.0),  # Shrink back to original\n    (90, 0.5),  # Minimum shrink\n    (120, 1.0)  # Return to original size\n]\n\n# Set keyframes for the scale of the sphere\nfor frame, scale_factor in expand_shrink_frames:\n    sphere.scale = (scale_factor, scale_factor, scale_factor)\n    sphere.keyframe_insert(data_path='scale', frame=frame)\n\n# Optional: Make the animation smoother by setting interpolation to 'SINE'\nfor fcurve in sphere.animation_data.action.fcurves:\n    for keyframe in fcurve.keyframe_points:\n        keyframe.interpolation = 'SINE'\n\nprint(\"Animation of sphere expanding and shrinking successfully created.\")\n```\n\n### Explanation:\n- **Clearing existing objects**: We start by deleting any existing mesh objects to have a clean scene.\n- **Adding the sphere**: A UV sphere is created in the scene.\n- **Frame Range**: The animation is set to run from frame 1 to frame 120 for a smooth animation demonstration.\n- **Keyframes**: The script specifies keyframes at specific frames where the sphere will expand and shrink. These keyframes are set with different scale factors.\n- **Interpolation**: To make the scale changes smoother, we change the interpolation method to 'SINE'.\n- **Running the script**: Simply run the script in Blender's scripting panel. You should see the sphere animate from expanding to"
    },
    {
        "Text Input": "A sphere moves in a circular path.",
        "Blender Script": "To create a Blender Python script that animates a sphere moving in a circular path, you'll need to use Blender's API to define the sphere and control its movement with keyframes along a pre-defined circular path. Here's a basic script to achieve that:\n\n```python\nimport bpy\nimport math\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(2, 0, 0))\nsphere = bpy.context.object\n\n# Parameters for circular movement\nradius = 5\ncenter_x, center_y, center_z = 0, 0, 0\nframes = 100\nrotation_speed = (2 * math.pi) / frames  # Full circle in specified frames\n\n# Set up animation keyframes\nfor frame in range(frames + 1):\n    angle = rotation_speed * frame\n    x = center_x + radius * math.cos(angle)\n    y = center_y + radius * math.sin(angle)\n    z = center_z\n\n    sphere.location = (x, y, z)\n    sphere.keyframe_insert(data_path='location', frame=frame)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = frames\n```\n\n### How the Script Works:\n\n1. **Clear Existing Objects**: The script starts by clearing any existing objects in the scene to ensure the scene is empty before adding new objects.\n\n2. **Add a Sphere**: A UV sphere is added at a specified initial location.\n\n3. **Parameters for Circular Movement**:\n   - `radius` defines the circle's radius.\n   - `(center_x, center_y, center_z)` is the center of the circle.\n   - `frames` is the total number of frames over which the animation will occur.\n   - `rotation_speed` calculates the angular step size for each frame based on a complete circle (2\u03c0 radians).\n\n4. **Animation Keyframes**:\n   - The script iterates over the number of frames, calculates the sphere's position on the circular path for each frame, sets the sphere's location, and inserts a keyframe.\n\n5. **Set Animation Frame End**: Finally, set the end frame of the animation in Blender's timeline.\n\nTo run the script, open Blender, switch to Scripting tab, paste the script into the text editor, and click \""
    },
    {
        "Text Input": "Rotate a Cube in Blender.",
        "Blender Script": "This script creates a cube and animates its rotation from 0 to 180 degrees (\u03c0 radians) over 60 frames.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_cube_add()\ncube = bpy.context.object\ncube.rotation_euler = (0, 0, 0)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ncube.rotation_euler = (0, 0, 3.14)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n```"
    },
    {
        "Text Input": "Move Cube Along X-Axis in Blender.",
        "Blender Script": "This script creates a cube and animates its movement along the X-axis from position 0 to 5 over 60 frames.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_cube_add()\ncube = bpy.context.object\ncube.location.x = 0\ncube.keyframe_insert(data_path=\"location\", frame=1)\ncube.location.x = 5\ncube.keyframe_insert(data_path=\"location\", frame=60)\n```"
    },
    {
        "Text Input": "Scale an Object in Blender.",
        "Blender Script": "This script creates a sphere and animates its scaling from (1, 1, 1) to (2, 2, 2) over 60 frames.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_uv_sphere_add()\nsphere = bpy.context.object\nsphere.scale = (1, 1, 1)\nsphere.keyframe_insert(data_path=\"scale\", frame=1)\nsphere.scale = (2, 2, 2)\nsphere.keyframe_insert(data_path=\"scale\", frame=60)\n```"
    },
    {
        "Text Input": "Move and Rotate Simultaneously in Blender.",
        "Blender Script": "This script moves a cube along the X-axis and rotates it around the Z-axis simultaneously over 60 frames.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_cube_add()\ncube = bpy.context.object\ncube.keyframe_insert(data_path=\"location\", frame=1)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ncube.location.x = 3\ncube.rotation_euler.z = 3.14\ncube.keyframe_insert(data_path=\"location\", frame=60)\ncube.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n```"
    },
    {
        "Text Input": "Animate a Cube Jumping in Blender.",
        "Blender Script": "This script animates a cube jumping by changing its Z-location over 60 frames.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_cube_add()\ncube = bpy.context.object\ncube.keyframe_insert(data_path=\"location\", frame=1)\ncube.location.z = 3\ncube.keyframe_insert(data_path=\"location\", frame=30)\ncube.location.z = 0\ncube.keyframe_insert(data_path=\"location\", frame=60)\n```"
    },
    {
        "Text Input": "Falling Sphere with Gravity in Blender.",
        "Blender Script": "This script adds a sphere to the scene and applies rigid body physics to simulate gravity.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_uv_sphere_add()\nsphere = bpy.context.object\nbpy.ops.rigidbody.object_add()\nsphere.rigid_body.type = 'ACTIVE'\n```"
    },
    {
        "Text Input": "Bouncing Ball Animation in Blender.",
        "Blender Script": "This script creates a sphere and applies rigid body physics to make it bounce.\n\n```python\nimport bpy\n\nbpy.ops.mesh.primitive_uv_sphere_add()\nball = bpy.context.object\nball.location.z = 2\nbpy.ops.rigidbody.object_add()\nball.rigid_body.type = 'ACTIVE'\nball.rigid_body.restitution = 0.8  # Bounciness\n```"
    },
    {
        "Text Input": "Domino Effect Animation in Blender.",
        "Blender Script": "This script creates a domino effect using cubes, where the first cube is active, and the rest are passive.\n\n```python\nimport bpy\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i, 0, 0.25))\n    cube = bpy.context.object\n    bpy.ops.rigidbody.object_add()\n    cube.rigid_body.type = 'ACTIVE' if i == 0 else 'PASSIVE'\n```"
    },
    {
        "Text Input": "Wind Blowing a Cloth Animation in Blender.",
        "Blender Script": "This script adds a cloth modifier to a plane, simulating a cloth object affected by wind.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_plane_add(size=2)\ncloth = bpy.context.object\nbpy.ops.object.modifier_add(type='CLOTH')\n```"
    },
    {
        "Text Input": "Move Camera Forward Animation in Blender.",
        "Blender Script": "This script animates the camera moving along the Y-axis from its initial position to a new position.\n\n```python\nimport bpy\n\nbpy.ops.object.camera_add()\ncam = bpy.context.object\ncam.location = (0, -5, 2)\n\ncam.keyframe_insert(data_path=\"location\", frame=1)\ncam.location.y = 0\ncam.keyframe_insert(data_path=\"location\", frame=60)\n```"
    },
    {
        "Text Input": "Camera Orbit Around an Object Animation in Blender.",
        "Blender Script": "This script animates a camera orbiting around an object by rotating it around the Z-axis.\n\n```python\nimport bpy\n\nbpy.ops.object.camera_add()\ncam = bpy.context.object\ncam.location = (5, 0, 2)\n\ncam.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ncam.rotation_euler.z = 3.14\ncam.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n```"
    },
    {
        "Text Input": "Wave Motion Animation in Blender.",
        "Blender Script": "This script adds a wave modifier to a plane, simulating wave motion.\n\n```python\nimport bpy\n\nbpy.ops.mesh.primitive_plane_add(size=5)\nplane = bpy.context.object\nbpy.ops.object.modifier_add(type='WAVE')\n```"
    },
    {
        "Text Input": "Spiral Motion Animation in Blender.",
        "Blender Script": "This script animates a sphere in a spiral motion by updating its location based on trigonometric functions.\n\n```python\nimport bpy\nimport math\n\nbpy.ops.mesh.primitive_uv_sphere_add()\nsphere = bpy.context.object\n\nfor frame in range(1, 61):\n    sphere.location.x = math.cos(frame / 10) * 2\n    sphere.location.y = math.sin(frame / 10) * 2\n    sphere.location.z = frame / 30\n    sphere.keyframe_insert(data_path=\"location\", frame=frame)\n```"
    },
    {
        "Text Input": "Growing Tree Animation in Blender.",
        "Blender Script": "This script animates a tree growing by scaling a cone object in Blender.\n\n```python\nimport bpy\nbpy.ops.mesh.primitive_cone_add()\ntree = bpy.context.object\ntree.keyframe_insert(data_path=\"scale\", frame=1)\ntree.scale = (1, 1, 5)\ntree.keyframe_insert(data_path=\"scale\", frame=60)\n```"
    },
    {
        "Text Input": "Simple Cube Location Animation in Blender.",
        "Blender Script": "This script animates a cube moving along the Z-axis in Blender.\n\n```python\nimport bpy\n# add a cube into the scene\nbpy.ops.mesh.primitive_cube_add()\n# get a reference to the currently active object\ncube = bpy.context.active_object\n# insert keyframe at frame one\nstart_frame = 1\ncube.keyframe_insert(\"location\", frame=start_frame)\n# change the location of the cube on the z-axis\ncube.location.z = 5\n# insert keyframe at the last frame\nend_frame = 180\ncube.keyframe_insert(\"location\", frame=end_frame)\n```"
    },
    {
        "Text Input": "Easy Cube Rotation Animation in Blender.",
        "Blender Script": "This script animates a cube rotating 360 degrees along the Z-axis in Blender.\n\n```python\nimport bpy\n# give Python access to Blender's functionality\nimport math\n# add a cube into the scene\nbpy.ops.mesh.primitive_cube_add()\n# get a reference to the currently active object\ncube = bpy.context.active_object\n# insert keyframe at frame one\nstart_frame = 1\ncube.keyframe_insert(\"rotation_euler\", frame=start_frame)\n# change the rotation of the cube around z-axis\ndegrees = 360\nradians = math.radians(degrees)\ncube.rotation_euler.z = radians\n# insert keyframe at the last frame\nend_frame = 180\ncube.keyframe_insert(\"rotation_euler\", frame=end_frame)\n```"
    },
    {
        "Text Input": "Create a Cube Using BMesh in Blender.",
        "Blender Script": "This script creates a cube in Blender using the BMesh API.\n\n```python\nimport bpy\n\nverts = [\n(-1.0, -1.0, -1.0),\n(-1.0, 1.0, -1.0),\n(1.0, 1.0, -1.0),\n(1.0, -1.0, -1.0),\n(-1.0, -1.0, 1.0),\n(-1.0, 1.0, 1.0),\n(1.0, 1.0, 1.0),\n(1.0, -1.0, 1.0),\n]\n\nfaces = [\n(0, 1, 2, 3),\n(7, 6, 5, 4),\n(4, 5, 1, 0),\n(7, 4, 0, 3),\n(6, 7, 3, 2),\n(5, 6, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n```"
    },
    {
        "Text Input": "Create a Circle Mesh in Blender Using Custom Functions.",
        "Blender Script": "This script creates a circle mesh using custom functions to generate vertices and edges.\n\n```python\nimport bpy\nimport math\nimport pprint\n\n# Function to calculate the vertices of a circle\ndef get_circle_verts(vert_count, radius):\n    # initialize paramaters\n    angle_step = math.tau / vert_count\n\n    # create a list of vert coordinates\n    vert_coordinates = list()\n\n    # repeat code in a loop\n    for i in range(vert_count):\n        # calculate current current_angle\n        current_angle = angle_step * i\n\n        # calculate coordinate\n        x = radius * math.cos(current_angle)\n        y = radius * math.sin(current_angle)\n\n        # add current coordinate to list\n        vert_coordinates.append((x, y, 0))\n\n    return vert_coordinates\n\n# Function to create circle mesh\ndef create_circle_mesh(coordinates, vert_count):\n    verts = coordinates\n    faces = []\n    edges = []\n\n    for i in range(vert_count - 1):\n        current_vert_index = i\n        next_vert_index = i + 1\n        edges.append((current_vert_index, next_vert_index))\n\n    edges.append((vert_count - 1, 0))\n\n    # create a mesh from the vert, edge, and face data\n    mesh_data = bpy.data.meshes.new(\"circle_data\")\n    mesh_data.from_pydata(verts, edges, faces)\n\n    # create a object using the mesh data\n    mesh_obj = bpy.data.objects.new(\"circle_object\", mesh_data)\n    bpy.context.collection.objects.link(mesh_obj)\n\n# initialize parameters\nvert_count = 32\nradius = 2\ncoordinates = get_circle_verts(vert_count, radius)\n\nmesh_obj = create_circle_mesh(coordinates, vert_count)\n```"
    },
    {
        "Text Input": "Camera Tracking an Empty Object with Multiple Cubes in Blender.",
        "Blender Script": "This script creates multiple cubes along the Y-axis and makes the camera track an empty object that moves along the Y-axis.\n\n```python\nimport bpy\n\n# create parameters\ncube_count = 10\nlocation_offset = 3\nframe_count = 300\n\n# set the end frame\nbpy.context.scene.frame_end = frame_count\n\n# create a row of cubes along the Y-axis\nfor i in range(cube_count):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, i * location_offset, 0))\n\n# create an empty for tracking\nbpy.ops.object.empty_add()\nempty = bpy.context.active_object\n\n# animate the location property of the empty\nempty.keyframe_insert(\"location\", frame=1)\nempty.location.y = cube_count * location_offset\nempty.keyframe_insert(\"location\", frame=frame_count)\n\n# add a camera into the scene\nbpy.ops.object.camera_add()\ncamera = bpy.context.active_object\ncamera.location.x = 15\ncamera.location.y = cube_count * location_offset / 2\ncamera.location.z = 2\n\n# add a constraint to track the empty\nbpy.ops.object.constraint_add(type=\"TRACK_TO\")\ncamera.constraints[\"Track To\"].target = empty\n```"
    },
    {
        "Text Input": "Phyllotaxis pattern generation based on formula 4.1 from Algorithmic Botany.",
        "Blender Script": "This script generates a phyllotaxis pattern using the Fibonacci angle to create a sunflower-like pattern by adding Icospheres along a spiral path.\n\n```python\nimport bpy\nimport random\nimport math\n\nico_sphere_radius = 0.5\nscale_fac = 1.0\nangle = math.radians(random.uniform(137.0, 138.0))\n\ncount = 400\nfor n in range(count):\n    current_angle = n * angle\n    current_radius = scale_fac * math.sqrt(n)\n    x = current_radius * math.cos(current_angle)\n    y = current_radius * math.sin(current_angle)\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=ico_sphere_radius, location=(x, y, 0))\n```"
    },
    {
        "Text Input": "Generating random Icospheres at random coordinates within a defined range.",
        "Blender Script": "This script creates 10 Icospheres at random locations within a 3D space, where each sphere's position is determined by a randomly generated x, y, and z value.\n\n```python\nimport bpy\nimport random\n\ncoordinates = []\ncoordinate_count = 10\nfor _ in range(coordinate_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    coordinates.append([x, y, z])\n\nfor i in range(len(coordinates)):\n    coord = coordinates[i]\n    x = coord[0]\n    y = coord[1]\n    z = coord[2]\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=1, location=(x, y, z))\n```"
    },
    {
        "Text Input": "Creating a phyllotaxis pattern with 400 Icospheres based on a mathematical formula.",
        "Blender Script": "This script generates a phyllotaxis pattern using the Fibonacci angle, where the spheres are arranged in a spiral-like pattern.\n\n```python\nimport bpy\nimport random\nimport math\n\nico_sphere_radius = 0.5\nscale_fac = 1.0\nangle = math.radians(random.uniform(137.0, 138.0))\n\ncount = 400\nfor n in range(count):\n    current_angle = n * angle\n    current_radius = scale_fac * math.sqrt(n)\n    x = current_radius * math.cos(current_angle)\n    y = current_radius * math.sin(current_angle)\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=ico_sphere_radius, location=(x, y, 0))\n```"
    },
    {
        "Text Input": "Adding 10 Ico Spheres, Cubes, and Cones to the Blender scene at random positions.",
        "Blender Script": "This script generates 10 Ico Spheres, Cubes, and Cones at random positions within the 3D space in Blender.\n\n```python\nimport bpy\nimport random\n\nobject_count = 10\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=1, location=(x, y, z))\n\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_cube_add(location=(x, y, z))\n\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_cone_add(location=(x, y, z))\n```"
    },
    {
        "Text Input": "Creating a phyllotaxis pattern based on a formula for generating 3D points in Blender using spheres.",
        "Blender Script": "This script creates a phyllotaxis pattern in Blender by adding 3D ico spheres at calculated positions based on a mathematical formula.\n\n```python\nimport bpy\nimport random\nimport math\n\nico_sphere_radius = 0.5\n\n# \"c\" in formula (4.1)\nscale_fac = 1.0\n\n# \"\u03b1\" angle in radians in formula (4.1)\nangle = math.radians(random.uniform(137.0, 138.0))\n\n# count of ico spheres to create\ncount = 400\nfor n in range(count):\n    # calculate \"\u03c6\" in formula (4.1)\n    current_angle = n * angle\n\n    # calculate \"r\" in formula (4.1)\n    current_radius = scale_fac * math.sqrt(n)\n\n    # convert from Polar Coordinates (r,\u03c6) to Cartesian Coordinates (x,y)\n    x = current_radius * math.cos(current_angle)\n    y = current_radius * math.sin(current_angle)\n\n    # place ico sphere\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=ico_sphere_radius, location=(x, y, 0))\n```"
    },
    {
        "Text Input": "Generating 10 Ico Spheres at random coordinates in Blender.",
        "Blender Script": "This script generates 10 Ico Spheres at random positions within the 3D space in Blender.\n\n```python\nimport bpy\nimport random\n\n# create a list of coordinates\ncoordinates = []\n\ncoordinate_count = 10\nfor _ in range(coordinate_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    coordinates.append([x, y, z])\n\n# add ico spheres into the scene using the list of coordinates\nfor i in range(len(coordinates)):\n    # access the coordinate at index 'i'\n    coord = coordinates[i]\n\n    # access the coordinate components\n    x = coord[0]\n    y = coord[1]\n    z = coord[2]\n\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=1, location=(x, y, z))\n```"
    },
    {
        "Text Input": "Creating a phyllotaxis pattern based on a formula from algorithmicbotany.org",
        "Blender Script": "This script generates a phyllotaxis pattern of Ico Spheres in Blender.\n\n```python\nimport bpy\nimport random\nimport math\n\nico_sphere_radius = 0.5\n\n# \"c\" in formula (4.1) http://algorithmicbotany.org/papers/abop/abop-ch4.pdf\nscale_fac = 1.0\n\n# \"\u03b1\" angle in radians in formula (4.1) http://algorithmicbotany.org/papers/abop/abop-ch4.pdf\nangle = math.radians(random.uniform(137.0, 138.0))\n\n# set angle to the Fibonacci angle 137.5 to get the sunflower pattern\n# angle = math.radians(137.5)\n\ncount = 400\nfor n in range(count):\n    # calculate \"\u03c6\" in formula (4.1) http://algorithmicbotany.org/papers/abop/abop-ch4.pdf\n    current_angle = n * angle\n\n    # calculate \"r\" in formula (4.1) http://algorithmicbotany.org/papers/abop/abop-ch4.pdf\n    current_radius = scale_fac * math.sqrt(n)\n\n    # convert from Polar Coordinates (r,\u03c6) to Cartesian Coordinates (x,y)\n    x = current_radius * math.cos(current_angle)\n    y = current_radius * math.sin(current_angle)\n\n    # place ico sphere\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=ico_sphere_radius, location=(x, y, 0))\n```"
    },
    {
        "Text Input": "Adding 10 Ico Spheres, Cubes, and Cones to the Blender scene at random positions.",
        "Blender Script": "This script generates 10 Ico Spheres, Cubes, and Cones at random positions within the 3D space in Blender.\n\n```python\nimport bpy\nimport random\n\nobject_count = 10\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=1, location=(x, y, z))\n\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_cube_add(location=(x, y, z))\n\nfor _ in range(object_count):\n    x = random.uniform(-5, 5)\n    y = random.uniform(-5, 5)\n    z = random.uniform(-5, 5)\n    bpy.ops.mesh.primitive_cone_add(location=(x, y, z))\n```"
    },
    {
        "Text Input": "Adding a plane with a random material color to the Blender scene.",
        "Blender Script": "This script creates a plane and assigns it a random color from a predefined list of colors in Blender.\n\n```python\nimport bpy\nimport random\n\ncolors = [\n    [0.888, 0.515, 0.016, 1.0],\n    [0.03, 0.376, 0.521, 1.0],\n    [0.694, 0.019, 0.019, 1.0],\n    [0.888, 0.03, 0.03, 1.0],\n    [1.0, 0.22, 0.631, 1.0],\n    [0.016, 0.491, 0.497, 1.0],\n    [0.001, 0.694, 0.041, 1.0],\n]\n\nbpy.ops.mesh.primitive_plane_add()\nplane_object = bpy.context.active_object\n\nmaterial = bpy.data.materials.new(name=f\"random_diffuse_material\")\nmaterial.diffuse_color = random.choice(colors)\n\nplane_object.data.materials.append(material)\n```"
    },
    {
        "Text Input": "Creating planes with different colors using a dictionary in Blender.",
        "Blender Script": "This script creates planes with colors chosen from a predefined dictionary of colors in Blender. It demonstrates how to create a plane with a specific color and location in the 3D scene, including a random selection of colors from the dictionary.\n\n```python\nimport bpy\nimport random\n\ndef create_plane_with_color(color, location):\n    bpy.ops.mesh.primitive_plane_add()\n    plane_object = bpy.context.active_object\n    plane_object.location = location\n\n    material = bpy.data.materials.new(name=f\"diffuse_material\")\n    material.diffuse_color = color\n\n    plane_object.data.materials.append(material)\n\nmy_colors = {\n    \"Brick Red\": (0.4019, 0.068478, 0.0578054, 1.0),\n    \"Neon Red\": (1.0, 0.0307132, 0.0307135, 1.0),\n    \"Pastel Red\": (0.955973, 0.351532, 0.351533, 1.0)\n}\n\ncolor = my_colors[\"Brick Red\"]\ncreate_plane_with_color(color, location=(0, 0, 0))\n\ncreate_plane_with_color(my_colors[\"Neon Red\"], location=(0, 3, 0))\n\nlist_of_keys = list(my_colors.keys())\nrandom_key = random.choice(list_of_keys)\ncolor = my_colors[random_key]\ncreate_plane_with_color(color, location=(0, 6, 0))\n```"
    },
    {
        "Text Input": "Creating planes with different colors using a dictionary in Blender.",
        "Blender Script": "This script creates planes with colors chosen from a predefined dictionary of colors in Blender. It demonstrates how to create a plane with a specific color and location in the 3D scene, including a random selection of colors from the dictionary.\n\n```python\nimport bpy\nimport random\n\ndef create_plane_with_color(color, location):\n    bpy.ops.mesh.primitive_plane_add()\n    plane_object = bpy.context.active_object\n    plane_object.location = location\n\n    material = bpy.data.materials.new(name=f\"diffuse_material\")\n    material.diffuse_color = color\n\n    plane_object.data.materials.append(material)\n\nmy_colors = {\n    \"Brick Red\": (0.4019, 0.068478, 0.0578054, 1.0),\n    \"Neon Red\": (1.0, 0.0307132, 0.0307135, 1.0),\n    \"Pastel Red\": (0.955973, 0.351532, 0.351533, 1.0)\n}\n\ncolor = my_colors[\"Brick Red\"]\ncreate_plane_with_color(color, location=(0, 0, 0))\n\ncreate_plane_with_color(my_colors[\"Neon Red\"], location=(0, 3, 0))\n\nlist_of_keys = list(my_colors.keys())\nrandom_key = random.choice(list_of_keys)\ncolor = my_colors[random_key]\ncreate_plane_with_color(color, location=(0, 6, 0))\n```"
    },
    {
        "Text Input": "Creating a cube with square faces in Blender.",
        "Blender Script": "This script creates a custom cube with square faces by defining vertices and faces manually in Blender.\n\n```python\nimport bpy\n\n# define the coordinates of each vertex\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (-1.0, -1.0, 1.0),\n    (-1.0, 1.0, 1.0),\n    (1.0, 1.0, 1.0),\n    (1.0, -1.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2, 3),\n    (7, 6, 5, 4),\n    (4, 5, 1, 0),\n    (7, 4, 0, 3),\n    (6, 7, 3, 2),\n    (5, 6, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create an object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\nbpy.context.collection.objects.link(mesh_obj)\n```"
    },
    {
        "Text Input": "Creating a cube with square faces using functions in Blender.",
        "Blender Script": "This script defines multiple functions to create a cube with square faces. It demonstrates how to break down the cube creation into smaller functions, including creating the mesh data, the mesh object, adding the object into the scene, and finally creating the cube with square faces.\n\n```python\nimport bpy\n\n\ndef create_mesh_data(verts, edges, faces):\n    \"\"\"\n    create a mesh from the vert, edge, and face data\n    \"\"\"\n    mesh_data = bpy.data.meshes.new(\"cube_data\")\n    mesh_data.from_pydata(verts, edges, faces)\n    return mesh_data\n\n\ndef create_mesh_object_from_data(mesh_data):\n    \"\"\"\n    create an object using the mesh data\n    \"\"\"\n    return bpy.data.objects.new(\"cube_object\", mesh_data)\n\n\ndef add_mesh_object_into_scene(mesh_object):\n    \"\"\"\n    add object into active scene by linking the object into the\n    default scene collection\n    \"\"\"\n    bpy.context.collection.objects.link(mesh_object)\n\n\ndef create_mesh_object(verts, edges, faces):\n    \"\"\"\n    create a mesh object from the given verts, edges, and faces\n    add the new mesh object into the scene\n    \"\"\"\n    mesh_data = create_mesh_data(verts, edges, faces)\n    mesh_obj = create_mesh_object_from_data(mesh_data)\n    add_mesh_object_into_scene(mesh_obj)\n    return mesh_obj\n\n\ndef create_cube_with_square_faces():\n    \"\"\"\n    create a cube with square faces\n    \"\"\"\n    # define the coordinates of each vertex\n    verts = [\n        (-1.0, -1.0, -1.0),\n        (-1.0, 1.0, -1.0),\n        (1.0, 1.0, -1.0),\n        (1.0, -1.0, -1.0),\n        (-1.0, -1.0, 1.0),\n        (-1.0, 1.0, 1.0),\n        (1.0, 1.0, 1.0),\n        (1.0, -1.0, 1.0),\n    ]\n\n    # define faces using the indexes of the vertices\n    faces = [\n        (0, 1, 2, 3),\n        (7, 6, 5, 4),\n        (4, 5, 1, 0),\n        (7, 4, 0, 3),\n        (6, 7, 3, 2),\n        (5, 6, 2, 1),\n    ]\n\n    edges = []\n\n    mesh_object = create_mesh_object(verts, edges, faces)\n    return mesh_object\n\n\ndef main():\n    create_cube_with_square_faces()\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "Text Input": "Creating a cube with square faces using a class in Blender.",
        "Blender Script": "This script defines a class `SquareFaceCube` that encapsulates the creation of a cube mesh object with square faces. It demonstrates how to use a class to organize the functionality of creating a mesh, creating an object from the mesh data, adding the object into the scene, and finally adding the cube at a specific location.\n\n```python\nimport bpy\n\n\nclass SquareFaceCube:\n    \"\"\"\n    a class to represent a cube mesh object with square faces\n    \"\"\"\n\n    def __init__(self):\n        # define the coordinates of each vertex\n        self.verts = [\n            (-1.0, -1.0, -1.0),\n            (-1.0, 1.0, -1.0),\n            (1.0, 1.0, -1.0),\n            (1.0, -1.0, -1.0),\n            (-1.0, -1.0, 1.0),\n            (-1.0, 1.0, 1.0),\n            (1.0, 1.0, 1.0),\n            (1.0, -1.0, 1.0),\n        ]\n\n        # define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2, 3),\n            (7, 6, 5, 4),\n            (4, 5, 1, 0),\n            (7, 4, 0, 3),\n            (6, 7, 3, 2),\n            (5, 6, 2, 1),\n        ]\n\n        self.mesh_data = None\n        self.mesh_object = None\n\n    def create_mesh_data(self):\n        \"\"\"\n        create a mesh from the vert and face data\n        \"\"\"\n        self.mesh_data = bpy.data.meshes.new(\"cube_data\")\n        self.mesh_data.from_pydata(self.verts, [], self.faces)\n\n    def create_mesh_object_from_data(self):\n        \"\"\"\n        create an object using the mesh data\n        \"\"\"\n        self.mesh_object = bpy.data.objects.new(\"cube_object\", self.mesh_data)\n\n    def add_mesh_object_into_scene(self):\n        \"\"\"\n        add object into active scene by linking the object into the\n        default scene collection\n        \"\"\"\n        bpy.context.collection.objects.link(self.mesh_object)\n\n    def create_mesh_object(self):\n        \"\"\"\n        create a mesh object from the given verts and faces\n        add the new mesh object into the scene\n        \"\"\"\n        self.create_mesh_data()\n        self.create_mesh_object_from_data()\n        self.add_mesh_object_into_scene()\n\n    def add_into_scene(self, location):\n        if self.mesh_object == None:\n            self.create_mesh_object()\n            self.mesh_object.location = location\n        else:\n            print(\"Warning: can't add mesh object because it is already added into the scene\")\n\n\ndef main():\n    square_face_cube = SquareFaceCube()\n    square_face_cube.add_into_scene(location=(0, 0, 0))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "Text Input": "Creating cubes with square faces and triangle faces in Blender.",
        "Blender Script": "This script demonstrates how to create two different types of cubes: one with square faces and one with triangle faces. It shows step-by-step creation, where vertices and faces are defined, mesh data is created, and objects are added to the scene.\n\n```python\nimport bpy\n\n#######################################################################\n# create a cube with square faces\n#######################################################################\n\n# define the coordinates of each vertex\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (-1.0, -1.0, 1.0),\n    (-1.0, 1.0, 1.0),\n    (1.0, 1.0, 1.0),\n    (1.0, -1.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2, 3),\n    (7, 6, 5, 4),\n    (4, 5, 1, 0),\n    (7, 4, 0, 3),\n    (6, 7, 3, 2),\n    (5, 6, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n\n#######################################################################\n# create a cube with triangle faces\n#######################################################################\n\n# define the coordinates of each vertex\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (-1.0, -1.0, 1.0),\n    (-1.0, 1.0, 1.0),\n    (1.0, 1.0, 1.0),\n    (1.0, -1.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2),\n    (0, 2, 3),\n    (6, 5, 4),\n    (7, 6, 4),\n    (4, 5, 1),\n    (4, 1, 0),\n    (7, 4, 0),\n    (7, 0, 3),\n    (6, 7, 3),\n    (6, 3, 2),\n    (5, 6, 2),\n    (5, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n\nmesh_obj.location.y = 3\n\n### END\n```"
    },
    {
        "Text Input": "This script demonstrates how to create cubes with square faces, cubes with triangle faces, and a pyramid with triangle faces using functions. Each shape is created by defining the vertices, edges, and faces, then adding the generated objects to the scene.",
        "Blender Script": "The script includes functions to create mesh data, create mesh objects, add objects into the scene, and build cubes and pyramids with square and triangle faces.\n\n```python\nimport bpy\n\n\ndef create_mesh_data(name, verts, edges, faces):\n    \"\"\"\n    create a mesh from the vert, edge, and face data\n    \"\"\"\n    mesh_data = bpy.data.meshes.new(f\"{name}_data\")\n    mesh_data.from_pydata(verts, edges, faces)\n\n    return mesh_data\n\n\ndef create_mesh_object_from_data(name, mesh_data):\n    \"\"\"\n    create a object using the mesh data\n    \"\"\"\n    return bpy.data.objects.new(f\"{name}_object\", mesh_data)\n\n\ndef add_mesh_object_into_scene(mesh_object):\n    \"\"\"\n    add object into active scene by linking the object into the\n    default scene collection\n    \"\"\"\n    bpy.context.collection.objects.link(mesh_object)\n\n\ndef create_mesh_object(name, verts, edges, faces):\n    \"\"\"\n    create a mesh object from the given verts, edges, and faces\n    add the new mesh object into the scene\n    \"\"\"\n    mesh_data = create_mesh_data(name, verts, edges, faces)\n\n    mesh_obj = create_mesh_object_from_data(name, mesh_data)\n\n    add_mesh_object_into_scene(mesh_obj)\n\n    return mesh_obj\n\n\ndef create_cube_with_square_faces(verts):\n    \"\"\"\n    create a cube with square faces\n    \"\"\"\n    # define faces using the indexes of the vertices\n    faces = [\n        (0, 1, 2, 3),\n        (7, 6, 5, 4),\n        (4, 5, 1, 0),\n        (7, 4, 0, 3),\n        (6, 7, 3, 2),\n        (5, 6, 2, 1),\n    ]\n\n    edges = []\n\n    name = \"cube\"\n    mesh_object = create_mesh_object(name, verts, edges, faces)\n\n    return mesh_object\n\n\ndef create_cube_with_triangle_faces(verts):\n    \"\"\"\n    create a cube with triangle faces\n    \"\"\"\n    # define faces using the indexes of the vertices\n    faces = [\n        (0, 1, 2),\n        (0, 2, 3),\n        (6, 5, 4),\n        (7, 6, 4),\n        (4, 5, 1),\n        (4, 1, 0),\n        (7, 4, 0),\n        (7, 0, 3),\n        (6, 7, 3),\n        (6, 3, 2),\n        (5, 6, 2),\n        (5, 2, 1),\n    ]\n\n    edges = []\n\n    name = \"cube\"\n    mesh_object = create_mesh_object(name, verts, edges, faces)\n\n    return mesh_object\n\n\ndef create_pyramid_with_triangle_faces():\n    \"\"\"\n    create a pyramid with triangle faces\n    \"\"\"\n    verts = [\n        (-1.0, -1.0, -1.0),\n        (-1.0, 1.0, -1.0),\n        (1.0, 1.0, -1.0),\n        (1.0, -1.0, -1.0),\n        (0.0, 0.0, 1.0),\n    ]\n\n    faces = [\n        (0, 1, 2),\n        (2, 3, 0),\n        (2, 1, 4),\n        (3, 2, 4),\n        (0, 3, 4),\n        (1, 0, 4),\n    ]\n\n    edges = []\n\n    name = \"pyramid\"\n    mesh_object = create_mesh_object(name, verts, edges, faces)\n\n    return mesh_object\n\n\ndef main():\n    # define the coordinates of each vertex\n    cube_verts = [\n        (-1.0, -1.0, -1.0),\n        (-1.0, 1.0, -1.0),\n        (1.0, 1.0, -1.0),\n        (1.0, -1.0, -1.0),\n        (-1.0, -1.0, 1.0),\n        (-1.0, 1.0, 1.0),\n        (1.0, 1.0, 1.0),\n        (1.0, -1.0, 1.0),\n    ]\n\n    create_cube_with_square_faces(cube_verts)\n\n    cube_obj = create_cube_with_triangle_faces(cube_verts)\n    cube_obj.location.y = 3\n\n    pyramid_obj = create_pyramid_with_triangle_faces()\n    pyramid_obj.location.y = 6\n\n\nif __name__ == \"__main__\":\n    main()\n\n### END\n```"
    },
    {
        "Text Input": "This script defines classes for creating cube mesh objects with square faces and triangle faces in Blender. The `Cube` class contains methods for creating mesh data, creating mesh objects, and adding them into the scene. The `SquareFaceCube` and `TriangleFaceCube` classes extend the `Cube` class to define specific face configurations.",
        "Blender Script": "The script includes classes to represent cubes with square faces and triangle faces, each with methods for creating meshes and adding them into the Blender scene.\n\n```python\nimport bpy\n\n\nclass Cube:\n    \"\"\"\n    a class to represent a cube mesh object\n    \"\"\"\n\n    def __init__(self):\n        # define the coordinates of each vertex\n        self.verts = [\n            (-1.0, -1.0, -1.0),\n            (-1.0, 1.0, -1.0),\n            (1.0, 1.0, -1.0),\n            (1.0, -1.0, -1.0),\n            (-1.0, -1.0, 1.0),\n            (-1.0, 1.0, 1.0),\n            (1.0, 1.0, 1.0),\n            (1.0, -1.0, 1.0),\n        ]\n\n        self.faces = []\n\n        self.mesh_data = None\n        self.mesh_object = None\n\n    def create_mesh_data(self):\n        \"\"\"\n        create a mesh from the vert and face data\n        \"\"\"\n        self.mesh_data = bpy.data.meshes.new(\"cube_data\")\n        self.mesh_data.from_pydata(self.verts, [], self.faces)\n\n    def create_mesh_object_from_data(self):\n        \"\"\"\n        create a object using the mesh data\n        \"\"\"\n        self.mesh_object = bpy.data.objects.new(\"cube_object\", self.mesh_data)\n\n    def add_mesh_object_into_scene(self):\n        \"\"\"\n        add object into active scene by linking the object into the\n        default scene collection\n        \"\"\"\n        bpy.context.collection.objects.link(self.mesh_object)\n\n    def create_mesh_object(self):\n        \"\"\"\n        create a mesh object from the given verts and faces\n        add the new mesh object into the scene\n        \"\"\"\n        self.create_mesh_data()\n        self.create_mesh_object_from_data()\n        self.add_mesh_object_into_scene()\n\n    def add_into_scene(self, location):\n        if self.mesh_object == None:\n            self.create_mesh_object()\n            self.mesh_object.location = location\n        else:\n            print(\"Warning: can't add mesh object because it is already added into the scene\")\n\n\nclass SquareFaceCube(Cube):\n    \"\"\"\n    a class to represent a cube mesh object with square faces\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n        # define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2, 3),\n            (7, 6, 5, 4),\n            (4, 5, 1, 0),\n            (7, 4, 0, 3),\n            (6, 7, 3, 2),\n            (5, 6, 2, 1),\n        ]\n\n\nclass TriangleFaceCube(Cube):\n    \"\"\"\n    a class to represent a cube mesh object with triangle faces\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n        # define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2),\n            (0, 2, 3),\n            (6, 5, 4),\n            (7, 6, 4),\n            (4, 5, 1),\n            (4, 1, 0),\n            (7, 4, 0),\n            (7, 0, 3),\n            (6, 7, 3),\n            (6, 3, 2),\n            (5, 6, 2),\n            (5, 2, 1),\n        ]\n\n\ndef main():\n    square_face_cube = SquareFaceCube()\n    square_face_cube.add_into_scene(location=(0, 0, 0))\n\n    triangle_face_cube = TriangleFaceCube()\n    triangle_face_cube.add_into_scene(location=(0, 3, 0))\n\n\nif __name__ == \"__main__\":\n    main()\n\n### END\n```"
    },
    {
        "Text Input": "This script demonstrates how to create a cube with square faces, a cube with triangle faces, and a pyramid with triangle faces in Blender using Python. The script defines the vertices and faces for each object, creates the mesh data, creates the objects, and adds them into the scene.",
        "Blender Script": "The script creates and adds 3D objects with different face configurations (square faces, triangle faces) and positions them in the Blender scene.\n\n```python\nimport bpy\n\n#######################################################################\n# create a cube with square faces\n#######################################################################\n\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (-1.0, -1.0, 1.0),\n    (-1.0, 1.0, 1.0),\n    (1.0, 1.0, 1.0),\n    (1.0, -1.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2, 3),\n    (7, 6, 5, 4),\n    (4, 5, 1, 0),\n    (7, 4, 0, 3),\n    (6, 7, 3, 2),\n    (5, 6, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n\n#######################################################################\n# create a cube with triangle faces\n#######################################################################\n\n# define the coordinates of each vertex\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (-1.0, -1.0, 1.0),\n    (-1.0, 1.0, 1.0),\n    (1.0, 1.0, 1.0),\n    (1.0, -1.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2),\n    (0, 2, 3),\n    (6, 5, 4),\n    (7, 6, 4),\n    (4, 5, 1),\n    (4, 1, 0),\n    (7, 4, 0),\n    (7, 0, 3),\n    (6, 7, 3),\n    (6, 3, 2),\n    (5, 6, 2),\n    (5, 2, 1),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"cube_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"cube_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n\nmesh_obj.location.y = 3\n\n#######################################################################\n# create a pyramid with triangle faces\n#######################################################################\n\n# define the coordinates of each vertex\nverts = [\n    (-1.0, -1.0, -1.0),\n    (-1.0, 1.0, -1.0),\n    (1.0, 1.0, -1.0),\n    (1.0, -1.0, -1.0),\n    (0.0, 0.0, 1.0),\n]\n\n# define faces using the indexes of the vertices\nfaces = [\n    (0, 1, 2),\n    (2, 3, 0),\n    (2, 1, 4),\n    (3, 2, 4),\n    (0, 3, 4),\n    (1, 0, 4),\n]\n\nedges = []\n\n# create a mesh from the vert, edge, and face data\nmesh_data = bpy.data.meshes.new(\"pyramid_data\")\nmesh_data.from_pydata(verts, edges, faces)\n\n# create a object using the mesh data\nmesh_obj = bpy.data.objects.new(\"pyramid_object\", mesh_data)\n\nbpy.context.collection.objects.link(mesh_obj)\n\nmesh_obj.location.y = 6\n\n### END\n```"
    },
    {
        "Text Input": "This script demonstrates how to use object-oriented programming to create and add 3D shapes (pyramid and cubes with square or triangle faces) into the Blender scene. The script defines multiple classes for different shape objects (Shape, Cube, SquareFaceCube, TriangleFaceCube, and TriangleFacePyramid) and uses class methods to create, add, and position the shapes in the scene.",
        "Blender Script": "The script defines a class-based approach to create various 3D shapes (cubes and pyramids) and adds them to the Blender scene. It uses inheritance to represent different cube types (SquareFaceCube and TriangleFaceCube) and a pyramid class (TriangleFacePyramid) with different face configurations.\n\n```python\nimport bpy\n\n\nclass Shape:\n\"\"\"\na class to represent a mesh object\n\"\"\"\n\n# example of a class variable\ninstance_count = 0\n\ndef __init__(self, name):\n    self.name = name\n    self.verts = []\n    self.faces = []\n    self.mesh_data = None\n    self.mesh_object = None\n    Shape.instance_count += 1\n\ndef create_mesh_data(self):\n    \"\"\"\n    create a mesh from the vert and face data\n    \"\"\"\n    self.mesh_data = bpy.data.meshes.new(f\"{self.name}_data\")\n    self.mesh_data.from_pydata(self.verts, [], self.faces)\n\ndef create_mesh_object_from_data(self):\n    \"\"\"\n    create a object using the mesh data\n    \"\"\"\n    self.mesh_object = bpy.data.objects.new(f\"{self.name}_object\", self.mesh_data)\n\ndef add_mesh_object_into_scene(self):\n    \"\"\"\n    add object into active scene by linking the object into the\n    default scene collection\n    \"\"\"\n    bpy.context.collection.objects.link(self.mesh_object)\n\ndef create_mesh_object(self):\n    \"\"\"\n    create a mesh object from the given verts and faces\n    add the new mesh object into the scene\n    \"\"\"\n    self.create_mesh_data()\n    self.create_mesh_object_from_data()\n    self.add_mesh_object_into_scene()\n\ndef add_into_scene(self, location):\n    if self.mesh_object == None:\n        self.create_mesh_object()\n        self.mesh_object.location = location\n    else:\n        print(\"Warning: can't add mesh object because it is already added into the scene\")\n\n\nclass TriangleFacePyramid(Shape):\n\"\"\"\na class to represent a pyramid mesh object\n\"\"\"\n\ndef __init__(self):\n    super().__init__(name=\"pyramid\")\n\n    # define the coordinates of each vertex\n    self.verts = [\n        (-1.0, -1.0, -1.0),\n        (-1.0, 1.0, -1.0),\n        (1.0, 1.0, -1.0),\n        (1.0, -1.0, -1.0),\n        (0.0, 0.0, 1.0),\n    ]\n\n    # define faces using the indexes of the vertices\n    self.faces = [\n        (0, 1, 2),\n        (2, 3, 0),\n        (2, 1, 4),\n        (3, 2, 4),\n        (0, 3, 4),\n        (1, 0, 4),\n    ]\n\n\nclass Cube(Shape):\n\"\"\"\na class to represent a cube mesh object\n\"\"\"\n\ndef __init__(self):\n    super().__init__(name=\"cube\")\n\n    # define the coordinates of each vertex\n    self.verts = [\n        (-1.0, -1.0, -1.0),\n        (-1.0, 1.0, -1.0),\n        (1.0, 1.0, -1.0),\n        (1.0, -1.0, -1.0),\n        (-1.0, -1.0, 1.0),\n        (-1.0, 1.0, 1.0),\n        (1.0, 1.0, 1.0),\n        (1.0, -1.0, 1.0),\n    ]\n\n\nclass SquareFaceCube(Cube):\n\"\"\"\na class to represent a cube mesh object with square faces\n\"\"\"\n\ndef __init__(self):\n    super().__init__()\n\n    # define faces using the indexes of the vertices\n    self.faces = [\n        (0, 1, 2, 3),\n        (7, 6, 5, 4),\n        (4, 5, 1, 0),\n        (7, 4, 0, 3),\n        (6, 7, 3, 2),\n        (5, 6, 2, 1),\n    ]\n\n\nclass TriangleFaceCube(Cube):\n\"\"\"\na class to represent a cube mesh object with triangle faces\n\"\"\"\n\ndef __init__(self):\n    super().__init__()\n\n    # define faces using the indexes of the vertices\n    self.faces = [\n        (0, 1, 2),\n        (0, 2, 3),\n        (6, 5, 4),\n        (7, 6, 4),\n        (4, 5, 1),\n        (4, 1, 0),\n        (7, 4, 0),\n        (7, 0, 3),\n        (6, 7, 3),\n        (6, 3, 2),\n        (5, 6, 2),\n        (5, 2, 1),\n    ]\n\n\ndef main():\n    square_face_cube = SquareFaceCube()\n    square_face_cube.add_into_scene(location=(0, 0, 0))\n\n    triangle_face_cube = TriangleFaceCube()\n    triangle_face_cube.add_into_scene(location=(0, 3, 0))\n\n    triangle_face_pyramid = TriangleFacePyramid()\n    triangle_face_pyramid.add_into_scene(location=(0, 6, 0))\n\n    print(f\"Shape instance count {Shape.instance_count}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "Text Input": "This script demonstrates how to use object-oriented programming to create and add 3D shapes (pyramid and cubes with square or triangle faces) into the Blender scene. The script defines multiple classes for different shape objects (Shape, Cube, SquareFaceCube, TriangleFaceCube, and TriangleFacePyramid) and uses class methods to create, add, and position the shapes in the scene.",
        "Blender Script": "The script defines a class-based approach to create various 3D shapes (cubes and pyramids) and adds them to the Blender scene. It uses inheritance to represent different cube types (SquareFaceCube and TriangleFaceCube) and a pyramid class (TriangleFacePyramid) with different face configurations.\n\n```python\nimport bpy\n\n\nclass Shape:\n    \"\"\"\n    A class to represent a mesh object\n    \"\"\"\n\n    # Example of a class variable\n    instance_count = 0\n\n    def __init__(self, name):\n        self.name = name\n        self.verts = []\n        self.faces = []\n        self.mesh_data = None\n        self.mesh_object = None\n        Shape.instance_count += 1\n\n    def create_mesh_data(self):\n        \"\"\"\n        Create a mesh from the vert and face data\n        \"\"\"\n        self.mesh_data = bpy.data.meshes.new(f\"{self.name}_data\")\n        self.mesh_data.from_pydata(self.verts, [], self.faces)\n\n    def create_mesh_object_from_data(self):\n        \"\"\"\n        Create an object using the mesh data\n        \"\"\"\n        self.mesh_object = bpy.data.objects.new(f\"{self.name}_object\", self.mesh_data)\n\n    def add_mesh_object_into_scene(self):\n        \"\"\"\n        Add object into active scene by linking the object into the\n        default scene collection\n        \"\"\"\n        bpy.context.collection.objects.link(self.mesh_object)\n\n    def create_mesh_object(self):\n        \"\"\"\n        Create a mesh object from the given verts and faces\n        Add the new mesh object into the scene\n        \"\"\"\n        self.create_mesh_data()\n        self.create_mesh_object_from_data()\n        self.add_mesh_object_into_scene()\n\n    def add_into_scene(self, location):\n        if self.mesh_object is None:\n            self.create_mesh_object()\n            self.mesh_object.location = location\n        else:\n            print(\"Warning: can't add mesh object because it is already added into the scene\")\n\n\nclass TriangleFacePyramid(Shape):\n    \"\"\"\n    A class to represent a pyramid mesh object\n    \"\"\"\n\n    def __init__(self):\n        super().__init__(name=\"pyramid\")\n\n        # Define the coordinates of each vertex\n        self.verts = [\n            (-1.0, -1.0, -1.0),\n            (-1.0, 1.0, -1.0),\n            (1.0, 1.0, -1.0),\n            (1.0, -1.0, -1.0),\n            (0.0, 0.0, 1.0),\n        ]\n\n        # Define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2),\n            (2, 3, 0),\n            (2, 1, 4),\n            (3, 2, 4),\n            (0, 3, 4),\n            (1, 0, 4),\n        ]\n\n\nclass Cube(Shape):\n    \"\"\"\n    A class to represent a cube mesh object\n    \"\"\"\n\n    def __init__(self):\n        super().__init__(name=\"cube\")\n\n        # Define the coordinates of each vertex\n        self.verts = [\n            (-1.0, -1.0, -1.0),\n            (-1.0, 1.0, -1.0),\n            (1.0, 1.0, -1.0),\n            (1.0, -1.0, -1.0),\n            (-1.0, -1.0, 1.0),\n            (-1.0, 1.0, 1.0),\n            (1.0, 1.0, 1.0),\n            (1.0, -1.0, 1.0),\n        ]\n\n\nclass SquareFaceCube(Cube):\n    \"\"\"\n    A class to represent a cube mesh object with square faces\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n        # Define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2, 3),\n            (7, 6, 5, 4),\n            (4, 5, 1, 0),\n            (7, 4, 0, 3),\n            (6, 7, 3, 2),\n            (5, 6, 2, 1),\n        ]\n\n\nclass TriangleFaceCube(Cube):\n    \"\"\"\n    A class to represent a cube mesh object with triangle faces\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n        # Define faces using the indexes of the vertices\n        self.faces = [\n            (0, 1, 2),\n            (0, 2, 3),\n            (6, 5, 4),\n            (7, 6, 4),\n            (4, 5, 1),\n            (4, 1, 0),\n            (7, 4, 0),\n            (7, 0, 3),\n            (6, 7, 3),\n            (6, 3, 2),\n            (5, 6, 2),\n            (5, 2, 1),\n        ]\n\n\ndef main():\n    square_face_cube = SquareFaceCube()\n    square_face_cube.add_into_scene(location=(0, 0, 0))\n\n    triangle_face_cube = TriangleFaceCube()\n    triangle_face_cube.add_into_scene(location=(0, 3, 0))\n\n    triangle_face_pyramid = TriangleFacePyramid()\n    triangle_face_pyramid.add_into_scene(location=(0, 6, 0))\n\n    print(f\"Shape instance count {Shape.instance_count}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "Text Input": "This script demonstrates how to create an icosphere using the bmesh module in Blender. The script creates a mesh object, adds it to the scene, and uses bmesh to generate an icosphere with specific subdivisions and radius.",
        "Blender Script": "The script demonstrates how to use the bmesh module to create an icosphere, a type of mesh object, and adds it to the Blender scene. It handles mesh creation, updates, and cleanup for efficient memory management.\n\n```python\nimport bpy\nimport bmesh\n\n# Name of the object to be created\nobj_name = \"my_shape\"\n\n# Create the mesh data\nmesh_data = bpy.data.meshes.new(f\"{obj_name}_data\")\n\n# Create the mesh object using the mesh data\nmesh_obj = bpy.data.objects.new(obj_name, mesh_data)\n\n# Add the mesh object into the scene\nbpy.context.scene.collection.objects.link(mesh_obj)\n\n# Create a new bmesh object\nbm = bmesh.new()\n\n# Create an icosphere with a specified subdivision and radius\nbmesh.ops.create_icosphere(bm, subdivisions=1, radius=2.0)\n\n# Writes the bmesh data into the mesh data\nbm.to_mesh(mesh_data)\n\n# [Optional] Update the mesh data (helps with redrawing the mesh in the viewport)\nmesh_data.update()\n\n# Clean up/free memory allocated for the bmesh\nbm.free()\n```"
    },
    {
        "Text Input": "This script demonstrates how to add a rotating sphere animation in Blender. The script deletes all objects in the scene, creates a sphere, and adds keyframe animation for a 360-degree rotation on the Z-axis over 100 frames.",
        "Blender Script": "The script sets up a sphere in the scene and animates its rotation around the Z-axis. It sets keyframes for the rotation and configures the animation's timeline and FPS settings.\n\n```python\nimport bpy\n\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\n\n# Add a keyframe animation for rotation\nsphere.rotation_mode = 'XYZ'\n\n# Set keyframes for rotation\nsphere.rotation_euler = (0, 0, 0)\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n\nsphere.rotation_euler = (0, 0, 3.14)  # 180-degree rotation on Z-axis\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=50)\n\nsphere.rotation_euler = (0, 0, 6.28)  # 360-degree rotation on Z-axis\nsphere.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Set animation to play in the timeline\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 100\nbpy.context.scene.render.fps = 24\n\nprint(\"Sphere rotation animation added!\")\n```"
    },
    {
        "Text Input": "This script demonstrates how to create cubes with rainbow colors in Blender. It deletes all objects in the scene and then generates a set of cubes, each with a different color from the rainbow (Red, Orange, Yellow, Green, Blue, Indigo).",
        "Blender Script": "The script creates a series of cubes and assigns each one a unique color from the rainbow. It also disables the use of nodes for simple material creation and assigns the materials to the cubes.\n\n```python\nimport bpy\nimport random\n\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define rainbow colors (RGB values)\nrainbow_colors = [\n(1, 0, 0, 1),   # Red\n(1, 0.5, 0, 1), # Orange\n(1, 1, 0, 1),   # Yellow\n(0, 1, 0, 1),   # Green\n(0, 0, 1, 1),   # Blue\n(0.29, 0, 0.51, 1) # Indigo\n]\n\n# Number of cubes\nnum_cubes = len(rainbow_colors)\n\n# Create cubes with rainbow colors\nfor i in range(num_cubes):\n    # Add a cube\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(i * 2, 0, 0))\n    cube = bpy.context.object\n\n    # Create a new material\n    mat = bpy.data.materials.new(name=f\"Material_{i}\")\n    mat.diffuse_color = rainbow_colors[i]  # Assign rainbow color\n    mat.use_nodes = False  # Disable nodes for simple material\n\n    # Assign material to cube\n    if cube.data.materials:\n        cube.data.materials[0] = mat\n    else:\n        cube.data.materials.append(mat)\n\nprint(\"Rainbow-colored cubes generated!\")\n```"
    },
    {
        "Text Input": "This script creates an animation of cubes orbiting around a central empty object, resembling a solar system. Each cube is assigned a rainbow color and the cubes rotate around the center. The center object is animated to complete one full rotation during the animation's timeline.",
        "Blender Script": "The script generates cubes in a circular orbit around an empty object, assigning each cube a color from the rainbow. It also adds keyframes for rotation and sets a linear interpolation for constant rotation speed.\n\n```python\nimport bpy\nimport math\n\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define rainbow colors (RGB values)\nrainbow_colors = [\n(1, 0, 0, 1),   # Red\n(1, 0.5, 0, 1), # Orange\n(1, 1, 0, 1),   # Yellow\n(0, 1, 0, 1),   # Green\n(0, 0, 1, 1),   # Blue\n(0.29, 0, 0.51, 1) # Indigo\n]\n\n# Number of cubes\nnum_cubes = len(rainbow_colors)\n\n# Create an empty object (center of rotation)\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Solar_Center\"\n\n# Create cubes orbiting around the center\nfor i in range(num_cubes):\n    angle = (i / num_cubes) * 2 * math.pi  # Evenly distribute cubes in a circular orbit\n\n    # Calculate position in a circular orbit\n    x = 5 * math.cos(angle)\n    y = 5 * math.sin(angle)\n\n    # Add a cube\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0))\n    cube = bpy.context.object\n\n    # Create a new material and assign color\n    mat = bpy.data.materials.new(name=f\"Material_{i}\")\n    mat.diffuse_color = rainbow_colors[i]\n    mat.use_nodes = False\n\n    if cube.data.materials:\n        cube.data.materials[0] = mat\n    else:\n        cube.data.materials.append(mat)\n\n    # Parent cube to the center (for rotation effect)\ncube.parent = center\n\n# Add rotation animation to the center\nframe_start = 1\nframe_end = 250  # Animation length\n\ncenter.rotation_mode = 'XYZ'\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncenter.rotation_euler.z = math.radians(360)  # One full rotation\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set linear interpolation (constant rotation speed)\nfor fcurve in center.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Rotating rainbow cubes generated like a solar system!\")\n```"
    },
    {
        "Text Input": "This script creates an animation of cones orbiting around a central empty object, resembling a solar system. Each cone is assigned a rainbow color and the cones rotate around the center. The center object is animated to complete one full rotation during the animation's timeline.",
        "Blender Script": "The script generates cones in a circular orbit around an empty object, assigning each cone a color from the rainbow. It also adds keyframes for rotation and sets a linear interpolation for constant rotation speed.\n\n```python\nimport bpy\nimport math\n\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define rainbow colors (RGB values)\nrainbow_colors = [\n(1, 0, 0, 1),   # Red\n(1, 0.5, 0, 1), # Orange\n(1, 1, 0, 1),   # Yellow\n(0, 1, 0, 1),   # Green\n(0, 0, 1, 1),   # Blue\n(0.29, 0, 0.51, 1) # Indigo\n]\n\n# Number of cones\nnum_cones = len(rainbow_colors)\n\n# Create an empty object (center of rotation)\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Solar_Center\"\n\n# Create cones orbiting around the center\nfor i in range(num_cones):\n    angle = (i / num_cones) * 2 * math.pi  # Evenly distribute cones in a circular orbit\n\n    # Calculate position in a circular orbit\n    x = 5 * math.cos(angle)\n    y = 5 * math.sin(angle)\n\n    # Add a cone\n    bpy.ops.mesh.primitive_cone_add(radius1=0.8, depth=2, location=(x, y, 0))\n    cone = bpy.context.object\n\n    # Create a new material and assign color\n    mat = bpy.data.materials.new(name=f\"Material_{i}\")\n    mat.diffuse_color = rainbow_colors[i]\n    mat.use_nodes = False\n\n    if cone.data.materials:\n        cone.data.materials[0] = mat\n    else:\n        cone.data.materials.append(mat)\n\n    # Parent cone to the center (for rotation effect)\n    cone.parent = center\n\n# Add rotation animation to the center\nframe_start = 1\nframe_end = 250  # Animation length\n\ncenter.rotation_mode = 'XYZ'\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncenter.rotation_euler.z = math.radians(360)  # One full rotation\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set linear interpolation (constant rotation speed)\nfor fcurve in center.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Rotating rainbow cones generated like a solar system!\")\n```"
    },
    {
        "Text Input": "This script creates an animation where spheres orbit around a central empty object, resembling a solar system. Each sphere is assigned a rainbow color, and the spheres rotate around the center. The center object is animated to complete one full rotation during the animation's timeline.",
        "Blender Script": "The script generates spheres in a circular orbit around an empty object, assigning each sphere a color from the rainbow. It also adds keyframes for rotation and sets a linear interpolation for constant rotation speed.\n\n```python\nimport bpy\nimport math\n\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define rainbow colors (RGBA values)\nrainbow_colors = [\n(1, 0, 0, 1),   # Red\n(1, 0.5, 0, 1), # Orange\n(1, 1, 0, 1),   # Yellow\n(0, 1, 0, 1),   # Green\n(0, 0, 1, 1),   # Blue\n(0.29, 0, 0.51, 1) # Indigo\n]\n\n# Number of spheres\nnum_spheres = len(rainbow_colors)\n\n# Create an empty object (center of rotation)\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Solar_Center\"\n\n# Create spheres orbiting around the center\nfor i in range(num_spheres):\n    angle = (i / num_spheres) * 2 * math.pi  # Evenly distribute spheres in a circular orbit\n\n    # Calculate position in a circular orbit\n    x = 5 * math.cos(angle)\n    y = 5 * math.sin(angle)\n\n    # Add a sphere\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(x, y, 0))\n    sphere = bpy.context.object\n\n    # Create a new material and assign color\n    mat = bpy.data.materials.new(name=f\"Material_{i}\")\n    mat.diffuse_color = rainbow_colors[i]\n    mat.use_nodes = False\n\n    if sphere.data.materials:\n        sphere.data.materials[0] = mat\n    else:\n        sphere.data.materials.append(mat)\n\n    # Parent sphere to the center (for rotation effect)\n    sphere.parent = center\n\n# Add rotation animation to the center\nframe_start = 1\nframe_end = 250  # Animation length\n\ncenter.rotation_mode = 'XYZ'\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_start)\n\ncenter.rotation_euler.z = math.radians(360)  # One full rotation\ncenter.keyframe_insert(data_path=\"rotation_euler\", frame=frame_end)\n\n# Set linear interpolation (constant rotation speed)\nfor fcurve in center.animation_data.action.fcurves:\n    for kp in fcurve.keyframe_points:\n        kp.interpolation = 'LINEAR'\n\nprint(\"Rotating rainbow spheres generated like a solar system!\")\n```"
    },
    {
        "Text Input": "This script creates a simple animated house. It has a base, roof, door, and windows. The house is animated to move up and down. The script also defines materials for the house, roof, door, and windows, each with a specific color.",
        "Blender Script": "The script creates a house with a base, roof, door, and two windows, assigns materials, and animates the house to move up and down during the animation's timeline.\n\n```python\nimport bpy\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Function to create and assign material\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = (*color, 1)  # RGBA\n    return mat\n\n# Create the house base (cube)\nbpy.ops.mesh.primitive_cube_add(size=4, location=(0, 0, 2))\nhouse = bpy.context.object\nhouse.name = \"House_Base\"\nhouse_mat = create_material(\"House_Walls\", (0.8, 0.5, 0.3))  # Brown walls\nhouse.data.materials.append(house_mat)\n\n# Create the roof (pyramid)\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=3, depth=2, location=(0, 0, 4))\nroof = bpy.context.object\nroof.rotation_euler.z = 0.7854  # Rotate 45 degrees\nroof.name = \"House_Roof\"\nroof_mat = create_material(\"Roof_Color\", (0.9, 0.2, 0.1))  # Red roof\nroof.data.materials.append(roof_mat)\n\n# Create the door (small cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -2.01, 0.5))\ndoor = bpy.context.object\ndoor.scale[1] = 0.1  # Thin door\ndoor.scale[2] = 1  # Tall door\ndoor.name = \"House_Door\"\ndoor_mat = create_material(\"Door_Color\", (0.4, 0.2, 0.1))  # Dark brown door\ndoor.data.materials.append(door_mat)\n\n# Create two windows (small cubes)\nfor x in [-1.2, 1.2]:  # Left and right windows\n    bpy.ops.mesh.primitive_cube_add(size=0.8, location=(x, -2.01, 2))\n    window = bpy.context.object\n    window.scale[1] = 0.1  # Thin window\n    window.scale[2] = 0.8  # Tall window\n    window.name = f\"House_Window_{x}\"\n    window_mat = create_material(\"Window_Color\", (0.2, 0.5, 0.9))  # Blue windows\n    window.data.materials.append(window_mat)\n\n# Parent all objects to the house base for movement\nfor obj in [roof, door] + [bpy.data.objects[f\"House_Window_{x}\"] for x in [-1.2, 1.2]]:\n    obj.parent = house\n\n# Animate the house to move up and down\nhouse.location.z = 0  # Start position\nhouse.keyframe_insert(data_path=\"location\", frame=1)\n\nhouse.location.z = 2  # Move up\nhouse.keyframe_insert(data_path=\"location\", frame=30)\n\nhouse.location.z = 0  # Move down\nhouse.keyframe_insert(data_path=\"location\", frame=60)\n\n# Set animation loop\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\nprint(\"House created with colors & animation! \")\n```"
    },
    {
        "Text Input": "This script creates a basic human body using primitive shapes in Blender, including a head, torso, arms, and legs. Materials are assigned to each body part, and the body parts are positioned accordingly. The script simulates a basic human figure in a 3D environment.",
        "Blender Script": "The script creates a simple human body model in Blender by adding spheres for the head, cylinders for the torso, arms, and legs, and assigning materials with skin, shirt, and pants colors.\n\n```python\nimport bpy\n\n# Delete all existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Function to create and assign material\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = (*color, 1)  # RGBA\n    return mat\n\n# Create head (sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.8, location=(0, 0, 2.8))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead_mat = create_material(\"Skin\", (0.9, 0.7, 0.5))  # Skin color\nhead.data.materials.append(head_mat)\n\n# Create torso (cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 1.8))\ntorso = bpy.context.object\ntorso.name = \"Torso\"\ntorso_mat = create_material(\"Shirt\", (0.1, 0.5, 0.8))  # Blue shirt\ntorso.data.materials.append(torso_mat)\n\n# Create left and right arms (cylinders)\nfor x in [-1, 1]:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=1.2, location=(x, 0, 2))\n    arm = bpy.context.object\n    arm.name = f\"Arm_{x}\"\n    arm.rotation_euler.y = 1.57  # Rotate to be horizontal\n    arm_mat = create_material(\"Skin\", (0.9, 0.7, 0.5))\n    arm.data.materials.append(arm_mat)\n\n# Create left and right legs (cylinders)\nfor x in [-0.4, 0.4]:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.6, location=(x, 0, 0.8))\n    leg = bpy.context.object\n    leg.name = f\"Leg_{x}\"\n    leg_mat = create_material(\"Pants\", (0.2, 0.2, 0.7))  # Blue pants\n    leg.data.materials.append(leg_mat)\n\nprint(\"Basic human body created in Blender!\")\n```"
    },
    {
        "Text Input": "This script defines a class `TeaCup` that creates a 3D model of a tea cup in Blender. It includes methods to create the cup's body (using a cylinder), hollow it out (using a boolean modifier), and add a handle (using a torus). A material with a specified color is applied to both the cup and handle.",
        "Blender Script": "The script creates a tea cup model with a smooth surface, a hollow interior, and a handle. It defines a `TeaCup` class and uses primitive shapes to model the cup and handle, with material coloring applied.\n\n```python\nimport bpy\n\nclass TeaCup:\n    def __init__(self, location=(0, 0, 0)):\n        self.location = location\n        self.create_cup()\n        self.create_handle()\n\n    def create_cup(self):\n        # Create a cylinder for the cup body\n        bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=self.location)\n        self.cup = bpy.context.object\n        self.cup.scale = (1, 1, 0.8)  # Adjust height\n        bpy.ops.object.shade_smooth()\n\n        # Create a hole inside (boolean modifier)\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.6, location=self.location)\n        inner_cup = bpy.context.object\n        bool_mod = self.cup.modifiers.new(name=\"Boolean\", type='BOOLEAN')\n        bool_mod.operation = 'DIFFERENCE'\n        bool_mod.object = inner_cup\n        bpy.context.view_layer.objects.active = self.cup\n        bpy.ops.object.modifier_apply(modifier=bool_mod.name)\n        bpy.data.objects.remove(inner_cup)  # Delete inner mesh\n\n    def create_handle(self):\n        # Create a torus for the handle\n        handle_location = (1, 0, 0.5)  # Offset for handle\n        bpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.1, location=(self.location[0] + handle_location[0], self.location[1], self.location[2] + handle_location[2]))\n        self.handle = bpy.context.object\n        self.handle.rotation_euler = (1.57, 0, 0)  # Rotate to align\n\n    def add_material(self, color=(0.8, 0.8, 0.8, 1)):\n        mat = bpy.data.materials.new(name=\"CupMaterial\")\n        mat.diffuse_color = color\n        self.cup.data.materials.append(mat)\n        self.handle.data.materials.append(mat)\n\n# Create a tea cup at the center\ntea_cup = TeaCup(location=(0, 0, 0))\ntea_cup.add_material(color=(1, 0.8, 0.6, 1))  # Light brown color\n\nprint(\"Tea cup created successfully!\")\n```"
    },
    {
        "Text Input": "This script creates a 3D model of a solar system in Blender with animated planets orbiting a stationary Sun. It defines a Planet class to handle individual planet creation, orbit animation, and material assignment. The planets orbit around the Sun with custom parameters such as radius, distance from the Sun, speed, and color.",
        "Blender Script": "The script generates a solar system model with eight planets and their orbits around the Sun. It uses primitive spheres for planets, bezier curves for orbits, and keyframe animation for the planet's orbital motion.\n\n```python\nimport bpy\nimport random\nimport math\n\n# Clear previous objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\nclass Planet:\n    def __init__(self, name, radius, distance, speed, color):\n        self.name = name\n        self.radius = radius\n        self.distance = distance\n        self.speed = speed\n        self.color = color\n        self.create_planet()\n        self.create_orbit()\n\n    def create_planet(self):\n        # Create sphere for planet\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=self.radius, location=(self.distance, 0, 0))\n        self.planet = bpy.context.object\n        self.planet.name = self.name\n\n        # Add material\n        mat = bpy.data.materials.new(name=self.name + \"_Material\")\n        mat.diffuse_color = (*self.color, 1)\n        self.planet.data.materials.append(mat)\n\n        # Add animation for orbiting\n        self.add_orbit_animation()\n\n    def create_orbit(self):\n        # Create orbit path (circle)\n        bpy.ops.curve.primitive_bezier_circle_add(radius=self.distance)\n        self.orbit = bpy.context.object\n        self.orbit.name = self.name + \"_Orbit\"\n\n    def add_orbit_animation(self):\n        # Create empty object as pivot for animation\n        bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\n        self.orbit_center = bpy.context.object\n        self.planet.parent = self.orbit_center\n\n        # Set animation keyframes\n        self.orbit_center.animation_data_clear()\n        self.orbit_center.rotation_euler[2] = 0\n        self.orbit_center.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=2)\n\n        self.orbit_center.rotation_euler[2] = math.radians(360)\n        self.orbit_center.keyframe_insert(data_path=\"rotation_euler\", frame=self.speed, index=2)\n\n        # Set animation interpolation to linear\n        for fcurve in self.orbit_center.animation_data.action.fcurves:\n            for kp in fcurve.keyframe_points:\n                kp.interpolation = 'LINEAR'\n\n# Create Sun\nbpy.ops.mesh.primitive_uv_sphere_add(radius=3, location=(0, 0, 0))\nsun = bpy.context.object\nsun.name = \"Sun\"\nmat_sun = bpy.data.materials.new(name=\"Sun_Material\")\nmat_sun.diffuse_color = (1, 1, 0, 1)  # Yellow\nsun.data.materials.append(mat_sun)\n\n# Define planets (Name, Size, Distance, Orbit Speed, Color)\nplanets_data = [\n    (\"Mercury\", 0.3, 5, 100, (0.6, 0.5, 0.5)),\n    (\"Venus\", 0.6, 7, 200, (0.9, 0.6, 0.2)),\n    (\"Earth\", 0.65, 10, 300, (0.2, 0.5, 1)),\n    (\"Mars\", 0.5, 13, 400, (0.8, 0.2, 0.1)),\n    (\"Jupiter\", 1.2, 18, 600, (0.9, 0.6, 0.3)),\n    (\"Saturn\", 1.1, 23, 800, (0.9, 0.8, 0.5)),\n    (\"Uranus\", 0.9, 27, 1000, (0.4, 0.7, 0.9)),\n    (\"Neptune\", 0.8, 30, 1200, (0.3, 0.5, 1))\n]\n\n# Create planets\nfor data in planets_data:\n    Planet(*data)\n\nprint(\"Solar System Created!\")\n```"
    },
    {
        "Text Input": "This script adds a point light source in Blender with adjustable brightness.",
        "Blender Script": "This script adds a point light source at a specified location in Blender and adjusts its brightness using the energy parameter.\n\n```python\nimport bpy\n\n# Add a point light\nbpy.ops.object.light_add(type='POINT', location=(2, 2, 5))\nlight = bpy.context.object\nlight.data.energy = 1000  # Adjust brightness\n```"
    },
    {
        "Text Input": "This script deletes all objects in the current Blender scene.",
        "Blender Script": "This script selects all objects in the scene and deletes them, clearing the scene.\n\n```python\nimport bpy\n# Delete all objects in the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n```"
    },
    {
        "Text Input": "This script adds a camera to the scene, positions it at a specific location, and points it towards the center.",
        "Blender Script": "This script creates a camera at the specified location and rotates it to point toward the scene center, setting it as the active camera.\n\n```python\nimport bpy\n# Add a camera\nbpy.ops.object.camera_add(location=(0, -5, 3))\ncamera = bpy.context.object\ncamera.name = \"MainCamera\"\n# Point the camera towards the center\ncamera.rotation_euler = (1.1, 0, 0)  # Tilt downward\nbpy.context.scene.camera = camera  # Set as active camera\n```"
    },
    {
        "Text Input": "This script adds a text object, changes its content, and rotates it.",
        "Blender Script": "This script creates a text object, assigns a custom message, and rotates it 90\u00b0 to face forward.\n\n```python\nimport bpy\n# Add a text object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.name = \"MyText\"\n# Change text content\ntext_obj.data.body = \"Hello, Blender!\"\n# Rotate the text\ntext_obj.rotation_euler = (1.57, 0, 0)  # Rotate 90\u00b0 to face forward\n```"
    },
    {
        "Text Input": "This script adds a spotlight, adjusts its brightness, cone size, and points it towards the origin.",
        "Blender Script": "This script creates a spotlight, adjusts its energy and cone size, and rotates it to point towards the center.\n\n```python\nimport bpy\n# Add a spotlight\nbpy.ops.object.light_add(type='SPOT', location=(2, -2, 3))\nspotlight = bpy.context.object\nspotlight.data.energy = 500  # Set brightness\nspotlight.data.spot_size = math.radians(30)  # Set cone size\n# Point the spotlight towards the origin\nspotlight.rotation_euler = (math.radians(45), 0, math.radians(-45))\n```"
    },
    {
        "Text Input": "This script creates a sphere, enables rigid body physics, and sets properties like mass and restitution for bouncing.",
        "Blender Script": "This script adds a sphere with rigid body physics and sets its mass and bounciness.\n\n```python\nimport bpy\n# Add a sphere\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 5))\nsphere = bpy.context.object\nsphere.name = \"BouncingBall\"\n# Enable rigid body physics\nbpy.ops.rigidbody.object_add()\nsphere.rigid_body.type = 'ACTIVE'\n# Set physics properties\nsphere.rigid_body.mass = 1\nsphere.rigid_body.restitution = 0.8  # Bounciness\n```"
    },
    {
        "Text Input": "This script duplicates an object five times and arranges them in a line.",
        "Blender Script": "This script duplicates a selected object five times and offsets each copy by 2 units along the X-axis.\n\n```python\nimport bpy\n# Select an object\nobj = bpy.context.object\n# Duplicate it 5 times\nfor i in range(5):\n    copy = obj.copy()\n    copy.location.x += (i + 1) * 2\n    bpy.context.collection.objects.link(copy)\n```"
    },
    {
        "Text Input": "This script creates a 5x5 grid of cubes.",
        "Blender Script": "This script generates a grid of cubes, each spaced by 2 units in both X and Y directions.\n\n```python\nimport bpy\n# Create a grid of cubes (5x5)\nfor x in range(5):\n    for y in range(5):\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x * 2, y * 2, 0))\n```"
    },
    {
        "Text Input": "This script creates text and animates it moving from left to right.",
        "Blender Script": "This script creates a text object and animates its position from left to right using keyframes.\n\n```python\nimport bpy\n# Add a text object\nbpy.ops.object.text_add(location=(-5, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Blender Animation\"\n# Insert keyframes for movement\nframes = [(1, -5), (50, 5)]  # Frame 1: Left, Frame 50: Right\nfor frame, x in frames:\n    text_obj.location.x = x\n    text_obj.keyframe_insert(\"location\", frame=frame)\n```"
    },
    {
        "Text Input": "This script animates text scaling, creating an appearing effect.",
        "Blender Script": "This script creates a text object and animates its scaling from 0 to 1 to create an appearance effect.\n\n```python\nimport bpy\n# Add a text object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Scaling Text\"\n# Set initial scale\ntext_obj.scale = (0, 0, 0)\ntext_obj.keyframe_insert(\"scale\", frame=1)\n# Set final scale\ntext_obj.scale = (1, 1, 1)\ntext_obj.keyframe_insert(\"scale\", frame=30)\n```"
    },
    {
        "Text Input": "This script rotates text over time by inserting keyframes for rotation.",
        "Blender Script": "This script creates a rotating text effect by setting keyframes for rotation over time.\n\n```python\nimport bpy\nimport math\n# Add a text object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Rotating Text\"\n# Insert keyframes for rotation\nframes = [(1, 0), (50, 360)]  # Frame 1: 0 degrees, Frame 50: 360 degrees\nfor frame, angle in frames:\n    text_obj.rotation_euler.z = math.radians(angle)\n    text_obj.keyframe_insert(\"rotation_euler\", frame=frame)\n```"
    },
    {
        "Text Input": "This script animates text with a wave effect using shape keys.",
        "Blender Script": "This script creates a wavy text animation effect using shape keys and keyframes.\n\n```python\nimport bpy\n# Add a text object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Wavy Text\"\n\n# Convert text to a mesh\nbpy.ops.object.convert(target='MESH')\n\n# Add a shape key\ntext_obj.shape_key_add(name=\"Base\")\nwave_key = text_obj.shape_key_add(name=\"WaveEffect\")\n\n# Modify shape key vertices (simulate wave)\nfor i, v in enumerate(text_obj.data.shape_keys.key_blocks[\"WaveEffect\"].data):\n    v.co.z += 0.2 * (i % 2)  # Create a wave effect\n\n# Insert keyframes for wave animation\nwave_key.value = 0\nwave_key.keyframe_insert(\"value\", frame=1)\n\nwave_key.value = 1\nwave_key.keyframe_insert(\"value\", frame=50)\n\nwave_key.value = 0\nwave_key.keyframe_insert(\"value\", frame=100)\n```"
    },
    {
        "Text Input": "This script animates text moving upwards.",
        "Blender Script": "This script moves a text object upwards using keyframe animation.\n\n```python\nimport bpy\n# Create text object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Blender 4.3\"\n# Set initial position\ntext_obj.location[2] = 0\ntext_obj.keyframe_insert(data_path=\"location\", frame=1)\n# Move up\ntext_obj.location[2] = 3\ntext_obj.keyframe_insert(data_path=\"location\", frame=50)\n```"
    },
    {
        "Text Input": "This script creates multiple shapes (Cube, Sphere, Cone, Cylinder, and Torus) and animates them by changing their position and color from red to blue over specified frames.",
        "Blender Script": "This script creates and animates five different mesh objects by moving them upwards and changing their color from red to blue using keyframe animation.\n\n```python\nimport bpy\n# Function to create an object, assign material, and animate it\ndef create_and_animate(mesh_type, location, start_frame, end_frame):\n    # Create mesh object\n    if mesh_type == \"Cube\":\n        bpy.ops.mesh.primitive_cube_add(location=location)\n    elif mesh_type == \"Sphere\":\n        bpy.ops.mesh.primitive_uv_sphere_add(location=location)\n    elif mesh_type == \"Cone\":\n        bpy.ops.mesh.primitive_cone_add(location=location)\n    elif mesh_type == \"Cylinder\":\n        bpy.ops.mesh.primitive_cylinder_add(location=location)\n    elif mesh_type == \"Torus\":\n        bpy.ops.mesh.primitive_torus_add(location=location)\n\n    obj = bpy.context.object\n\n    # Create material\n    mat = bpy.data.materials.new(name=f\"{mesh_type}_Material\")\n    mat.use_nodes = True\n    obj.data.materials.append(mat)\n    # Get Principled BSDF node\n    bsdf = mat.node_tree.nodes.get(\"Principled BSDF\")\n    # Animate color (Red \u2192 Blue)\n    bsdf.inputs[\"Base Color\"].default_value = (1, 0, 0, 1)  # Red\n    bsdf.inputs[\"Base Color\"].keyframe_insert(\"default_value\", frame=start_frame)\n    bsdf.inputs[\"Base Color\"].default_value = (0, 0, 1, 1)  # Blue\n    bsdf.inputs[\"Base Color\"].keyframe_insert(\"default_value\", frame=end_frame)\n    # Animate position (Move up)\n    obj.location[2] = 0\n    obj.keyframe_insert(data_path=\"location\", frame=start_frame)\n    obj.location[2] = 3\n    obj.keyframe_insert(data_path=\"location\", frame=end_frame)\n# Create multiple objects with animation\ncreate_and_animate(\"Cube\", (-4, 0, 0), 1, 50)\ncreate_and_animate(\"Sphere\", (-2, 0, 0), 10, 60)\ncreate_and_animate(\"Cone\", (0, 0, 0), 20, 70)\ncreate_and_animate(\"Cylinder\", (2, 0, 0), 30, 80)\ncreate_and_animate(\"Torus\", (4, 0, 0), 40, 90)\n```"
    },
    {
        "Text Input": "Apply random colors to all mesh objects in the scene.",
        "Blender Script": "import bpy\nimport random\n\n# Ensure the scene has a material slot\ndef get_random_color():\n    return (random.random(), random.random(), random.random(), 1)\n\nfor obj in bpy.data.objects:\n    if obj.type == \"MESH\":\n        mat = bpy.data.materials.new(name=\"RandomMaterial\")\n        mat.diffuse_color = get_random_color()\n        obj.data.materials.append(mat)\n\nprint(\"Random colors applied to all objects.\")"
    },
    {
        "Text Input": "Apply red color to the selected mesh object.",
        "Blender Script": "import bpy\n\n# Define the color (RGBA)\ncolor = (1.0, 0.0, 0.0, 1.0)  # Red\n\n# Get the selected object\nobj = bpy.context.active_object\n\nif obj and obj.type == \"MESH\":\n    mat = bpy.data.materials.new(name=\"RedMaterial\")\n    mat.diffuse_color = color\n    obj.data.materials.append(mat)\n\nprint(\"Red color applied to selected object.\")"
    },
    {
        "Text Input": "Add a cube at the origin (0,0,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nprint(\"Added a cube at (0,0,0)\")"
    },
    {
        "Text Input": "Add a UV Sphere at location (2,0,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(2, 0, 0))\nprint(\"Added a UV Sphere at (2,0,0)\")"
    },
    {
        "Text Input": "Add a Cylinder at location (-2,0,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(-2, 0, 0))\nprint(\"Added a Cylinder at (-2,0,0)\")"
    },
    {
        "Text Input": "Add a Cone at location (0,2,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 2, 0))\nprint(\"Added a Cone at (0,2,0)\")"
    },
    {
        "Text Input": "Add a Torus at location (0,-2,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.5, location=(0, -2, 0))\nprint(\"Added a Torus at (0,-2,0)\")"
    },
    {
        "Text Input": "Add a Monkey at location (3,3,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_monkey_add(location=(3, 3, 0))\nprint(\"Added a Monkey at (3,3,0)\")"
    },
    {
        "Text Input": "Add a Plane at location (0,0,-1).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, -1))\nprint(\"Added a Plane at (0,0,-1)\")"
    },
    {
        "Text Input": "Add an Ico Sphere at location (-3,3,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_ico_sphere_add(radius=1, location=(-3, 3, 0))\nprint(\"Added an Ico Sphere at (-3,3,0)\")"
    },
    {
        "Text Input": "Add a Grid at location (2,-2,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_grid_add(x_subdivisions=10, y_subdivisions=10, size=4, location=(2, -2, 0))\nprint(\"Added a Grid at (2,-2,0)\")"
    },
    {
        "Text Input": "Add a Text object with the text 'Hello Blender!' at location (0,0,2).",
        "Blender Script": "import bpy\n\nbpy.ops.object.text_add(location=(0, 0, 2))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Hello Blender!\"\nprint(\"Added a Text object with 'Hello Blender!'\")"
    },
    {
        "Text Input": "Add a Pyramid at location (0,0,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2, depth=3, location=(0, 0, 0))\nprint(\"Added a Pyramid at (0,0,0)\")"
    },
    {
        "Text Input": "Add a Hexagonal Prism at location (2,0,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=1, depth=2, location=(2, 0, 0))\nprint(\"Added a Hexagonal Prism at (2,0,0)\")"
    },
    {
        "Text Input": "Add a Star shape with 5 points.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.object.select_all(action='DESELECT')\n\nmesh = bpy.data.meshes.new(\"Star\")\nobj = bpy.data.objects.new(\"Star\", mesh)\n\nbpy.context.collection.objects.link(obj)\nbpy.context.view_layer.objects.active = obj\nobj.select_set(True)\n\nverts = []\nfaces = []\nnum_points = 5\ninner_radius = 0.5\nouter_radius = 1.0\n\nfor i in range(num_points * 2):\n    angle = math.pi * i / num_points\n    r = outer_radius if i % 2 == 0 else inner_radius\n    x, y = r * math.cos(angle), r * math.sin(angle)\n    verts.append((x, y, 0))\n\nfaces.append([i for i in range(len(verts))])\n\nmesh.from_pydata(verts, [], faces)\nmesh.update()\nprint(\"Added a Star shape.\")"
    },
    {
        "Text Input": "Add a Diamond shape at location (0,2,0).",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1, depth=2, location=(0, 2, 0))\nbpy.ops.transform.rotate(value=1.57, orient_axis='X')\nprint(\"Added a Diamond shape at (0,2,0)\")"
    },
    {
        "Text Input": "Add a Trapezoid shape.",
        "Blender Script": "import bpy\n\nmesh = bpy.data.meshes.new(\"Trapezoid\")\nobj = bpy.data.objects.new(\"Trapezoid\", mesh)\n\nbpy.context.collection.objects.link(obj)\nbpy.context.view_layer.objects.active = obj\nobj.select_set(True)\n\nverts = [(-2, -1, 0), (2, -1, 0), (1, 1, 0), (-1, 1, 0)]\nfaces = [(0, 1, 2, 3)]\n\nmesh.from_pydata(verts, [], faces)\nmesh.update()\nprint(\"Added a Trapezoid shape.\")"
    },
    {
        "Text Input": "Add a Heart shape.",
        "Blender Script": "import bpy\nimport math\n\nmesh = bpy.data.meshes.new(\"Heart\")\nobj = bpy.data.objects.new(\"Heart\", mesh)\nbpy.context.collection.objects.link(obj)\n\nverts = []\nfaces = []\n\nfor t in range(0, 360, 10):\n    rad = math.radians(t)\n    x = 16 * math.sin(rad) ** 3\n    y = 13 * math.cos(rad) - 5 * math.cos(2 * rad) - 2 * math.cos(3 * rad) - math.cos(4 * rad)\n    verts.append((x * 0.1, y * 0.1, 0))\n\nfaces.append([i for i in range(len(verts))])\n\nmesh.from_pydata(verts, [], faces)\nmesh.update()\nprint(\"Added a Heart shape.\")"
    },
    {
        "Text Input": "Add a Crescent Moon shape.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=2, location=(0, -2, 0))\nmoon = bpy.context.object\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.5, location=(0.8, -2, 0))\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = moon\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(moon)\n\nprint(\"Added a Crescent Moon shape.\")"
    },
    {
        "Text Input": "Add an L-shaped object.",
        "Blender Script": "import bpy\n\nmesh = bpy.data.meshes.new(\"L_Shape\")\nobj = bpy.data.objects.new(\"L_Shape\", mesh)\nbpy.context.collection.objects.link(obj)\n\nverts = [(0, 0, 0), (1, 0, 0), (1, 3, 0), (2, 3, 0), (2, 4, 0), (0, 4, 0)]\nfaces = [(0, 1, 2, 5), (2, 3, 4, 5)]\n\nmesh.from_pydata(verts, [], faces)\nmesh.update()\nprint(\"Added an L-shaped object.\")"
    },
    {
        "Text Input": "Add a Spiral Curve.",
        "Blender Script": "import bpy\nimport math\n\ncurve = bpy.data.curves.new(name=\"Spiral\", type='CURVE')\ncurve.dimensions = '3D'\nspline = curve.splines.new('POLY')\nspline.points.add(49)\n\nfor i in range(50):\n    angle = i * 0.2\n    x = math.cos(angle) * i * 0.1\n    y = math.sin(angle) * i * 0.1\n    z = i * 0.05\n    spline.points[i].co = (x, y, z, 1)\n\nobj = bpy.data.objects.new(\"Spiral\", curve)\nbpy.context.collection.objects.link(obj)\nprint(\"Added a Spiral Curve.\")"
    },
    {
        "Text Input": "Add a Cross shape.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.object\n\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=0.6, location=(i - 1.5, 0, 0))\n    bpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, i - 1.5, 0))\n\nprint(\"Added a Cross shape.\")"
    },
    {
        "Text Input": "Animate an object to move up and down.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    obj.location.z = (frame % 20) * 0.2\n    obj.keyframe_insert(data_path=\"location\", index=2, frame=frame)\n\nprint(\"Object moves up and down.\")"
    },
    {
        "Text Input": "Animate an object to rotate around its axis.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    obj.rotation_euler.z = math.radians(frame * 3.6)\n    obj.keyframe_insert(data_path=\"rotation_euler\", index=2, frame=frame)\n\nprint(\"Object rotates around its axis.\")"
    },
    {
        "Text Input": "Animate an object to scale up and down.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    obj.scale = (1 + (frame % 20) * 0.05, 1 + (frame % 20) * 0.05, 1)\n    obj.keyframe_insert(data_path=\"scale\", frame=frame)\n\nprint(\"Object scales up and down.\")"
    },
    {
        "Text Input": "Animate an object to move in a circular path.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.mesh.primitive_cube_add(location=(2, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    angle = math.radians(frame * 3.6)\n    obj.location.x = 2 * math.cos(angle)\n    obj.location.y = 2 * math.sin(angle)\n    obj.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Object moves in a circular path.\")"
    },
    {
        "Text Input": "Animate an object to move in a sine wave path.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    obj.location.x = frame * 0.1\n    obj.location.z = math.sin(frame * 0.2) * 2\n    obj.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Object moves in a sine wave path.\")"
    },
    {
        "Text Input": "Animate an object to jump in a parabolic motion.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\nobj = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    obj.location.x = frame * 0.1\n    obj.location.z = max(0, 2 - ((frame % 20 - 10) ** 2) * 0.02)\n    obj.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Object jumps in a parabolic motion.\")"
    },
    {
        "Text Input": "Animate a light's intensity to change over time.",
        "Blender Script": "import bpy\n\nbpy.ops.object.light_add(type='POINT', location=(0, 0, 5))\nlight = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    light.data.energy = (frame % 20) * 5\n    light.keyframe_insert(data_path=\"energy\", frame=frame)\n\nprint(\"Light intensity changes over time.\")"
    },
    {
        "Text Input": "Animate a camera to zoom in.",
        "Blender Script": "import bpy\n\nbpy.ops.object.camera_add(location=(0, -5, 2))\ncam = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    cam.location.y += 0.1\n    cam.keyframe_insert(data_path=\"location\", index=1, frame=frame)\n\nprint(\"Camera zooms in.\")"
    },
    {
        "Text Input": "Animate a monkey mesh to orbit around a target object.",
        "Blender Script": "import bpy\nimport math\n\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\ntarget = bpy.context.object\n\nbpy.ops.mesh.primitive_monkey_add(location=(3, 0, 0))\nmonkey = bpy.context.object\n\nfor frame in range(0, 100, 10):\n    angle = math.radians(frame * 3.6)\n    monkey.location.x = 3 * math.cos(angle)\n    monkey.location.y = 3 * math.sin(angle)\n    monkey.keyframe_insert(data_path=\"location\", frame=frame)\n\nprint(\"Monkey orbits around the target.\")"
    },
    {
        "Text Input": "Add a cube and apply a red material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"RedMaterial\")\nmat.diffuse_color = (1, 0, 0, 1)  # Red\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a UV sphere and apply a green material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_uv_sphere_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"GreenMaterial\")\nmat.diffuse_color = (0, 1, 0, 1)  # Green\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a cylinder and apply a blue material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cylinder_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"BlueMaterial\")\nmat.diffuse_color = (0, 0, 1, 1)  # Blue\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a cone and apply a yellow material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cone_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"YellowMaterial\")\nmat.diffuse_color = (1, 1, 0, 1)  # Yellow\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a torus and apply a purple material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_torus_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"PurpleMaterial\")\nmat.diffuse_color = (1, 0, 1, 1)  # Purple\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a plane and apply a cyan material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_plane_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"CyanMaterial\")\nmat.diffuse_color = (0, 1, 1, 1)  # Cyan\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a monkey mesh and apply an orange material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_monkey_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"OrangeMaterial\")\nmat.diffuse_color = (1, 0.5, 0, 1)  # Orange\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add an icosphere and apply a magenta material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_ico_sphere_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"MagentaMaterial\")\nmat.diffuse_color = (0.5, 0, 1, 1)  # Magenta\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a metaball and apply a gold material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.object.metaball_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"GoldMaterial\")\nmat.diffuse_color = (1, 0.8, 0, 1)  # Gold\nobj.data.materials.append(mat)"
    },
    {
        "Text Input": "Add a cube and apply a brown material to it.",
        "Blender Script": "import bpy\n\nbpy.ops.mesh.primitive_cube_add()\nobj = bpy.context.object\n\nmat = bpy.data.materials.new(name=\"BrownMaterial\")\nmat.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown\nobj.data.materials.append(mat)"
    }
    
    
]